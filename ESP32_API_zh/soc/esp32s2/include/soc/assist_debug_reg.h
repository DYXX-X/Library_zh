#define ASSIST_DEBUG_BASE DR_REG_ASSIST_DEBUG_BASE

#define ASSIST_DEBUG_INTERRUPT_ENA              ((ASSIST_DEBUG_BASE) +0x00)
#define ASSIST_DEBUG_INTERRUPT_RAW              ((ASSIST_DEBUG_BASE) +0x04)
#define ASSIST_DEBUG_INTERRUPT_RLS              ((ASSIST_DEBUG_BASE) +0x08)
#define ASSIST_DEBUG_INTERRUPT_CLR              ((ASSIST_DEBUG_BASE) +0x0C)

#define ASSIST_DEBUG_SP_SPILL_MAX                                    BIT(19)
#define ASSIST_DEBUG_SP_SPILL_MIN                                    BIT(18)
#define ASSIST_DEBUG_AREA_2_1_AHB_WR                                 BIT(17)
#define ASSIST_DEBUG_AREA_2_1_AHB_RD                                 BIT(16)
#define ASSIST_DEBUG_AREA_2_0_AHB_WR                                 BIT(15)
#define ASSIST_DEBUG_AREA_2_0_AHB_RD                                 BIT(14)
#define ASSIST_DEBUG_AREA_1_1_DROM0_RD                               BIT(13)
#define ASSIST_DEBUG_AREA_1_0_DROM0_RD                               BIT(12)
#define ASSIST_DEBUG_AREA_0_1_DPORT0_WR                              BIT(11)
#define ASSIST_DEBUG_AREA_0_1_DPORT0_RD                              BIT(10)
#define ASSIST_DEBUG_AREA_0_1_DRAM1_WR                               BIT(9)
#define ASSIST_DEBUG_AREA_0_1_DRAM1_RD                               BIT(8)
#define ASSIST_DEBUG_AREA_0_1_DRAM0_WR                               BIT(7)
#define ASSIST_DEBUG_AREA_0_1_DRAM0_RD                               BIT(6)
#define ASSIST_DEBUG_AREA_0_0_DPORT0_WR                              BIT(5)
#define ASSIST_DEBUG_AREA_0_0_DPORT0_RD                              BIT(4)
#define ASSIST_DEBUG_AREA_0_0_DRAM1_WR                               BIT(3)
#define ASSIST_DEBUG_AREA_0_0_DRAM1_RD                               BIT(2)
#define ASSIST_DEBUG_AREA_0_0_DRAM0_WR                               BIT(1)
#define ASSIST_DEBUG_AREA_0_0_DRAM0_RD                               BIT(0)


#define ASSIST_DEBUG_AREA_0_0_MIN               ((ASSIST_DEBUG_BASE) +0x10)
#define ASSIST_DEBUG_AREA_0_0_MAX               ((ASSIST_DEBUG_BASE) +0x14)
#define ASSIST_DEBUG_AREA_0_1_MIN               ((ASSIST_DEBUG_BASE) +0x18)
#define ASSIST_DEBUG_AREA_0_1_MAX               ((ASSIST_DEBUG_BASE) +0x1C)
#define ASSIST_DEBUG_AREA_1_0_MIN               ((ASSIST_DEBUG_BASE) +0x20)
#define ASSIST_DEBUG_AREA_1_0_MAX               ((ASSIST_DEBUG_BASE) +0x24)
#define ASSIST_DEBUG_AREA_1_1_MIN               ((ASSIST_DEBUG_BASE) +0x28)
#define ASSIST_DEBUG_AREA_1_1_MAX               ((ASSIST_DEBUG_BASE) +0x2C)
#define ASSIST_DEBUG_AREA_2_0_MIN               ((ASSIST_DEBUG_BASE) +0x30)
#define ASSIST_DEBUG_AREA_2_0_MAX               ((ASSIST_DEBUG_BASE) +0x34)
#define ASSIST_DEBUG_AREA_2_1_MIN               ((ASSIST_DEBUG_BASE) +0x38)
#define ASSIST_DEBUG_AREA_2_1_MAX               ((ASSIST_DEBUG_BASE) +0x3C)
#define ASSIST_DEBUG_AREA_PC                    ((ASSIST_DEBUG_BASE) +0x40)
#define ASSIST_DEBUG_AREA_SP                    ((ASSIST_DEBUG_BASE) +0x44)


#define ASSIST_DEBUG_PRO_SP_UNSTABLE            ((ASSIST_DEBUG_BASE) +0x48)
#define ASSIST_DEBUG_PRO_SP_MIN                 ((ASSIST_DEBUG_BASE) +0x4C)
#define ASSIST_DEBUG_PRO_SP_MAX                 ((ASSIST_DEBUG_BASE) +0x50)
#define ASSIST_DEBUG_PRO_SP_PC                  ((ASSIST_DEBUG_BASE) +0x54)

#define ASSIST_DEBUG_PRO_PDEBUGENABLE           ((ASSIST_DEBUG_BASE) +0x58)
#define ASSIST_DEBUG_PRO_RCD_RECORDING          ((ASSIST_DEBUG_BASE) +0x5C)
#define ASSIST_DEBUG_PRO_RCD_PDEBUGINST	        ((ASSIST_DEBUG_BASE) +0x60)
/* 寄存器布局：SIZE[7..0]：指令通常在W阶段完成。W中指令的大小由该字段以字节数表示。如果在给定周期中为8’b0，则W阶段没有完成指令。这也被称为泡沫周期。另请参见DPORT_PRO_CPU_RECORD_PDEBUGSTATUS_REG。ISRC[14..12]：指令源。回路[23..20]：回路状态。信级[27..24]：信级。
*/
#define DPORT_RECORD_PDEBUGINST_SZ_M            ((DPORT_RECORD_PDEBUGINST_SZ_V)<<(DPORT_RECORD_PDEBUGINST_SZ_S))
#define DPORT_RECORD_PDEBUGINST_SZ_V            0xFF
#define DPORT_RECORD_PDEBUGINST_SZ_S            0
#define DPORT_RECORD_PDEBUGINST_SZ(_r_)         (((_r_)>>DPORT_RECORD_PDEBUGINST_SZ_S) & DPORT_RECORD_PDEBUGINST_SZ_V)
#define DPORT_RECORD_PDEBUGINST_ISRC_M          ((DPORT_RECORD_PDEBUGINST_ISRC_V)<<(DPORT_RECORD_PDEBUGINST_ISRC_S))
#define DPORT_RECORD_PDEBUGINST_ISRC_V          0x07
#define DPORT_RECORD_PDEBUGINST_ISRC_S          12
#define DPORT_RECORD_PDEBUGINST_ISRC(_r_)       (((_r_)>>DPORT_RECORD_PDEBUGINST_ISRC_S) & DPORT_RECORD_PDEBUGINST_ISRC_V)
// #定义DPORT_RECORD_PDEBUGINST_LOOP_M
// #定义DPORT_RECORD_PDEBUGINST_LOOP_V 0x0F
// #定义DPORT_RECORD_PDEBUGINST_LOOP_S 20
// #定义DPORT_RECORD_PDEBUGINST_LOOP（_r_）
#define DPORT_RECORD_PDEBUGINST_LOOP_REP        (BIT(20)) /* 将发生回送*/
#define DPORT_RECORD_PDEBUGINST_LOOP            (BIT(21)) /* 循环的最后一个指令*/
#define DPORT_RECORD_PDEBUGINST_CINTL_M         ((DPORT_RECORD_PDEBUGINST_CINTL_V)<<(DPORT_RECORD_PDEBUGINST_CINTL_S))
#define DPORT_RECORD_PDEBUGINST_CINTL_V         0x0F
#define DPORT_RECORD_PDEBUGINST_CINTL_S         24
#define DPORT_RECORD_PDEBUGINST_CINTL(_r_)      (((_r_)>>DPORT_RECORD_PDEBUGINST_CINTL_S) & DPORT_RECORD_PDEBUGINST_CINTL_V)

#define ASSIST_DEBUG_PRO_RCD_PDEBUGSTATUS	((ASSIST_DEBUG_BASE) +0x64)
/* 寄存器布局：BBCAUSE[5..0]：指示气泡循环的原因。有关possible值，请参见下文。当DPORT_RECORD_PDEBUGINST_SZ==0 INSNTYPE[5..0]时：指示W阶段退出的指令类型。有关possible值，请参见下文。当DPORT_RECORD_PDEBUGINST_SZ>0时
*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_M             ((DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_V)<<(DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_S))
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_V             0x3F
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_S             0
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE(_r_)          (((_r_)>>DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_S) & DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_V)
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_PSO           0x00 /* 电源关闭*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_DEP           0x02 /* 注册依赖项或资源冲突。更多信息请参见DPORT_XXX_CPU_RECORD_PDEBUGDATA_REG。*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_CTL           0x04 /* 控制传输气泡*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_ICM           0x08 /* I-cache未命中（包括未缓存未命中）*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_DCM           0x0C /* D缓存未命中（不包括未缓存未命中）*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_EXC0          0x10 /* 异常或中断（W阶段）。更多信息请参见DPORT_XXX_CPU_RECORD_PDEBUGDATA_REG。被终止的指令的虚拟地址显示在DPORT_PRO_CPU_RECORD_PDEBUGPC_REG[31:0]上*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_EXC1          0x11 /* 异常或中断（W+1级）。更多信息请参见DPORT_XXX_CPU_RECORD_PDEBUGDATA_REG。*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_RPL           0x14 /* 指令回放（其他）。DPORT_XXX_CPU_RECORD_PDEBUGDATA_REG具有重放指令的PC。*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_ITLB          0x18 /* HW ITLB重新填充。DPORT_PRO_CPU_RECORD_PDEBUGLS0ADDR_REG和DPORT_PRO-CPU_RECORD-PDEBUGLS 0DATA_REG上提供了重新填充地址和数据。*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_ITLBM         0x1A /* ITLB未命中*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_DTLB          0x1C /* HW DTLB重新填充。DPORT_PRO_CPU_RECORD_PDEBUGLS0ADDR_REG和DPORT_PRO-CPU_RECORD-PDEBUGLS 0DATA_REG上提供了重新填充地址和数据。*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_DTLBM         0x1E /* DTLB未命中*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_STALL         0x20 /* 失速。全局失速的原因在DPORT_XXX_CPU_RECORD_PDEBUGDATA_REG中进一步分类。*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_HWMEC         0x24 /* 硬件纠正内存错误*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_WAITI         0x28 /* WAITI模式*/
#define DPORT_RECORD_PDEBUGSTATUS_BBCAUSE_OTHER         0x3C /* 所有其他气泡*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_M            ((DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_V)<<(DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_S))
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_V            0x3F
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_S            0
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE(_r_)         (((_r_)>>DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_S) & DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_V)
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_JX           0x00 /* JX */
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_CALLX        0x04 /* CALLX */
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_CRET         0x08 /* 所有呼叫返回*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_ERET         0x0C /* 所有异常返回*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_B            0x10 /* 已执行分支或未执行循环*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_J            0x14 /* J */
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_CALL         0x18 /* CALL */
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_BN           0x1C /* 未采取的分支*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_LOOP         0x20 /* 循环指令（已执行）*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_S32C1I       0x24 /* S32C1I。地址和加载数据（在条件存储之前）在LS信号上可用*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_WXSR2LB      0x28 /* WSR/XSR至LBEGIN*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_WSR2MMID     0x2C /* WSR至MMID*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_RWXSR        0x30 /* RSR或WSR（MMID和LBEGIN除外）或XSR（LBEGIN例外）*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_RWER         0x34 /* RER或WER*/
#define DPORT_RECORD_PDEBUGSTATUS_INSNTYPE_DEF          0x3C /* 违约*/


#define ASSIST_DEBUG_PRO_RCD_PDEBUGDATA		((ASSIST_DEBUG_BASE) +0x68)
#define ASSIST_DEBUG_PRO_RCD_PDEBUGPC		((ASSIST_DEBUG_BASE) +0x6C)
#define ASSIST_DEBUG_PRO_RCD_PDEBUGLS0STAT	((ASSIST_DEBUG_BASE) +0x70)
#define ASSIST_DEBUG_PRO_RCD_PDEBUGLS0ADDR	((ASSIST_DEBUG_BASE) +0x74)
#define ASSIST_DEBUG_PRO_RCD_PDEBUGLS0DATA	((ASSIST_DEBUG_BASE) +0x78)
#define ASSIST_DEBUG_PRO_RCD_SP			    ((ASSIST_DEBUG_BASE) +0x7C)

#define ASSIST_DEBUG_CLOCK_GATE	    		((ASSIST_DEBUG_BASE) +0x80)
#define ASSIST_DEBUG_REG_DATE		    	((ASSIST_DEBUG_BASE) +0xFFC)

