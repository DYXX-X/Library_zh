// 版权所有2015-2016 Espressif Systems（上海）私人有限公司
//
// 根据Apache许可证2.0版（“许可证”）获得许可；
// 除非符合许可证，否则不得使用此文件。
// 您可以在以下地址获取许可证副本：

//     http://www.apache.org/licenses/LICENSE-2.0
//
// 除非适用法律要求或书面同意，软件
// 根据许可证分发的内容是按“原样”分发的，
// 无任何明示或暗示的保证或条件。
// 有关管理权限和
// 许可证下的限制。
#ifndef _SOC_SENS_REG_H_
#define _SOC_SENS_REG_H_


#include "soc.h"
#define SENS_SAR_READ_CTRL_REG          (DR_REG_SENS_BASE + 0x0000)
/* SENS_SAR1_DATA_INV:R/W；位位置：[28]；默认值：1'd0；*/
/*description:反转SAR ADC1数据*/
#define SENS_SAR1_DATA_INV  (BIT(28))
#define SENS_SAR1_DATA_INV_M  (BIT(28))
#define SENS_SAR1_DATA_INV_V  0x1
#define SENS_SAR1_DATA_INV_S  28
/* SENS_SAR1_DIG_FORCE:R/W；位位置：[27]；默认值：1'd0；*/
/*描述：1：由DIG ADC1 CTRL控制的SAR ADC1 0：由RTC ADC1 CTRL*/
#define SENS_SAR1_DIG_FORCE  (BIT(27))
#define SENS_SAR1_DIG_FORCE_M  (BIT(27))
#define SENS_SAR1_DIG_FORCE_V  0x1
#define SENS_SAR1_DIG_FORCE_S  27
/* SENS_SAR1_SAMPLE_NUM:R/W；位：[26:19]；默认值：8'd0；*/
/*说明：*/
#define SENS_SAR1_SAMPLE_NUM  0x000000FF
#define SENS_SAR1_SAMPLE_NUM_M  ((SENS_SAR1_SAMPLE_NUM_V)<<(SENS_SAR1_SAMPLE_NUM_S))
#define SENS_SAR1_SAMPLE_NUM_V  0xFF
#define SENS_SAR1_SAMPLE_NUM_S  19
/* SENS_SAR1_CLK_GATED:R/W；位位置：[18]；默认值：1’b1；*/
/*说明：*/
#define SENS_SAR1_CLK_GATED  (BIT(18))
#define SENS_SAR1_CLK_GATED_M  (BIT(18))
#define SENS_SAR1_CLK_GATED_V  0x1
#define SENS_SAR1_CLK_GATED_S  18
/* SENS_SAR1_SAMPLE_BIT:R/W；比特位置：[17:16]；默认值：2'd3；*/
/*描述：00：用于9位宽度01：用于10位宽度10：用于11位宽度11：用于12位宽度*/
#define SENS_SAR1_SAMPLE_BIT  0x00000003
#define SENS_SAR1_SAMPLE_BIT_M  ((SENS_SAR1_SAMPLE_BIT_V)<<(SENS_SAR1_SAMPLE_BIT_S))
#define SENS_SAR1_SAMPLE_BIT_V  0x3
#define SENS_SAR1_SAMPLE_BIT_S  16
/* SENS_SAR1_SAMPLE_CYCLE:R/W；比特位置：[15:8]；默认值：8'd9；*/
/*描述：SAR ADC1的采样周期*/
#define SENS_SAR1_SAMPLE_CYCLE  0x000000FF
#define SENS_SAR1_SAMPLE_CYCLE_M  ((SENS_SAR1_SAMPLE_CYCLE_V)<<(SENS_SAR1_SAMPLE_CYCLE_S))
#define SENS_SAR1_SAMPLE_CYCLE_V  0xFF
#define SENS_SAR1_SAMPLE_CYCLE_S  8
/* SENS_SAR1_CLK_DIV:R/W；位位置：[7:0]；默认值：8'd2；*/
/*描述：时钟分频器*/
#define SENS_SAR1_CLK_DIV  0x000000FF
#define SENS_SAR1_CLK_DIV_M  ((SENS_SAR1_CLK_DIV_V)<<(SENS_SAR1_CLK_DIV_S))
#define SENS_SAR1_CLK_DIV_V  0xFF
#define SENS_SAR1_CLK_DIV_S  0

#define SENS_SAR_READ_STATUS1_REG          (DR_REG_SENS_BASE + 0x0004)
/* SENS_SAR1_READER_STATUS：RO；位位置：[31:0]；默认值：32'h0；*/
/*说明：*/
#define SENS_SAR1_READER_STATUS  0xFFFFFFFF
#define SENS_SAR1_READER_STATUS_M  ((SENS_SAR1_READER_STATUS_V)<<(SENS_SAR1_READER_STATUS_S))
#define SENS_SAR1_READER_STATUS_V  0xFFFFFFFF
#define SENS_SAR1_READER_STATUS_S  0

#define SENS_SAR_MEAS_WAIT1_REG          (DR_REG_SENS_BASE + 0x0008)
/* SENS_SAR_AMP_WAIT2:R/W；比特位置：[31:16]；默认值：16'd10；*/
/*说明：*/
#define SENS_SAR_AMP_WAIT2  0x0000FFFF
#define SENS_SAR_AMP_WAIT2_M  ((SENS_SAR_AMP_WAIT2_V)<<(SENS_SAR_AMP_WAIT2_S))
#define SENS_SAR_AMP_WAIT2_V  0xFFFF
#define SENS_SAR_AMP_WAIT2_S  16
/* 传感器_空_空_等待1:R/W；比特位置：[15:0]；默认值：16'd10；*/
/*说明：*/
#define SENS_SAR_AMP_WAIT1  0x0000FFFF
#define SENS_SAR_AMP_WAIT1_M  ((SENS_SAR_AMP_WAIT1_V)<<(SENS_SAR_AMP_WAIT1_S))
#define SENS_SAR_AMP_WAIT1_V  0xFFFF
#define SENS_SAR_AMP_WAIT1_S  0

#define SENS_SAR_MEAS_WAIT2_REG          (DR_REG_SENS_BASE + 0x000c)
/* SENS_SAR2_RSTB_WAIT:R/W；位位置：[27:20]；默认值：8'd2；*/
/*说明：*/
#define SENS_SAR2_RSTB_WAIT  0x000000FF
#define SENS_SAR2_RSTB_WAIT_M  ((SENS_SAR2_RSTB_WAIT_V)<<(SENS_SAR2_RSTB_WAIT_S))
#define SENS_SAR2_RSTB_WAIT_V  0xFF
#define SENS_SAR2_RSTB_WAIT_S  20
/* 传感器_强制_XPD_SAR:R/W；比特位置：[19:18]；默认值：2'd0；*/
/*说明：*/
#define SENS_FORCE_XPD_SAR  0x00000003
#define SENS_FORCE_XPD_SAR_M  ((SENS_FORCE_XPD_SAR_V)<<(SENS_FORCE_XPD_SAR_S))
#define SENS_FORCE_XPD_SAR_V  0x3
#define SENS_FORCE_XPD_SAR_S  18
#define SENS_FORCE_XPD_SAR_SW_M (BIT1)
#define SENS_FORCE_XPD_SAR_FSM 0 // 使用FSM控制断电
#define SENS_FORCE_XPD_SAR_PD  2 // 强制关闭电源
#define SENS_FORCE_XPD_SAR_PU  3 // 强制加电
/* 传感器_强制_XPD_AMP：R/W；比特位置：[17:16]；默认值：2'd0；*/
/*说明：*/
#define SENS_FORCE_XPD_AMP  0x00000003
#define SENS_FORCE_XPD_AMP_M  ((SENS_FORCE_XPD_AMP_V)<<(SENS_FORCE_XPD_AMP_S))
#define SENS_FORCE_XPD_AMP_V  0x3
#define SENS_FORCE_XPD_AMP_S  16
#define SENS_FORCE_XPD_AMP_FSM 0 // 使用FSM控制断电
#define SENS_FORCE_XPD_AMP_PD  2 // 强制关闭电源
#define SENS_FORCE_XPD_AMP_PU  3 // 强制加电
/* SENS_SAR_AMP_WAIT3:R/W；比特位置：[15:0]；默认值：16'd10；*/
/*说明：*/
#define SENS_SAR_AMP_WAIT3  0x0000FFFF
#define SENS_SAR_AMP_WAIT3_M  ((SENS_SAR_AMP_WAIT3_V)<<(SENS_SAR_AMP_WAIT3_S))
#define SENS_SAR_AMP_WAIT3_V  0xFFFF
#define SENS_SAR_AMP_WAIT3_S  0

#define SENS_SAR_MEAS_CTRL_REG          (DR_REG_SENS_BASE + 0x0010)
/* SENS_SAR2_XPD_WAIT:R/W；位位置：[31:24]；默认值：8'h7；*/
/*说明：*/
#define SENS_SAR2_XPD_WAIT  0x000000FF
#define SENS_SAR2_XPD_WAIT_M  ((SENS_SAR2_XPD_WAIT_V)<<(SENS_SAR2_XPD_WAIT_S))
#define SENS_SAR2_XPD_WAIT_V  0xFF
#define SENS_SAR2_XPD_WAIT_S  24
/* SENS_SAR_RSTB_FSM:R/W；比特位置：[23:20]；默认值：4'0000；*/
/*说明：*/
#define SENS_SAR_RSTB_FSM  0x0000000F
#define SENS_SAR_RSTB_FSM_M  ((SENS_SAR_RSTB_FSM_V)<<(SENS_SAR_RSTB_FSM_S))
#define SENS_SAR_RSTB_FSM_V  0xF
#define SENS_SAR_RSTB_FSM_S  20
/* SENS_XPD_SAR_FSM:R/W；比特位置：[19:16]；默认值：4'b0111；*/
/*说明：*/
#define SENS_XPD_SAR_FSM  0x0000000F
#define SENS_XPD_SAR_FSM_M  ((SENS_XPD_SAR_FSM_V)<<(SENS_XPD_SAR_FSM_S))
#define SENS_XPD_SAR_FSM_V  0xF
#define SENS_XPD_SAR_FSM_S  16
/* 传感器_当前_短_接地_频率：R/W；比特位置：[15:12]；默认值：4'b0011；*/
/*说明：*/
#define SENS_AMP_SHORT_REF_GND_FSM  0x0000000F
#define SENS_AMP_SHORT_REF_GND_FSM_M  ((SENS_AMP_SHORT_REF_GND_FSM_V)<<(SENS_AMP_SHORT_REF_GND_FSM_S))
#define SENS_AMP_SHORT_REF_GND_FSM_V  0xF
#define SENS_AMP_SHORT_REF_GND_FSM_S  12
/* SENS_AMP_SHORT_REF_FSM:R/W；位位置：[11:8]；默认值：4'b0011；*/
/*说明：*/
#define SENS_AMP_SHORT_REF_FSM  0x0000000F
#define SENS_AMP_SHORT_REF_FSM_M  ((SENS_AMP_SHORT_REF_FSM_V)<<(SENS_AMP_SHORT_REF_FSM_S))
#define SENS_AMP_SHORT_REF_FSM_V  0xF
#define SENS_AMP_SHORT_REF_FSM_S  8
/* SENS_AMP_RST_FB_FSM:R/W；位位置：[7:4]；默认值：4'b1000；*/
/*说明：*/
#define SENS_AMP_RST_FB_FSM  0x0000000F
#define SENS_AMP_RST_FB_FSM_M  ((SENS_AMP_RST_FB_FSM_V)<<(SENS_AMP_RST_FB_FSM_S))
#define SENS_AMP_RST_FB_FSM_V  0xF
#define SENS_AMP_RST_FB_FSM_S  4
/* 传感器_XPD_SAR_AMP_FSM:R/W；位位置：[3:0]；默认值：4'b1111；*/
/*说明：*/
#define SENS_XPD_SAR_AMP_FSM  0x0000000F
#define SENS_XPD_SAR_AMP_FSM_M  ((SENS_XPD_SAR_AMP_FSM_V)<<(SENS_XPD_SAR_AMP_FSM_S))
#define SENS_XPD_SAR_AMP_FSM_V  0xF
#define SENS_XPD_SAR_AMP_FSM_S  0

#define SENS_SAR_READ_STATUS2_REG          (DR_REG_SENS_BASE + 0x0014)
/* SENS_SAR2_READER_STATUS：RO；位位置：[31:0]；默认值：32'h0；*/
/*说明：*/
#define SENS_SAR2_READER_STATUS  0xFFFFFFFF
#define SENS_SAR2_READER_STATUS_M  ((SENS_SAR2_READER_STATUS_V)<<(SENS_SAR2_READER_STATUS_S))
#define SENS_SAR2_READER_STATUS_V  0xFFFFFFFF
#define SENS_SAR2_READER_STATUS_S  0

#define SENS_ULP_CP_SLEEP_CYC0_REG          (DR_REG_SENS_BASE + 0x0018)
/* SENS_SLEEP_CYCLES_S0:R/W；位位置：[31:0]；默认值：32'd200；*/
/*描述：ULP协处理器计时器的休眠周期*/
#define SENS_SLEEP_CYCLES_S0  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S0_M  ((SENS_SLEEP_CYCLES_S0_V)<<(SENS_SLEEP_CYCLES_S0_S))
#define SENS_SLEEP_CYCLES_S0_V  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S0_S  0

#define SENS_ULP_CP_SLEEP_CYC1_REG          (DR_REG_SENS_BASE + 0x001c)
/* SENS_SLEEP_CYCLES_S1:R/W；位位置：[31:0]；默认值：32'd100；*/
/*说明：*/
#define SENS_SLEEP_CYCLES_S1  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S1_M  ((SENS_SLEEP_CYCLES_S1_V)<<(SENS_SLEEP_CYCLES_S1_S))
#define SENS_SLEEP_CYCLES_S1_V  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S1_S  0

#define SENS_ULP_CP_SLEEP_CYC2_REG          (DR_REG_SENS_BASE + 0x0020)
/* SENS_SLEEP_CYCLES_S2:R/W；位位置：[31:0]；默认值：32'd50；*/
/*说明：*/
#define SENS_SLEEP_CYCLES_S2  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S2_M  ((SENS_SLEEP_CYCLES_S2_V)<<(SENS_SLEEP_CYCLES_S2_S))
#define SENS_SLEEP_CYCLES_S2_V  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S2_S  0

#define SENS_ULP_CP_SLEEP_CYC3_REG          (DR_REG_SENS_BASE + 0x0024)
/* SENS_SLEEP_CYCLES_S3:R/W；位位置：[31:0]；默认值：32'd40；*/
/*说明：*/
#define SENS_SLEEP_CYCLES_S3  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S3_M  ((SENS_SLEEP_CYCLES_S3_V)<<(SENS_SLEEP_CYCLES_S3_S))
#define SENS_SLEEP_CYCLES_S3_V  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S3_S  0

#define SENS_ULP_CP_SLEEP_CYC4_REG          (DR_REG_SENS_BASE + 0x0028)
/* SENS_SLEEP_CYCLES_S4:R/W；位位置：[31:0]；默认值：32'd20；*/
/*说明：*/
#define SENS_SLEEP_CYCLES_S4  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S4_M  ((SENS_SLEEP_CYCLES_S4_V)<<(SENS_SLEEP_CYCLES_S4_S))
#define SENS_SLEEP_CYCLES_S4_V  0xFFFFFFFF
#define SENS_SLEEP_CYCLES_S4_S  0

#define SENS_SAR_START_FORCE_REG          (DR_REG_SENS_BASE + 0x002c)
/* SENS_SAR2_PWDET_EN:R/W；位位置：[24]；默认值：1’b0；*/
/*说明：不适用*/
#define SENS_SAR2_PWDET_EN  (BIT(24))
#define SENS_SAR2_PWDET_EN_M  (BIT(24))
#define SENS_SAR2_PWDET_EN_V  0x1
#define SENS_SAR2_PWDET_EN_S  24
/* SENS_SAR1_STOP:R/W；位位置：[23]；默认值：1’b0；*/
/*描述：停止SAR ADC1转换*/
#define SENS_SAR1_STOP  (BIT(23))
#define SENS_SAR1_STOP_M  (BIT(23))
#define SENS_SAR1_STOP_V  0x1
#define SENS_SAR1_STOP_S  23
/* SENS_SAR2_STOP:R/W；位位置：[22]；默认值：1’b0；*/
/*描述：停止SAR ADC2转换*/
#define SENS_SAR2_STOP  (BIT(22))
#define SENS_SAR2_STOP_M  (BIT(22))
#define SENS_SAR2_STOP_V  0x1
#define SENS_SAR2_STOP_S  22
/* SENS_PC_INIT:R/W；比特位置：[21:11]；默认值：11'b0；*/
/*描述：ULP协处理器的初始化PC*/
#define SENS_PC_INIT  0x000007FF
#define SENS_PC_INIT_M  ((SENS_PC_INIT_V)<<(SENS_PC_INIT_S))
#define SENS_PC_INIT_V  0x7FF
#define SENS_PC_INIT_S  11
/* SENS_SARCLK_EN:R/W；位位置：[10]；默认值：1’b0；*/
/*说明：*/
#define SENS_SARCLK_EN  (BIT(10))
#define SENS_SARCLK_EN_M  (BIT(10))
#define SENS_SARCLK_EN_V  0x1
#define SENS_SARCLK_EN_S  10
/* SENS_ULP_CP_START_TOP:R/W；位位置：[9]；默认值：1’b0；*/
/*description: 写入1以仅在reg_ULP_cp_force_start_top时启动ULP协处理器
 = 1*/
#define SENS_ULP_CP_START_TOP  (BIT(9))
#define SENS_ULP_CP_START_TOP_M  (BIT(9))
#define SENS_ULP_CP_START_TOP_V  0x1
#define SENS_ULP_CP_START_TOP_S  9
/* SENS_ULP_CP_FORCE_START_TOP:R/W；位位置：[8]；默认值：1’b0；*/
/*描述：1:ULP协处理器由SW启动0:ULP协处理程序由计时器启动*/
#define SENS_ULP_CP_FORCE_START_TOP  (BIT(8))
#define SENS_ULP_CP_FORCE_START_TOP_M  (BIT(8))
#define SENS_ULP_CP_FORCE_START_TOP_V  0x1
#define SENS_ULP_CP_FORCE_START_TOP_S  8
/* SENS_SAR2_PWDET_CCT:R/W；位位置：[7:5]；默认值：3'b0；*/
/*description:SAR2_PWDET_CCT PA功率检测器电容调谐。*/
#define SENS_SAR2_PWDET_CCT  0x00000007
#define SENS_SAR2_PWDET_CCT_M  ((SENS_SAR2_PWDET_CCT_V)<<(SENS_SAR2_PWDET_CCT_S))
#define SENS_SAR2_PWDET_CCT_V  0x7
#define SENS_SAR2_PWDET_CCT_S  5
/* SENS_SAR2_EN_TEST:R/W；位位置：[4]；默认值：1’b0；*/
/*description:SAR2_EN_TEST仅在reg_SAR2_dig_force=0时激活*/
#define SENS_SAR2_EN_TEST  (BIT(4))
#define SENS_SAR2_EN_TEST_M  (BIT(4))
#define SENS_SAR2_EN_TEST_V  0x1
#define SENS_SAR2_EN_TEST_S  4
/* SENS_SAR2_BIT_WIDTH:R/W；位位置：[3:2]；默认值：2'b11；*/
/*描述：00:9位01:10位10:11位11:12位*/
#define SENS_SAR2_BIT_WIDTH  0x00000003
#define SENS_SAR2_BIT_WIDTH_M  ((SENS_SAR2_BIT_WIDTH_V)<<(SENS_SAR2_BIT_WIDTH_S))
#define SENS_SAR2_BIT_WIDTH_V  0x3
#define SENS_SAR2_BIT_WIDTH_S  2
/* SENS_SAR1_BIT_WIDTH:R/W；位位置：[1:0]；默认值：2'b11；*/
/*描述：00:9位01:10位10:11位11:12位*/
#define SENS_SAR1_BIT_WIDTH  0x00000003
#define SENS_SAR1_BIT_WIDTH_M  ((SENS_SAR1_BIT_WIDTH_V)<<(SENS_SAR1_BIT_WIDTH_S))
#define SENS_SAR1_BIT_WIDTH_V  0x3
#define SENS_SAR1_BIT_WIDTH_S  0

#define SENS_SAR_MEM_WR_CTRL_REG          (DR_REG_SENS_BASE + 0x0030)
/* SENS_RTC_MEM_WR_offset_CLR:WO；位位置：[22]；默认值：1'd0；*/
/*说明：*/
#define SENS_RTC_MEM_WR_OFFST_CLR  (BIT(22))
#define SENS_RTC_MEM_WR_OFFST_CLR_M  (BIT(22))
#define SENS_RTC_MEM_WR_OFFST_CLR_V  0x1
#define SENS_RTC_MEM_WR_OFFST_CLR_S  22
/* SENS_MEM_WR_ADDR_SIZE:R/W；比特位置：[21:11]；默认值：11'd512；*/
/*说明：*/
#define SENS_MEM_WR_ADDR_SIZE  0x000007FF
#define SENS_MEM_WR_ADDR_SIZE_M  ((SENS_MEM_WR_ADDR_SIZE_V)<<(SENS_MEM_WR_ADDR_SIZE_S))
#define SENS_MEM_WR_ADDR_SIZE_V  0x7FF
#define SENS_MEM_WR_ADDR_SIZE_S  11
/* SENS_MEM_WR_ADDR_INIT:R/W；位位置：[10:0]；默认值：11'd512；*/
/*说明：*/
#define SENS_MEM_WR_ADDR_INIT  0x000007FF
#define SENS_MEM_WR_ADDR_INIT_M  ((SENS_MEM_WR_ADDR_INIT_V)<<(SENS_MEM_WR_ADDR_INIT_S))
#define SENS_MEM_WR_ADDR_INIT_V  0x7FF
#define SENS_MEM_WR_ADDR_INIT_S  0

#define SENS_SAR_ATTEN1_REG          (DR_REG_SENS_BASE + 0x0034)
/* SENS_SAR1_ATTEN:R/W；位位置：[31:0]；默认值：32'ffffffff；*/
/*描述：每个焊盘的2位衰减11:1dB 10:6dB 01:3dB 00:0dB*/
#define SENS_SAR1_ATTEN  0xFFFFFFFF
#define SENS_SAR1_ATTEN_M  ((SENS_SAR1_ATTEN_V)<<(SENS_SAR1_ATTEN_S))
#define SENS_SAR1_ATTEN_V  0xFFFFFFFF
#define SENS_SAR1_ATTEN_S  0
#define SENS_SAR1_ATTEN_VAL_MASK   0x3
#define SENS_SAR2_ATTEN_VAL_MASK   0x3

#define SENS_SAR_ATTEN2_REG          (DR_REG_SENS_BASE + 0x0038)
/* SENS_SAR2_ATTEN:R/W；位位置：[31:0]；默认值：32'ffffffff；*/
/*描述：每个焊盘的2位衰减11:1dB 10:6dB 01:3dB 00:0dB*/
#define SENS_SAR2_ATTEN  0xFFFFFFFF
#define SENS_SAR2_ATTEN_M  ((SENS_SAR2_ATTEN_V)<<(SENS_SAR2_ATTEN_S))
#define SENS_SAR2_ATTEN_V  0xFFFFFFFF
#define SENS_SAR2_ATTEN_S  0

#define SENS_SAR_SLAVE_ADDR1_REG          (DR_REG_SENS_BASE + 0x003c)
/* SENS_MEAS_STATUS:RO；位位置：[29:22]；默认值：8'0；*/
/*说明：*/
#define SENS_MEAS_STATUS  0x000000FF
#define SENS_MEAS_STATUS_M  ((SENS_MEAS_STATUS_V)<<(SENS_MEAS_STATUS_S))
#define SENS_MEAS_STATUS_V  0xFF
#define SENS_MEAS_STATUS_S  22
/* SENS_I2C_SLAVE_ADDR0:R/W；比特位置：[21:11]；默认值：11'0；*/
/*说明：*/
#define SENS_I2C_SLAVE_ADDR0  0x000007FF
#define SENS_I2C_SLAVE_ADDR0_M  ((SENS_I2C_SLAVE_ADDR0_V)<<(SENS_I2C_SLAVE_ADDR0_S))
#define SENS_I2C_SLAVE_ADDR0_V  0x7FF
#define SENS_I2C_SLAVE_ADDR0_S  11
/* 传感器I2C_SLAVE_ADDR1：R/W；位位置：[10:0]；默认值：11'0；*/
/*说明：*/
#define SENS_I2C_SLAVE_ADDR1  0x000007FF
#define SENS_I2C_SLAVE_ADDR1_M  ((SENS_I2C_SLAVE_ADDR1_V)<<(SENS_I2C_SLAVE_ADDR1_S))
#define SENS_I2C_SLAVE_ADDR1_V  0x7FF
#define SENS_I2C_SLAVE_ADDR1_S  0

#define SENS_SAR_SLAVE_ADDR2_REG          (DR_REG_SENS_BASE + 0x0040)
/* SENS_I2C_SLAVE_ADDR2:R/W；比特位置：[21:11]；默认值：11'0；*/
/*说明：*/
#define SENS_I2C_SLAVE_ADDR2  0x000007FF
#define SENS_I2C_SLAVE_ADDR2_M  ((SENS_I2C_SLAVE_ADDR2_V)<<(SENS_I2C_SLAVE_ADDR2_S))
#define SENS_I2C_SLAVE_ADDR2_V  0x7FF
#define SENS_I2C_SLAVE_ADDR2_S  11
/* 传感器I2C_SLAVE_ADDR3:R/W；位位置：[10:0]；默认值：11'0；*/
/*说明：*/
#define SENS_I2C_SLAVE_ADDR3  0x000007FF
#define SENS_I2C_SLAVE_ADDR3_M  ((SENS_I2C_SLAVE_ADDR3_V)<<(SENS_I2C_SLAVE_ADDR3_S))
#define SENS_I2C_SLAVE_ADDR3_V  0x7FF
#define SENS_I2C_SLAVE_ADDR3_S  0

#define SENS_SAR_SLAVE_ADDR3_REG          (DR_REG_SENS_BASE + 0x0044)
/* SENS_TSENS_RDY_OUT:RO；位位置：[30]；默认值：1'0；*/
/*说明：指示温度传感器输出就绪*/
#define SENS_TSENS_RDY_OUT  (BIT(30))
#define SENS_TSENS_RDY_OUT_M  (BIT(30))
#define SENS_TSENS_RDY_OUT_V  0x1
#define SENS_TSENS_RDY_OUT_S  30
/* SENS_TSENS_OUT:RO；位位置：[29:22]；默认值：8'0；*/
/*描述：温度传感器数据输出*/
#define SENS_TSENS_OUT  0x000000FF
#define SENS_TSENS_OUT_M  ((SENS_TSENS_OUT_V)<<(SENS_TSENS_OUT_S))
#define SENS_TSENS_OUT_V  0xFF
#define SENS_TSENS_OUT_S  22
/* SENS_I2C_SLAVE_ADDR4:R/W；比特位置：[21:11]；默认值：11'0；*/
/*说明：*/
#define SENS_I2C_SLAVE_ADDR4  0x000007FF
#define SENS_I2C_SLAVE_ADDR4_M  ((SENS_I2C_SLAVE_ADDR4_V)<<(SENS_I2C_SLAVE_ADDR4_S))
#define SENS_I2C_SLAVE_ADDR4_V  0x7FF
#define SENS_I2C_SLAVE_ADDR4_S  11
/* SENS_I2C_SLAVE_ADDR5:R/W；位位置：[10:0]；默认值：11'0；*/
/*说明：*/
#define SENS_I2C_SLAVE_ADDR5  0x000007FF
#define SENS_I2C_SLAVE_ADDR5_M  ((SENS_I2C_SLAVE_ADDR5_V)<<(SENS_I2C_SLAVE_ADDR5_S))
#define SENS_I2C_SLAVE_ADDR5_V  0x7FF
#define SENS_I2C_SLAVE_ADDR5_S  0

#define SENS_SAR_SLAVE_ADDR4_REG          (DR_REG_SENS_BASE + 0x0048)
/* SENS_I2C_DONE:RO；位位置：[30]；默认值：1'0；*/
/*描述：指示I2C已完成*/
#define SENS_I2C_DONE  (BIT(30))
#define SENS_I2C_DONE_M  (BIT(30))
#define SENS_I2C_DONE_V  0x1
#define SENS_I2C_DONE_S  30
/* SENS_I2C_RDATA:RO；位位置：[29:22]；默认值：8'0；*/
/*description:I2C读取数据*/
#define SENS_I2C_RDATA  0x000000FF
#define SENS_I2C_RDATA_M  ((SENS_I2C_RDATA_V)<<(SENS_I2C_RDATA_S))
#define SENS_I2C_RDATA_V  0xFF
#define SENS_I2C_RDATA_S  22
/* SENS_I2C_SLAVE_ADDR6:R/W；比特位置：[21:11]；默认值：11'0；*/
/*说明：*/
#define SENS_I2C_SLAVE_ADDR6  0x000007FF
#define SENS_I2C_SLAVE_ADDR6_M  ((SENS_I2C_SLAVE_ADDR6_V)<<(SENS_I2C_SLAVE_ADDR6_S))
#define SENS_I2C_SLAVE_ADDR6_V  0x7FF
#define SENS_I2C_SLAVE_ADDR6_S  11
/* SENS_I2C_SLAVE_ADDR7:R/W；位位置：[10:0]；默认值：11'0；*/
/*说明：*/
#define SENS_I2C_SLAVE_ADDR7  0x000007FF
#define SENS_I2C_SLAVE_ADDR7_M  ((SENS_I2C_SLAVE_ADDR7_V)<<(SENS_I2C_SLAVE_ADDR7_S))
#define SENS_I2C_SLAVE_ADDR7_V  0x7FF
#define SENS_I2C_SLAVE_ADDR7_S  0

#define SENS_SAR_TSENS_CTRL_REG          (DR_REG_SENS_BASE + 0x004c)
/* 传感器_传感器_泵_输出：R/W；位位置：[26]；默认值：1’b0；*/
/*描述：温度传感器转储仅在reg_tsens_power_up_force=1时激活*/
#define SENS_TSENS_DUMP_OUT  (BIT(26))
#define SENS_TSENS_DUMP_OUT_M  (BIT(26))
#define SENS_TSENS_DUMP_OUT_V  0x1
#define SENS_TSENS_DUMP_OUT_S  26
/* SENS_TSENS_POWER_UP_FORCE:R/W；位位置：[25]；默认值：1’b0；*/
/*描述：1：由SW控制的卸载和通电0：由FSM控制*/
#define SENS_TSENS_POWER_UP_FORCE  (BIT(25))
#define SENS_TSENS_POWER_UP_FORCE_M  (BIT(25))
#define SENS_TSENS_POWER_UP_FORCE_V  0x1
#define SENS_TSENS_POWER_UP_FORCE_S  25
/* SENS_TSENS_POWER_UP:R/W；位位置：[24]；默认值：1’b0；*/
/*描述：温度传感器通电*/
#define SENS_TSENS_POWER_UP  (BIT(24))
#define SENS_TSENS_POWER_UP_M  (BIT(24))
#define SENS_TSENS_POWER_UP_V  0x1
#define SENS_TSENS_POWER_UP_S  24
/* SENS_TSENS_CLK_DIV:R/W；比特位置：[23:16]；默认值：8'd6；*/
/*描述：温度传感器时钟分频器*/
#define SENS_TSENS_CLK_DIV  0x000000FF
#define SENS_TSENS_CLK_DIV_M  ((SENS_TSENS_CLK_DIV_V)<<(SENS_TSENS_CLK_DIV_S))
#define SENS_TSENS_CLK_DIV_V  0xFF
#define SENS_TSENS_CLK_DIV_S  16
/* 传感器_传感器_输入：R/W；位位置：[15]；默认值：1’b0；*/
/*描述：反转温度传感器数据*/
#define SENS_TSENS_IN_INV  (BIT(15))
#define SENS_TSENS_IN_INV_M  (BIT(15))
#define SENS_TSENS_IN_INV_V  0x1
#define SENS_TSENS_IN_INV_S  15
/* SENS_TSENS_CLK_GATED:R/W；位位置：[14]；默认值：1’b1；*/
/*说明：*/
#define SENS_TSENS_CLK_GATED  (BIT(14))
#define SENS_TSENS_CLK_GATED_M  (BIT(14))
#define SENS_TSENS_CLK_GATED_V  0x1
#define SENS_TSENS_CLK_GATED_S  14
/* SENS_TSENS_CLK_INV:R/W；位位置：[13]；默认值：1’b1；*/
/*说明：*/
#define SENS_TSENS_CLK_INV  (BIT(13))
#define SENS_TSENS_CLK_INV_M  (BIT(13))
#define SENS_TSENS_CLK_INV_V  0x1
#define SENS_TSENS_CLK_INV_S  13
/* SENS_TSENS_XPD_FORCE:R/W；位位置：[12]；默认值：1’b0；*/
/*说明：*/
#define SENS_TSENS_XPD_FORCE  (BIT(12))
#define SENS_TSENS_XPD_FORCE_M  (BIT(12))
#define SENS_TSENS_XPD_FORCE_V  0x1
#define SENS_TSENS_XPD_FORCE_S  12
/* SENS_TSENS_XPD_WAIT:R/W；位位置：[11:0]；默认值：12'h2；*/
/*说明：*/
#define SENS_TSENS_XPD_WAIT  0x00000FFF
#define SENS_TSENS_XPD_WAIT_M  ((SENS_TSENS_XPD_WAIT_V)<<(SENS_TSENS_XPD_WAIT_S))
#define SENS_TSENS_XPD_WAIT_V  0xFFF
#define SENS_TSENS_XPD_WAIT_S  0

#define SENS_SAR_I2C_CTRL_REG          (DR_REG_SENS_BASE + 0x0050)
/* SENS_SAR_I2C_START_FORCE:R/W；位位置：[29]；默认值：1’b0；*/
/*描述：1:I2C由SW启动0:I2C由FSM启动*/
#define SENS_SAR_I2C_START_FORCE  (BIT(29))
#define SENS_SAR_I2C_START_FORCE_M  (BIT(29))
#define SENS_SAR_I2C_START_FORCE_V  0x1
#define SENS_SAR_I2C_START_FORCE_S  29
/* SENS_SAR_I2C_START:R/W；位位置：[28]；默认值：1’b0；*/
/*描述：仅当reg_sar_I2C_start_force=1时启动I2C*/
#define SENS_SAR_I2C_START  (BIT(28))
#define SENS_SAR_I2C_START_M  (BIT(28))
#define SENS_SAR_I2C_START_V  0x1
#define SENS_SAR_I2C_START_S  28
/* SENS_SAR_I2C_CTRL:R/W；位位置：[27:0]；默认值：28'b0；*/
/*描述：I2C控制数据仅在reg_sar_I2C_start_force=1时激活*/
#define SENS_SAR_I2C_CTRL  0x0FFFFFFF
#define SENS_SAR_I2C_CTRL_M  ((SENS_SAR_I2C_CTRL_V)<<(SENS_SAR_I2C_CTRL_S))
#define SENS_SAR_I2C_CTRL_V  0xFFFFFFF
#define SENS_SAR_I2C_CTRL_S  0

#define SENS_SAR_MEAS_START1_REG          (DR_REG_SENS_BASE + 0x0054)
/* SENS_SAR1_EN_PAD_FORCE:R/W；位位置：[31]；默认值：1’b0；*/
/*描述：1:SAR ADC1衬垫启用位图由SW 0控制：SAR ADC1填充启用位图由ULP协处理器控制*/
#define SENS_SAR1_EN_PAD_FORCE  (BIT(31))
#define SENS_SAR1_EN_PAD_FORCE_M  (BIT(31))
#define SENS_SAR1_EN_PAD_FORCE_V  0x1
#define SENS_SAR1_EN_PAD_FORCE_S  31
/* SENS_SAR1_EN_PAD:R/W；位：[30:19]；默认值：12'b0；*/
/*描述：仅当reg_sar1_en_pad_force=1时，SAR ADC1极板启用位图处于活动状态*/
#define SENS_SAR1_EN_PAD  0x00000FFF
#define SENS_SAR1_EN_PAD_M  ((SENS_SAR1_EN_PAD_V)<<(SENS_SAR1_EN_PAD_S))
#define SENS_SAR1_EN_PAD_V  0xFFF
#define SENS_SAR1_EN_PAD_S  19
/* SENS_MEAS1_START_FORCE:R/W；位位置：[18]；默认值：1’b0；*/
/*描述：1:SAR ADC1控制器（在RTC中）由SW启动0:SAR ADC1处理器由ULP协处理器启动*/
#define SENS_MEAS1_START_FORCE  (BIT(18))
#define SENS_MEAS1_START_FORCE_M  (BIT(18))
#define SENS_MEAS1_START_FORCE_V  0x1
#define SENS_MEAS1_START_FORCE_S  18
/* 传感器MEAS1_START_SAR:R/W；位位置：[17]；默认值：1’b0；*/
/*描述：SAR ADC1控制器（在RTC中）仅在reg_meas1_start_force=1时启动转换*/
#define SENS_MEAS1_START_SAR  (BIT(17))
#define SENS_MEAS1_START_SAR_M  (BIT(17))
#define SENS_MEAS1_START_SAR_V  0x1
#define SENS_MEAS1_START_SAR_S  17
/* SENS_MEAS1_DONE_SAR:RO；位位置：[16]；默认值：1’b0；*/
/*描述：SAR ADC1转换完成指示*/
#define SENS_MEAS1_DONE_SAR  (BIT(16))
#define SENS_MEAS1_DONE_SAR_M  (BIT(16))
#define SENS_MEAS1_DONE_SAR_V  0x1
#define SENS_MEAS1_DONE_SAR_S  16
/* SENS_MEAS1_DATA_SAR:RO；比特位置：[15:0]；默认值：16'b0；*/
/*描述：SAR ADC1数据*/
#define SENS_MEAS1_DATA_SAR  0x0000FFFF
#define SENS_MEAS1_DATA_SAR_M  ((SENS_MEAS1_DATA_SAR_V)<<(SENS_MEAS1_DATA_SAR_S))
#define SENS_MEAS1_DATA_SAR_V  0xFFFF
#define SENS_MEAS1_DATA_SAR_S  0

#define SENS_SAR_TOUCH_CTRL1_REG          (DR_REG_SENS_BASE + 0x0058)
/* SENS_HALL_PHASE_FORCE:R/W；位位置：[27]；默认值：1’b0；*/
/*描述：1:HALL PHASE由SW 0控制：HALL PHASE由ULP协处理器中的FSM控制*/
#define SENS_HALL_PHASE_FORCE  (BIT(27))
#define SENS_HALL_PHASE_FORCE_M  (BIT(27))
#define SENS_HALL_PHASE_FORCE_V  0x1
#define SENS_HALL_PHASE_FORCE_S  27
/* SENS_XPD_HALL_FORCE:R/W；位位置：[26]；默认值：1’b0；*/
/*描述：1:XPD HALL由SW控制。0:XPD HALL由ULP协处理器中的FSM控制*/
#define SENS_XPD_HALL_FORCE  (BIT(26))
#define SENS_XPD_HALL_FORCE_M  (BIT(26))
#define SENS_XPD_HALL_FORCE_V  0x1
#define SENS_XPD_HALL_FORCE_S  26
/* SENS_TOUCH_OUT_1EN:R/W；位位置：[25]；默认值：1’b1；*/
/*描述：1：如果SET1被“触摸”，则产生唤醒中断0：仅当SET1和SET2都被“触摸时，才会产生唤醒中断*/
#define SENS_TOUCH_OUT_1EN  (BIT(25))
#define SENS_TOUCH_OUT_1EN_M  (BIT(25))
#define SENS_TOUCH_OUT_1EN_V  0x1
#define SENS_TOUCH_OUT_1EN_S  25
/* 传感器输出：R/W；位位置：[24]；默认值：1’b0；*/
/*描述：1：当计数器大于阈值时，触摸板被视为“已触摸”0：当计数器小于阈值时，触板被认为是“已触摸的”*/
#define SENS_TOUCH_OUT_SEL  (BIT(24))
#define SENS_TOUCH_OUT_SEL_M  (BIT(24))
#define SENS_TOUCH_OUT_SEL_V  0x1
#define SENS_TOUCH_OUT_SEL_S  24
/* SENS_TOUCH_XPD_WAIT:R/W；比特位置：[23:16]；默认值：8'h4；*/
/*描述：TOUCH_START和TOUCH_XPD之间的等待周期（8MHz）*/
#define SENS_TOUCH_XPD_WAIT  0x000000FF
#define SENS_TOUCH_XPD_WAIT_M  ((SENS_TOUCH_XPD_WAIT_V)<<(SENS_TOUCH_XPD_WAIT_S))
#define SENS_TOUCH_XPD_WAIT_V  0xFF
#define SENS_TOUCH_XPD_WAIT_S  16
/* SENS_TOUCH_MEAS_DELAY:R/W；比特位置：[15:0]；默认值：16'h1000；*/
/*描述：测量长度（8MHz）*/
#define SENS_TOUCH_MEAS_DELAY  0x0000FFFF
#define SENS_TOUCH_MEAS_DELAY_M  ((SENS_TOUCH_MEAS_DELAY_V)<<(SENS_TOUCH_MEAS_DELAY_S))
#define SENS_TOUCH_MEAS_DELAY_V  0xFFFF
#define SENS_TOUCH_MEAS_DELAY_S  0

#define SENS_SAR_TOUCH_THRES1_REG          (DR_REG_SENS_BASE + 0x005c)
/* SENS_TOUCH_OUT_TH0:R/W；比特位置：[31:16]；默认值：16'0；*/
/*description:触摸板0的阈值*/
#define SENS_TOUCH_OUT_TH0  0x0000FFFF
#define SENS_TOUCH_OUT_TH0_M  ((SENS_TOUCH_OUT_TH0_V)<<(SENS_TOUCH_OUT_TH0_S))
#define SENS_TOUCH_OUT_TH0_V  0xFFFF
#define SENS_TOUCH_OUT_TH0_S  16
/* SENS_TOUCH_OUT_TH1:R/W；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板1的阈值*/
#define SENS_TOUCH_OUT_TH1  0x0000FFFF
#define SENS_TOUCH_OUT_TH1_M  ((SENS_TOUCH_OUT_TH1_V)<<(SENS_TOUCH_OUT_TH1_S))
#define SENS_TOUCH_OUT_TH1_V  0xFFFF
#define SENS_TOUCH_OUT_TH1_S  0

#define SENS_SAR_TOUCH_THRES2_REG          (DR_REG_SENS_BASE + 0x0060)
/* SENS_TOUCH_OUT_TH2:R/W；比特位置：[31:16]；默认值：16'0；*/
/*description:触摸板2的阈值*/
#define SENS_TOUCH_OUT_TH2  0x0000FFFF
#define SENS_TOUCH_OUT_TH2_M  ((SENS_TOUCH_OUT_TH2_V)<<(SENS_TOUCH_OUT_TH2_S))
#define SENS_TOUCH_OUT_TH2_V  0xFFFF
#define SENS_TOUCH_OUT_TH2_S  16
/* SENS_TOUCH_OUT_TH3:R/W；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板3的阈值*/
#define SENS_TOUCH_OUT_TH3  0x0000FFFF
#define SENS_TOUCH_OUT_TH3_M  ((SENS_TOUCH_OUT_TH3_V)<<(SENS_TOUCH_OUT_TH3_S))
#define SENS_TOUCH_OUT_TH3_V  0xFFFF
#define SENS_TOUCH_OUT_TH3_S  0

#define SENS_SAR_TOUCH_THRES3_REG          (DR_REG_SENS_BASE + 0x0064)
/* SENS_TOUCH_OUT_TH4:R/W；比特位置：[31:16]；默认值：16'0；*/
/*描述：触摸板4的阈值*/
#define SENS_TOUCH_OUT_TH4  0x0000FFFF
#define SENS_TOUCH_OUT_TH4_M  ((SENS_TOUCH_OUT_TH4_V)<<(SENS_TOUCH_OUT_TH4_S))
#define SENS_TOUCH_OUT_TH4_V  0xFFFF
#define SENS_TOUCH_OUT_TH4_S  16
/* SENS_TOUCH_OUT_TH5:R/W；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板5的阈值*/
#define SENS_TOUCH_OUT_TH5  0x0000FFFF
#define SENS_TOUCH_OUT_TH5_M  ((SENS_TOUCH_OUT_TH5_V)<<(SENS_TOUCH_OUT_TH5_S))
#define SENS_TOUCH_OUT_TH5_V  0xFFFF
#define SENS_TOUCH_OUT_TH5_S  0

#define SENS_SAR_TOUCH_THRES4_REG          (DR_REG_SENS_BASE + 0x0068)
/* SENS_TOUCH_OUT_TH6:R/W；比特位置：[31:16]；默认值：16'0；*/
/*描述：触摸板6的阈值*/
#define SENS_TOUCH_OUT_TH6  0x0000FFFF
#define SENS_TOUCH_OUT_TH6_M  ((SENS_TOUCH_OUT_TH6_V)<<(SENS_TOUCH_OUT_TH6_S))
#define SENS_TOUCH_OUT_TH6_V  0xFFFF
#define SENS_TOUCH_OUT_TH6_S  16
/* SENS_TOUCH_OUT_TH7:R/W；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板7的阈值*/
#define SENS_TOUCH_OUT_TH7  0x0000FFFF
#define SENS_TOUCH_OUT_TH7_M  ((SENS_TOUCH_OUT_TH7_V)<<(SENS_TOUCH_OUT_TH7_S))
#define SENS_TOUCH_OUT_TH7_V  0xFFFF
#define SENS_TOUCH_OUT_TH7_S  0

#define SENS_SAR_TOUCH_THRES5_REG          (DR_REG_SENS_BASE + 0x006c)
/* SENS_TOUCH_OUT_TH8:R/W；比特位置：[31:16]；默认值：16'0；*/
/*描述：触摸板8的阈值*/
#define SENS_TOUCH_OUT_TH8  0x0000FFFF
#define SENS_TOUCH_OUT_TH8_M  ((SENS_TOUCH_OUT_TH8_V)<<(SENS_TOUCH_OUT_TH8_S))
#define SENS_TOUCH_OUT_TH8_V  0xFFFF
#define SENS_TOUCH_OUT_TH8_S  16
/* SENS_TOUCH_OUT_TH9:R/W；比特位置：[15:0]；默认值：16'0；*/
/*description:触摸板9的阈值*/
#define SENS_TOUCH_OUT_TH9  0x0000FFFF
#define SENS_TOUCH_OUT_TH9_M  ((SENS_TOUCH_OUT_TH9_V)<<(SENS_TOUCH_OUT_TH9_S))
#define SENS_TOUCH_OUT_TH9_V  0xFFFF
#define SENS_TOUCH_OUT_TH9_S  0

#define SENS_SAR_TOUCH_OUT1_REG          (DR_REG_SENS_BASE + 0x0070)
/* SENS_TOUCH_MEAS_OUT0:RO；比特位置：[31:16]；默认值：16'0；*/
/*description:触摸板0的计数器*/
#define SENS_TOUCH_MEAS_OUT0  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT0_M  ((SENS_TOUCH_MEAS_OUT0_V)<<(SENS_TOUCH_MEAS_OUT0_S))
#define SENS_TOUCH_MEAS_OUT0_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT0_S  16
/* SENS_TOUCH_MEAS_OUT1:RO；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板1的计数器*/
#define SENS_TOUCH_MEAS_OUT1  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT1_M  ((SENS_TOUCH_MEAS_OUT1_V)<<(SENS_TOUCH_MEAS_OUT1_S))
#define SENS_TOUCH_MEAS_OUT1_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT1_S  0

#define SENS_SAR_TOUCH_OUT2_REG          (DR_REG_SENS_BASE + 0x0074)
/* SENS_TOUCH_MEAS_OUT2:RO；比特位置：[31:16]；默认值：16'0；*/
/*描述：触摸板2的计数器*/
#define SENS_TOUCH_MEAS_OUT2  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT2_M  ((SENS_TOUCH_MEAS_OUT2_V)<<(SENS_TOUCH_MEAS_OUT2_S))
#define SENS_TOUCH_MEAS_OUT2_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT2_S  16
/* SENS_TOUCH_MEAS_OUT3:RO；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板3的计数器*/
#define SENS_TOUCH_MEAS_OUT3  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT3_M  ((SENS_TOUCH_MEAS_OUT3_V)<<(SENS_TOUCH_MEAS_OUT3_S))
#define SENS_TOUCH_MEAS_OUT3_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT3_S  0

#define SENS_SAR_TOUCH_OUT3_REG          (DR_REG_SENS_BASE + 0x0078)
/* SENS_TOUCH_MEAS_OUT4:RO；比特位置：[31:16]；默认值：16'0；*/
/*描述：触摸板4的计数器*/
#define SENS_TOUCH_MEAS_OUT4  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT4_M  ((SENS_TOUCH_MEAS_OUT4_V)<<(SENS_TOUCH_MEAS_OUT4_S))
#define SENS_TOUCH_MEAS_OUT4_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT4_S  16
/* SENS_TOUCH_MEAS_OUT5:RO；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板5的计数器*/
#define SENS_TOUCH_MEAS_OUT5  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT5_M  ((SENS_TOUCH_MEAS_OUT5_V)<<(SENS_TOUCH_MEAS_OUT5_S))
#define SENS_TOUCH_MEAS_OUT5_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT5_S  0

#define SENS_SAR_TOUCH_OUT4_REG          (DR_REG_SENS_BASE + 0x007c)
/* SENS_TOUCH_MEAS_OUT6:RO；比特位置：[31:16]；默认值：16'0；*/
/*描述：触摸板6的计数器*/
#define SENS_TOUCH_MEAS_OUT6  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT6_M  ((SENS_TOUCH_MEAS_OUT6_V)<<(SENS_TOUCH_MEAS_OUT6_S))
#define SENS_TOUCH_MEAS_OUT6_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT6_S  16
/* SENS_TOUCH_MEAS_OUT7:RO；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板7的计数器*/
#define SENS_TOUCH_MEAS_OUT7  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT7_M  ((SENS_TOUCH_MEAS_OUT7_V)<<(SENS_TOUCH_MEAS_OUT7_S))
#define SENS_TOUCH_MEAS_OUT7_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT7_S  0

#define SENS_SAR_TOUCH_OUT5_REG          (DR_REG_SENS_BASE + 0x0080)
/* SENS_TOUCH_MEAS_OUT8:RO；比特位置：[31:16]；默认值：16'0；*/
/*描述：触摸板计数器8*/
#define SENS_TOUCH_MEAS_OUT8  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT8_M  ((SENS_TOUCH_MEAS_OUT8_V)<<(SENS_TOUCH_MEAS_OUT8_S))
#define SENS_TOUCH_MEAS_OUT8_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT8_S  16
/* SENS_TOUCH_MEAS_OUT9:RO；比特位置：[15:0]；默认值：16'0；*/
/*描述：触摸板9的计数器*/
#define SENS_TOUCH_MEAS_OUT9  0x0000FFFF
#define SENS_TOUCH_MEAS_OUT9_M  ((SENS_TOUCH_MEAS_OUT9_V)<<(SENS_TOUCH_MEAS_OUT9_S))
#define SENS_TOUCH_MEAS_OUT9_V  0xFFFF
#define SENS_TOUCH_MEAS_OUT9_S  0

#define SENS_SAR_TOUCH_CTRL2_REG          (DR_REG_SENS_BASE + 0x0084)
/* SENS_TOUCH_MEAS_EN_CLR:WO；位位置：[30]；默认值：1'0；*/
/*description:清除reg_touch_meas_en*/
#define SENS_TOUCH_MEAS_EN_CLR  (BIT(30))
#define SENS_TOUCH_MEAS_EN_CLR_M  (BIT(30))
#define SENS_TOUCH_MEAS_EN_CLR_V  0x1
#define SENS_TOUCH_MEAS_EN_CLR_S  30
/* SENS_TOUCH_SLEEP_CYCLES:R/W；比特位置：[29:14]；默认值：16'h100；*/
/*描述：计时器的睡眠周期*/
#define SENS_TOUCH_SLEEP_CYCLES  0x0000FFFF
#define SENS_TOUCH_SLEEP_CYCLES_M  ((SENS_TOUCH_SLEEP_CYCLES_V)<<(SENS_TOUCH_SLEEP_CYCLES_S))
#define SENS_TOUCH_SLEEP_CYCLES_V  0xFFFF
#define SENS_TOUCH_SLEEP_CYCLES_S  14
/* SENS_TOUCH_START_FORCE:R/W；位位置：[13]；默认值：1'0；*/
/*描述：1：通过SW启动触摸fsm 0：通过计时器启动触摸fs*/
#define SENS_TOUCH_START_FORCE  (BIT(13))
#define SENS_TOUCH_START_FORCE_M  (BIT(13))
#define SENS_TOUCH_START_FORCE_V  0x1
#define SENS_TOUCH_START_FORCE_S  13
/* SENS_TOUCH_START_EN:R/W；位位置：[12]；默认值：1'0；*/
/*描述：1：设置reg_touch_start_force时，开始触摸fsm有效*/
#define SENS_TOUCH_START_EN  (BIT(12))
#define SENS_TOUCH_START_EN_M  (BIT(12))
#define SENS_TOUCH_START_EN_V  0x1
#define SENS_TOUCH_START_EN_S  12
/* SENS_TOUCH_START_FSM_EN:R/W；位位置：[11]；默认值：1'h1；*/
/*描述：1:TOUCH_START&TOUCH_XPD由触摸fsm控制0:TOUCH_START&TOUCH_EXPD由寄存器控制*/
#define SENS_TOUCH_START_FSM_EN  (BIT(11))
#define SENS_TOUCH_START_FSM_EN_M  (BIT(11))
#define SENS_TOUCH_START_FSM_EN_V  0x1
#define SENS_TOUCH_START_FSM_EN_S  11
/* SENS_TOUCH_MEAS_DONE:RO；位位置：[10]；默认值：1'0；*/
/*描述：fsm设置为1，表示触摸测量已完成*/
#define SENS_TOUCH_MEAS_DONE  (BIT(10))
#define SENS_TOUCH_MEAS_DONE_M  (BIT(10))
#define SENS_TOUCH_MEAS_DONE_V  0x1
#define SENS_TOUCH_MEAS_DONE_S  10
/* SENS_TOUCH_MEAS_EN:RO；位位置：[9:0]；默认值：10'0；*/
/*描述：10位寄存器，用于指示哪些焊盘被“触摸”*/
#define SENS_TOUCH_MEAS_EN  0x000003FF
#define SENS_TOUCH_MEAS_EN_M  ((SENS_TOUCH_MEAS_EN_V)<<(SENS_TOUCH_MEAS_EN_S))
#define SENS_TOUCH_MEAS_EN_V  0x3FF
#define SENS_TOUCH_MEAS_EN_S  0

#define SENS_SAR_TOUCH_ENABLE_REG          (DR_REG_SENS_BASE + 0x008c)
/* 传感器接触路径1:R/W；位位置：[29:20]；默认值：10'h3ff；*/
/*description:位图定义SET1用于生成唤醒中断。仅当SET1中至少一个触摸板被“触摸”时，SET1才被“触摸。*/
#define SENS_TOUCH_PAD_OUTEN1  0x000003FF
#define SENS_TOUCH_PAD_OUTEN1_M  ((SENS_TOUCH_PAD_OUTEN1_V)<<(SENS_TOUCH_PAD_OUTEN1_S))
#define SENS_TOUCH_PAD_OUTEN1_V  0x3FF
#define SENS_TOUCH_PAD_OUTEN1_S  20
/* 传感器接触路径2：R/W；比特位置：[19:10]；默认值：10'h3ff；*/
/*description:位图定义SET2，用于生成唤醒中断。只有当SET2中至少一个触摸板被“触摸”时，SET2才“触摸”。*/
#define SENS_TOUCH_PAD_OUTEN2  0x000003FF
#define SENS_TOUCH_PAD_OUTEN2_M  ((SENS_TOUCH_PAD_OUTEN2_V)<<(SENS_TOUCH_PAD_OUTEN2_S))
#define SENS_TOUCH_PAD_OUTEN2_V  0x3FF
#define SENS_TOUCH_PAD_OUTEN2_S  10
/* SENS_TOUCH_PAD_WORKEN:R/W；位位置：[9:0]；默认值：10'h3ff；*/
/*description:测量期间定义工作集的位图。*/
#define SENS_TOUCH_PAD_WORKEN  0x000003FF
#define SENS_TOUCH_PAD_WORKEN_M  ((SENS_TOUCH_PAD_WORKEN_V)<<(SENS_TOUCH_PAD_WORKEN_S))
#define SENS_TOUCH_PAD_WORKEN_V  0x3FF
#define SENS_TOUCH_PAD_WORKEN_S  0

#define SENS_SAR_READ_CTRL2_REG          (DR_REG_SENS_BASE + 0x0090)
/* SENS_SAR2_DATA_INV:R/W；位位置：[29]；默认值：1’b0；*/
/*description:反转SAR ADC2数据*/
#define SENS_SAR2_DATA_INV  (BIT(29))
#define SENS_SAR2_DATA_INV_M  (BIT(29))
#define SENS_SAR2_DATA_INV_V  0x1
#define SENS_SAR2_DATA_INV_S  29
/* SENS_SAR2_DIG_FORCE:R/W；位位置：[28]；默认值：1’b0；*/
/*描述：1：由DIG ADC2 CTRL或PWDET CTRL控制的SAR ADC2 0：由RTC ADC2 CTRL控制的SARADC2*/
#define SENS_SAR2_DIG_FORCE  (BIT(28))
#define SENS_SAR2_DIG_FORCE_M  (BIT(28))
#define SENS_SAR2_DIG_FORCE_V  0x1
#define SENS_SAR2_DIG_FORCE_S  28
/* SENS_SAR2_PWDET_FORCE:R/W；位位置：[27]；默认值：1’b0；*/
/*说明：*/
#define SENS_SAR2_PWDET_FORCE  (BIT(27))
#define SENS_SAR2_PWDET_FORCE_M  (BIT(27))
#define SENS_SAR2_PWDET_FORCE_V  0x1
#define SENS_SAR2_PWDET_FORCE_S  27
/* SENS_SAR2_SAMPLE_NUM:R/W；位：[26:19]；默认值：8'd0；*/
/*说明：*/
#define SENS_SAR2_SAMPLE_NUM  0x000000FF
#define SENS_SAR2_SAMPLE_NUM_M  ((SENS_SAR2_SAMPLE_NUM_V)<<(SENS_SAR2_SAMPLE_NUM_S))
#define SENS_SAR2_SAMPLE_NUM_V  0xFF
#define SENS_SAR2_SAMPLE_NUM_S  19
/* SENS_SAR2_CLK_GATED:R/W；位位置：[18]；默认值：1’b1；*/
/*说明：*/
#define SENS_SAR2_CLK_GATED  (BIT(18))
#define SENS_SAR2_CLK_GATED_M  (BIT(18))
#define SENS_SAR2_CLK_GATED_V  0x1
#define SENS_SAR2_CLK_GATED_S  18
/* SENS_SAR2_SAMPLE_BIT:R/W；比特位置：[17:16]；默认值：2'd3；*/
/*描述：00：用于9位宽度01：用于10位宽度10：用于11位宽度11：用于12位宽度*/
#define SENS_SAR2_SAMPLE_BIT  0x00000003
#define SENS_SAR2_SAMPLE_BIT_M  ((SENS_SAR2_SAMPLE_BIT_V)<<(SENS_SAR2_SAMPLE_BIT_S))
#define SENS_SAR2_SAMPLE_BIT_V  0x3
#define SENS_SAR2_SAMPLE_BIT_S  16
/* SENS_SAR2_SAMPLE_CYCLE:R/W；比特位置：[15:8]；默认值：8'd9；*/
/*描述：SAR ADC2的采样周期*/
#define SENS_SAR2_SAMPLE_CYCLE  0x000000FF
#define SENS_SAR2_SAMPLE_CYCLE_M  ((SENS_SAR2_SAMPLE_CYCLE_V)<<(SENS_SAR2_SAMPLE_CYCLE_S))
#define SENS_SAR2_SAMPLE_CYCLE_V  0xFF
#define SENS_SAR2_SAMPLE_CYCLE_S  8
/* SENS_SAR2_CLK_DIV:R/W；位位置：[7:0]；默认值：8'd2；*/
/*描述：时钟分频器*/
#define SENS_SAR2_CLK_DIV  0x000000FF
#define SENS_SAR2_CLK_DIV_M  ((SENS_SAR2_CLK_DIV_V)<<(SENS_SAR2_CLK_DIV_S))
#define SENS_SAR2_CLK_DIV_V  0xFF
#define SENS_SAR2_CLK_DIV_S  0

#define SENS_SAR_MEAS_START2_REG          (DR_REG_SENS_BASE + 0x0094)
/* SENS_SAR2_EN_PAD_FORCE:R/W；位位置：[31]；默认值：1’b0；*/
/*描述：1:SAR ADC2衬垫启用位图由SW 0控制：SAR ADC2填充启用位图由ULP协处理器控制*/
#define SENS_SAR2_EN_PAD_FORCE  (BIT(31))
#define SENS_SAR2_EN_PAD_FORCE_M  (BIT(31))
#define SENS_SAR2_EN_PAD_FORCE_V  0x1
#define SENS_SAR2_EN_PAD_FORCE_S  31
/* SENS_SAR2_EN_PAD:R/W；位：[30:19]；默认值：12'b0；*/
/*描述：仅当reg_sar2_en_pad_force=1时，SAR ADC2极板启用位图处于活动状态*/
#define SENS_SAR2_EN_PAD  0x00000FFF
#define SENS_SAR2_EN_PAD_M  ((SENS_SAR2_EN_PAD_V)<<(SENS_SAR2_EN_PAD_S))
#define SENS_SAR2_EN_PAD_V  0xFFF
#define SENS_SAR2_EN_PAD_S  19
/* SENS_MEAS2_START_FORCE:R/W；位位置：[18]；默认值：1’b0；*/
/*描述：1:SAR ADC2控制器（在RTC中）由SW启动0:SAR ADC2处理器由ULP协处理器启动*/
#define SENS_MEAS2_START_FORCE  (BIT(18))
#define SENS_MEAS2_START_FORCE_M  (BIT(18))
#define SENS_MEAS2_START_FORCE_V  0x1
#define SENS_MEAS2_START_FORCE_S  18
/* SENS_MEAS2_START_SAR:R/W；位位置：[17]；默认值：1’b0；*/
/*描述：SAR ADC2控制器（在RTC中）仅在reg_meas2_start_force=1时启动转换*/
#define SENS_MEAS2_START_SAR  (BIT(17))
#define SENS_MEAS2_START_SAR_M  (BIT(17))
#define SENS_MEAS2_START_SAR_V  0x1
#define SENS_MEAS2_START_SAR_S  17
/* SENS_MEAS2_DONE_SAR:RO；位位置：[16]；默认值：1’b0；*/
/*描述：SAR ADC2转换完成指示*/
#define SENS_MEAS2_DONE_SAR  (BIT(16))
#define SENS_MEAS2_DONE_SAR_M  (BIT(16))
#define SENS_MEAS2_DONE_SAR_V  0x1
#define SENS_MEAS2_DONE_SAR_S  16
/* SENS_MEAS2_DATA_SAR:RO；比特位置：[15:0]；默认值：16'b0；*/
/*描述：SAR ADC2数据*/
#define SENS_MEAS2_DATA_SAR  0x0000FFFF
#define SENS_MEAS2_DATA_SAR_M  ((SENS_MEAS2_DATA_SAR_V)<<(SENS_MEAS2_DATA_SAR_S))
#define SENS_MEAS2_DATA_SAR_V  0xFFFF
#define SENS_MEAS2_DATA_SAR_S  0

#define SENS_SAR_DAC_CTRL1_REG          (DR_REG_SENS_BASE + 0x0098)
/* SENS_DAC_CLK_INV：R/W；位位置：[25]；默认值：1’b0；*/
/*description:1：反转PDAC_CLK*/
#define SENS_DAC_CLK_INV  (BIT(25))
#define SENS_DAC_CLK_INV_M  (BIT(25))
#define SENS_DAC_CLK_INV_V  0x1
#define SENS_DAC_CLK_INV_S  25
/* SENS_DAC_CLK_FORCE_HIGH:R/W；位位置：[24]；默认值：1’b0；*/
/*description:1：强制PDAC_CLK为高*/
#define SENS_DAC_CLK_FORCE_HIGH  (BIT(24))
#define SENS_DAC_CLK_FORCE_HIGH_M  (BIT(24))
#define SENS_DAC_CLK_FORCE_HIGH_V  0x1
#define SENS_DAC_CLK_FORCE_HIGH_S  24
/* SENS_DAC_CLK_FORCE_LOW:R/W；位位置：[23]；默认值：1’b0；*/
/*description:1：强制PDAC_CLK为低*/
#define SENS_DAC_CLK_FORCE_LOW  (BIT(23))
#define SENS_DAC_CLK_FORCE_LOW_M  (BIT(23))
#define SENS_DAC_CLK_FORCE_LOW_V  0x1
#define SENS_DAC_CLK_FORCE_LOW_S  23
/* 传感器_数据_力：R/W；位位置：[22]；默认值：1’b0；*/
/*描述：1:DAC1和DAC2使用DMA 0:DAC1和DAC 2不使用DMA*/
#define SENS_DAC_DIG_FORCE  (BIT(22))
#define SENS_DAC_DIG_FORCE_M  (BIT(22))
#define SENS_DAC_DIG_FORCE_V  0x1
#define SENS_DAC_DIG_FORCE_S  22
/* SENS_DEBUG_BIT_SEL:R/W；比特位置：[21:17]；默认值：5’b0；*/
/*说明：*/
#define SENS_DEBUG_BIT_SEL  0x0000001F
#define SENS_DEBUG_BIT_SEL_M  ((SENS_DEBUG_BIT_SEL_V)<<(SENS_DEBUG_BIT_SEL_S))
#define SENS_DEBUG_BIT_SEL_V  0x1F
#define SENS_DEBUG_BIT_SEL_S  17
/* SENS_SW_TONE_EN:R/W；位位置：[16]；默认值：1’b0；*/
/*描述：1：启用CW发生器0：禁用CW发生器*/
#define SENS_SW_TONE_EN  (BIT(16))
#define SENS_SW_TONE_EN_M  (BIT(16))
#define SENS_SW_TONE_EN_V  0x1
#define SENS_SW_TONE_EN_S  16
/* SENS_SW_FSTEP:R/W；比特位置：[15:0]；默认值：16'b0；*/
/*说明：CW发生器的频率步长可用于调整频率*/
#define SENS_SW_FSTEP  0x0000FFFF
#define SENS_SW_FSTEP_M  ((SENS_SW_FSTEP_V)<<(SENS_SW_FSTEP_S))
#define SENS_SW_FSTEP_V  0xFFFF
#define SENS_SW_FSTEP_S  0

#define SENS_SAR_DAC_CTRL2_REG          (DR_REG_SENS_BASE + 0x009c)
/* SENS_DAC_CW_EN2:R/W；位位置：[25]；默认值：1’b1；*/
/*描述：1：选择CW发生器作为PDAC2_DAC[7:0]的源：选择寄存器reg_PDAC2_DAC[7:0]作为PDAC2_DAC[7:0的源*/
#define SENS_DAC_CW_EN2  (BIT(25))
#define SENS_DAC_CW_EN2_M  (BIT(25))
#define SENS_DAC_CW_EN2_V  0x1
#define SENS_DAC_CW_EN2_S  25
/* SENS_DAC_CW_EN1:R/W；位位置：[24]；默认值：1’b1；*/
/*描述：1：选择CW发生器作为PDAC1_DAC[7:0]的源：选择寄存器reg_PDAC1_DAC[7:0]作为PDACI_DAC[7:0.]的源*/
#define SENS_DAC_CW_EN1  (BIT(24))
#define SENS_DAC_CW_EN1_M  (BIT(24))
#define SENS_DAC_CW_EN1_V  0x1
#define SENS_DAC_CW_EN1_S  24
/* SENS_DAC_INV2:R/W；比特位置：[23:22]；默认值：2’b0；*/
/*描述：00：不反转任何位01：反转所有位10：反转MSB 11：反转除MSB之外的所有位*/
#define SENS_DAC_INV2  0x00000003
#define SENS_DAC_INV2_M  ((SENS_DAC_INV2_V)<<(SENS_DAC_INV2_S))
#define SENS_DAC_INV2_V  0x3
#define SENS_DAC_INV2_S  22
/* 传感器_数据_发票1:R/W；比特位置：[21:20]；默认值：2’b0；*/
/*描述：00：不反转任何位01：反转所有位10：反转MSB 11：反转除MSB之外的所有位*/
#define SENS_DAC_INV1  0x00000003
#define SENS_DAC_INV1_M  ((SENS_DAC_INV1_V)<<(SENS_DAC_INV1_S))
#define SENS_DAC_INV1_V  0x3
#define SENS_DAC_INV1_S  20
/* SENS_DAC_SCALE2:R/W；比特位置：[19:18]；默认值：2’b0；*/
/*描述：00：无比例01：比例到1/2 10：比例到1/4比例到1/8*/
#define SENS_DAC_SCALE2  0x00000003
#define SENS_DAC_SCALE2_M  ((SENS_DAC_SCALE2_V)<<(SENS_DAC_SCALE2_S))
#define SENS_DAC_SCALE2_V  0x3
#define SENS_DAC_SCALE2_S  18
/* SENS_DAC_SCALE1:R/W；比特位置：[17:16]；默认值：2’b0；*/
/*描述：00：无比例01：比例到1/2 10：比例到1/4比例到1/8*/
#define SENS_DAC_SCALE1  0x00000003
#define SENS_DAC_SCALE1_M  ((SENS_DAC_SCALE1_V)<<(SENS_DAC_SCALE1_S))
#define SENS_DAC_SCALE1_V  0x3
#define SENS_DAC_SCALE1_S  16
/* SENS_DAC_DC2:R/W；比特位置：[15:8]；默认值：8'b0；*/
/*描述：DAC2 CW发电机的直流偏移*/
#define SENS_DAC_DC2  0x000000FF
#define SENS_DAC_DC2_M  ((SENS_DAC_DC2_V)<<(SENS_DAC_DC2_S))
#define SENS_DAC_DC2_V  0xFF
#define SENS_DAC_DC2_S  8
/* SENS_DAC_DC1:R/W；位位置：[7:0]；默认值：8'b0；*/
/*描述：DAC1 CW发电机的直流偏移*/
#define SENS_DAC_DC1  0x000000FF
#define SENS_DAC_DC1_M  ((SENS_DAC_DC1_V)<<(SENS_DAC_DC1_S))
#define SENS_DAC_DC1_V  0xFF
#define SENS_DAC_DC1_S  0

#define SENS_SAR_MEAS_CTRL2_REG          (DR_REG_SENS_BASE + 0x0a0)
/* 传感器_振幅_短_增益_力：R/W；比特位置：[18:17]；默认值：2’b0；*/
/*说明：*/
#define SENS_AMP_SHORT_REF_GND_FORCE  0x00000003
#define SENS_AMP_SHORT_REF_GND_FORCE_M  ((SENS_AMP_SHORT_REF_GND_FORCE_V)<<(SENS_AMP_SHORT_REF_GND_FORCE_S))
#define SENS_AMP_SHORT_REF_GND_FORCE_V  0x3
#define SENS_AMP_SHORT_REF_GND_FORCE_S  17
#define SENS_AMP_SHORT_REF_GND_FORCE_FSM 0 // 使用FSM控制断电
#define SENS_AMP_SHORT_REF_GND_FORCE_PD  2 // 强制关闭电源
#define SENS_AMP_SHORT_REF_GND_FORCE_PU  3 // 强制加电
/* SENS_AMP_SHORT_REF_FORCE:R/W；比特位置：[16:15]；默认值：2’b0；*/
/*说明：*/
#define SENS_AMP_SHORT_REF_FORCE  0x00000003
#define SENS_AMP_SHORT_REF_FORCE_M  ((SENS_AMP_SHORT_REF_FORCE_V)<<(SENS_AMP_SHORT_REF_FORCE_S))
#define SENS_AMP_SHORT_REF_FORCE_V  0x3
#define SENS_AMP_SHORT_REF_FORCE_S  15
#define SENS_AMP_SHORT_REF_FORCE_FSM 0 // 使用FSM控制断电
#define SENS_AMP_SHORT_REF_FORCE_PD  2 // 强制关闭电源
#define SENS_AMP_SHORT_REF_FORCE_PU  3 // 强制加电
/* SENS_AMP_RST_FB_FORCE:R/W；比特位置：[14:13]；默认值：2’b0；*/
/*说明：*/
#define SENS_AMP_RST_FB_FORCE  0x00000003
#define SENS_AMP_RST_FB_FORCE_M  ((SENS_AMP_RST_FB_FORCE_V)<<(SENS_AMP_RST_FB_FORCE_S))
#define SENS_AMP_RST_FB_FORCE_V  0x3
#define SENS_AMP_RST_FB_FORCE_S  13
#define SENS_AMP_RST_FB_FORCE_FSM 0 // 使用FSM控制断电
#define SENS_AMP_RST_FB_FORCE_PD  2 // 强制关闭电源
#define SENS_AMP_RST_FB_FORCE_PU  3 // 强制加电
/* SENS_SAR2_RSTB_FORCE:R/W；比特位置：[12:11]；默认值：2’b0；*/
/*说明：*/
#define SENS_SAR2_RSTB_FORCE  0x00000003
#define SENS_SAR2_RSTB_FORCE_M  ((SENS_SAR2_RSTB_FORCE_V)<<(SENS_SAR2_RSTB_FORCE_S))
#define SENS_SAR2_RSTB_FORCE_V  0x3
#define SENS_SAR2_RSTB_FORCE_S  11
#define SENS_SAR2_RSTB_FORCE_FSM 0 // 使用FSM控制断电
#define SENS_SAR2_RSTB_FORCE_PD  2 // 强制关闭电源
#define SENS_SAR2_RSTB_FORCE_PU  3 // 强制加电
/* SENS_SAR_RSTB_FSM_IDLE:R/W；位位置：[10]；默认值：1’b0；*/
/*说明：*/
#define SENS_SAR_RSTB_FSM_IDLE  (BIT(10))
#define SENS_SAR_RSTB_FSM_IDLE_M  (BIT(10))
#define SENS_SAR_RSTB_FSM_IDLE_V  0x1
#define SENS_SAR_RSTB_FSM_IDLE_S  10
/* SENS_XPD_SAR_FSM_IDLE:R/W；位位置：[9]；默认值：1’b0；*/
/*说明：*/
#define SENS_XPD_SAR_FSM_IDLE  (BIT(9))
#define SENS_XPD_SAR_FSM_IDLE_M  (BIT(9))
#define SENS_XPD_SAR_FSM_IDLE_V  0x1
#define SENS_XPD_SAR_FSM_IDLE_S  9
/* SENS_AMP_SHORT_REF_agnd_FSM_IDLE:R/W；位位置：[8]；默认值：1’b0；*/
/*说明：*/
#define SENS_AMP_SHORT_REF_GND_FSM_IDLE  (BIT(8))
#define SENS_AMP_SHORT_REF_GND_FSM_IDLE_M  (BIT(8))
#define SENS_AMP_SHORT_REF_GND_FSM_IDLE_V  0x1
#define SENS_AMP_SHORT_REF_GND_FSM_IDLE_S  8
/* SENS_AMP_SHORT_REF_FSM_空闲：R/W；位位置：[7]；默认值：1’b0；*/
/*说明：*/
#define SENS_AMP_SHORT_REF_FSM_IDLE  (BIT(7))
#define SENS_AMP_SHORT_REF_FSM_IDLE_M  (BIT(7))
#define SENS_AMP_SHORT_REF_FSM_IDLE_V  0x1
#define SENS_AMP_SHORT_REF_FSM_IDLE_S  7
/* SENS_AMP_RST_FB_FSM_IDLE:R/W；位位置：[6]；默认值：1’b0；*/
/*说明：*/
#define SENS_AMP_RST_FB_FSM_IDLE  (BIT(6))
#define SENS_AMP_RST_FB_FSM_IDLE_M  (BIT(6))
#define SENS_AMP_RST_FB_FSM_IDLE_V  0x1
#define SENS_AMP_RST_FB_FSM_IDLE_S  6
/* 传感器_XPD_SAR_AMP_FSM_IDLE:R/W；位位置：[5]；默认值：1’b0；*/
/*说明：*/
#define SENS_XPD_SAR_AMP_FSM_IDLE  (BIT(5))
#define SENS_XPD_SAR_AMP_FSM_IDLE_M  (BIT(5))
#define SENS_XPD_SAR_AMP_FSM_IDLE_V  0x1
#define SENS_XPD_SAR_AMP_FSM_IDLE_S  5
/* SENS_SAR1_DAC_XPD_FSM_IDLE:R/W；位位置：[4]；默认值：1’b0；*/
/*说明：*/
#define SENS_SAR1_DAC_XPD_FSM_IDLE  (BIT(4))
#define SENS_SAR1_DAC_XPD_FSM_IDLE_M  (BIT(4))
#define SENS_SAR1_DAC_XPD_FSM_IDLE_V  0x1
#define SENS_SAR1_DAC_XPD_FSM_IDLE_S  4
/* SENS_SAR1_DAC_XPD_FSM:R/W；位位置：[3:0]；默认值：4'b0011；*/
/*说明：*/
#define SENS_SAR1_DAC_XPD_FSM  0x0000000F
#define SENS_SAR1_DAC_XPD_FSM_M  ((SENS_SAR1_DAC_XPD_FSM_V)<<(SENS_SAR1_DAC_XPD_FSM_S))
#define SENS_SAR1_DAC_XPD_FSM_V  0xF
#define SENS_SAR1_DAC_XPD_FSM_S  0

#define SENS_SAR_NOUSE_REG          (DR_REG_SENS_BASE + 0x00F8)
/* SENS_SAR_NOUSE:R/W；位位置：[31:0]；默认值：32'h0；*/
/*说明：*/
#define SENS_SAR_NOUSE  0xFFFFFFFF
#define SENS_SAR_NOUSE_M  ((SENS_SAR_NOUSE_V)<<(SENS_SAR_NOUSE_S))
#define SENS_SAR_NOUSE_V  0xFFFFFFFF
#define SENS_SAR_NOUSE_S  0

#define SENS_SARDATE_REG          (DR_REG_SENS_BASE + 0x00FC)
/* SENS_SAR_DATE:R/W；位位置：[27:0]；默认值：28'h1605180；*/
/*说明：*/
#define SENS_SAR_DATE  0x0FFFFFFF
#define SENS_SAR_DATE_M  ((SENS_SAR_DATE_V)<<(SENS_SAR_DATE_S))
#define SENS_SAR_DATE_V  0xFFFFFFF
#define SENS_SAR_DATE_S  0




#endif /*_SOC_SENS_REG_H_ */

