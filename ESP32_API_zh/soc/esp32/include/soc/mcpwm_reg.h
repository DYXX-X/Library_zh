/**
 *  SPDX文件版权文本：2021浓缩咖啡系统（上海）有限公司
 *
 *  SPDX许可证标识符：Apache-2.0
 */
#pragma once

#include <stdint.h>
#include "soc/soc.h"
#ifdef __cplusplus
extern "C" {
#endif

#define DR_REG_MCPWM_BASE(i) (DR_REG_PWM0_BASE + i * (0xE000))

/** MCPWM_CLK_CFG_REG寄存器PWM时钟预分频器寄存器。
 */
#define MCPWM_CLK_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x0)
/** MCPWM_CLK_PRESCALE：R/W；位位置：[7:0]；默认值：0；PWM_clk的周期=6.25ns（PWM_clk_PRESCALE+1）
 */
#define MCPWM_CLK_PRESCALE    0x000000FFU
#define MCPWM_CLK_PRESCALE_M  (MCPWM_CLK_PRESCALE_V << MCPWM_CLK_PRESCALE_S)
#define MCPWM_CLK_PRESCALE_V  0x000000FFU
#define MCPWM_CLK_PRESCALE_S  0

/** MCPWM_TIMER0_CFG0_REG寄存器PWM TIMER0周期和更新方法配置寄存器。
 */
#define MCPWM_TIMER0_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0x4)
/** MCPWM_TIMER0_PRESCALE：R/W；位位置：[7:0]；默认值：0；配置PT0_clk的除数，当PWM时间r0停止并启动agsin时生效。PT0_clk的周期=PWM_clk的周期（PWM_TIMER0_PRESCALE+1）
 */
#define MCPWM_TIMER0_PRESCALE    0x000000FFU
#define MCPWM_TIMER0_PRESCALE_M  (MCPWM_TIMER0_PRESCALE_V << MCPWM_TIMER0_PRESCALE_S)
#define MCPWM_TIMER0_PRESCALE_V  0x000000FFU
#define MCPWM_TIMER0_PRESCALE_S  0
/** MCPWM_TIMER0_周期：R/W；比特位置：[23:8]；默认值：255；PWM时间r0的周期阴影寄存器
 */
#define MCPWM_TIMER0_PERIOD    0x0000FFFFU
#define MCPWM_TIMER0_PERIOD_M  (MCPWM_TIMER0_PERIOD_V << MCPWM_TIMER0_PERIOD_S)
#define MCPWM_TIMER0_PERIOD_V  0x0000FFFFU
#define MCPWM_TIMER0_PERIOD_S  8
/** MCPWM_TIMER0_PERIOD_upmeth:R/W；位位置：[25:24]；默认值：0；PWM timer0周期、0：立即、1:TEZ、2:sync、3:TEZ或sync的活动寄存器的更新方法。此处和下方的TEZ表示计时器等于零事件
 */
#define MCPWM_TIMER0_PERIOD_UPMETHOD    0x00000003U
#define MCPWM_TIMER0_PERIOD_UPMETHOD_M  (MCPWM_TIMER0_PERIOD_UPMETHOD_V << MCPWM_TIMER0_PERIOD_UPMETHOD_S)
#define MCPWM_TIMER0_PERIOD_UPMETHOD_V  0x00000003U
#define MCPWM_TIMER0_PERIOD_UPMETHOD_S  24

/** MCPWM_TIMER0_CFG1_REG寄存器PWM TIMER0工作模式和启动/停止控制配置寄存器。
 */
#define MCPWM_TIMER0_CFG1_REG(i) (DR_REG_MCPWM_BASE(i) + 0x8)
/** MCPWM_TIMER0_START:R/W/SC；位位置：[2:0]；默认值：0；PWM时间r0启动和停止控制。0：如果PWM时间r0开始，则在TEZ停止；1：如果时间r0启动，则在TECP停止；2：PWM时间rO开始并运行；3：时间r0在下一个TEZ开始并停止；4：时间rO在下一TEP开始并停止。这里和下面的TEP表示计时器等于周期时发生的事件
 */
#define MCPWM_TIMER0_START    0x00000007U
#define MCPWM_TIMER0_START_M  (MCPWM_TIMER0_START_V << MCPWM_TIMER0_START_S)
#define MCPWM_TIMER0_START_V  0x00000007U
#define MCPWM_TIMER0_START_S  0
/** MCPWM_TIMER0_MOD:R/W；位位置：[4:3]；默认值：0；PWM时间r0工作模式，0：冻结，1：增加模式，2：减少模式，3：上下模式
 */
#define MCPWM_TIMER0_MOD    0x00000003U
#define MCPWM_TIMER0_MOD_M  (MCPWM_TIMER0_MOD_V << MCPWM_TIMER0_MOD_S)
#define MCPWM_TIMER0_MOD_V  0x00000003U
#define MCPWM_TIMER0_MOD_S  3

/** MCPWM_TIMER0_SYNC_REG寄存器PWM TIMER0同步功能配置寄存器。
 */
#define MCPWM_TIMER0_SYNC_REG(i) (DR_REG_MCPWM_BASE(i) + 0xc)
/** MCPWM_TIMER0_SYNCI_EN:R/W；位位置：[0]；默认值：0；设置后，启用同步输入事件时的计时器重新加载。
 */
#define MCPWM_TIMER0_SYNCI_EN    (BIT(0))
#define MCPWM_TIMER0_SYNCI_EN_M  (MCPWM_TIMER0_SYNCI_EN_V << MCPWM_TIMER0_SYNCI_EN_S)
#define MCPWM_TIMER0_SYNCI_EN_V  0x00000001U
#define MCPWM_TIMER0_SYNCI_EN_S  0
/** MCPWM_TIMER0_SYNC_SW:R/W；位位置：[1]；默认值：0；切换此位将触发软件同步。
 */
#define MCPWM_TIMER0_SYNC_SW    (BIT(1))
#define MCPWM_TIMER0_SYNC_SW_M  (MCPWM_TIMER0_SYNC_SW_V << MCPWM_TIMER0_SYNC_SW_S)
#define MCPWM_TIMER0_SYNC_SW_V  0x00000001U
#define MCPWM_TIMER0_SYNC_SW_S  1
/** MCPWM_TIMER0_SYNCO_SEL：R/W；位位置：[3:2]；默认值：0；当切换reg_timer0_sync_sw位时，将始终生成PWM时间r0 sync_out选择、0:sync_in、1:TEZ、2:TEP和sync-out
 */
#define MCPWM_TIMER0_SYNCO_SEL    0x00000003U
#define MCPWM_TIMER0_SYNCO_SEL_M  (MCPWM_TIMER0_SYNCO_SEL_V << MCPWM_TIMER0_SYNCO_SEL_S)
#define MCPWM_TIMER0_SYNCO_SEL_V  0x00000003U
#define MCPWM_TIMER0_SYNCO_SEL_S  2
/** MCPWM_TIMER0_PHASE:R/W；比特位置：[19:4]；默认值：0；同步事件时计时器重新加载阶段
 */
#define MCPWM_TIMER0_PHASE    0x0000FFFFU
#define MCPWM_TIMER0_PHASE_M  (MCPWM_TIMER0_PHASE_V << MCPWM_TIMER0_PHASE_S)
#define MCPWM_TIMER0_PHASE_V  0x0000FFFFU
#define MCPWM_TIMER0_PHASE_S  4
/** MCPWM_TIMER0_PHASE_DIRECTION:R/W；位位置：[20]；默认值：0；在timer0模式为上下模式时发生时间同步事件时，配置PWM timer0的方向：0增加，1减少
 */
#define MCPWM_TIMER0_PHASE_DIRECTION    (BIT(20))
#define MCPWM_TIMER0_PHASE_DIRECTION_M  (MCPWM_TIMER0_PHASE_DIRECTION_V << MCPWM_TIMER0_PHASE_DIRECTION_S)
#define MCPWM_TIMER0_PHASE_DIRECTION_V  0x00000001U
#define MCPWM_TIMER0_PHASE_DIRECTION_S  20

/** MCPWM_TIMER0_STATUS_REG寄存器PWM TIMER0状态寄存器。
 */
#define MCPWM_TIMER0_STATUS_REG(i) (DR_REG_MCPWM_BASE(i) + 0x10)
/** MCPWM_TIMER0_VALUE:RO；比特位置：[15:0]；默认值：0；当前PWM时间r0计数器值
 */
#define MCPWM_TIMER0_VALUE    0x0000FFFFU
#define MCPWM_TIMER0_VALUE_M  (MCPWM_TIMER0_VALUE_V << MCPWM_TIMER0_VALUE_S)
#define MCPWM_TIMER0_VALUE_V  0x0000FFFFU
#define MCPWM_TIMER0_VALUE_S  0
/** MCPWM_TIMER0_DIRECTION:RO；位位置：[16]；默认值：0；当前PWM时间r0反向，0：增量1：减量
 */
#define MCPWM_TIMER0_DIRECTION    (BIT(16))
#define MCPWM_TIMER0_DIRECTION_M  (MCPWM_TIMER0_DIRECTION_V << MCPWM_TIMER0_DIRECTION_S)
#define MCPWM_TIMER0_DIRECTION_V  0x00000001U
#define MCPWM_TIMER0_DIRECTION_S  16

/** MCPWM_TIMER1_CFG0_REG寄存器PWM TIMER1周期和更新方法配置寄存器。
 */
#define MCPWM_TIMER1_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0x14)
/** MCPWM_TIMER1_重新缩放：R/W；位位置：[7:0]；默认值：0；配置PT1_clk的除数，当PWM计时器1停止并启动agsin时生效。PT1_clk周期=PWM_clk周期（PWM_TIMER1_PRESCALE+1）
 */
#define MCPWM_TIMER1_PRESCALE    0x000000FFU
#define MCPWM_TIMER1_PRESCALE_M  (MCPWM_TIMER1_PRESCALE_V << MCPWM_TIMER1_PRESCALE_S)
#define MCPWM_TIMER1_PRESCALE_V  0x000000FFU
#define MCPWM_TIMER1_PRESCALE_S  0
/** MCPWM_TIMER1_周期：R/W；比特位置：[23:8]；默认值：255；PWM计时器1的周期阴影寄存器
 */
#define MCPWM_TIMER1_PERIOD    0x0000FFFFU
#define MCPWM_TIMER1_PERIOD_M  (MCPWM_TIMER1_PERIOD_V << MCPWM_TIMER1_PERIOD_S)
#define MCPWM_TIMER1_PERIOD_V  0x0000FFFFU
#define MCPWM_TIMER1_PERIOD_S  8
/** MCPWM_TIMER1_PERIOD_up方法：R/W；位位置：[25:24]；默认值：0；PWM计时器1周期的激活寄存器的更新方法，0：立即，1:TEZ，2:sync，3:TEZ|sync。此处和下方的TEZ表示计时器等于零事件
 */
#define MCPWM_TIMER1_PERIOD_UPMETHOD    0x00000003U
#define MCPWM_TIMER1_PERIOD_UPMETHOD_M  (MCPWM_TIMER1_PERIOD_UPMETHOD_V << MCPWM_TIMER1_PERIOD_UPMETHOD_S)
#define MCPWM_TIMER1_PERIOD_UPMETHOD_V  0x00000003U
#define MCPWM_TIMER1_PERIOD_UPMETHOD_S  24

/** MCPWM_TIMER1_CFG1_REG寄存器PWM TIMER1工作模式和启动/停止控制配置寄存器。
 */
#define MCPWM_TIMER1_CFG1_REG(i) (DR_REG_MCPWM_BASE(i) + 0x18)
/** MCPWM_TIMER1_START:R/W/SC；位位置：[2:0]；默认值：0；PWM计时器1启动和停止控制。0：如果PWM计时器1启动，则在TEZ停止；1：如果计时器1启动则在TEP停止；2：PWM计时器1开始并继续运行；3：计时器1在下一个TEZ启动并停止；4：计时器1启动并在下一TEP停止。这里和下面的TEP表示计时器等于周期时发生的事件
 */
#define MCPWM_TIMER1_START    0x00000007U
#define MCPWM_TIMER1_START_M  (MCPWM_TIMER1_START_V << MCPWM_TIMER1_START_S)
#define MCPWM_TIMER1_START_V  0x00000007U
#define MCPWM_TIMER1_START_S  0
/** MCPWM_TIMER1_MOD:R/W；位位置：[4:3]；默认值：0；PWM定时器1工作模式，0：冻结，1：增加模式，2：减少模式，3：上下模式
 */
#define MCPWM_TIMER1_MOD    0x00000003U
#define MCPWM_TIMER1_MOD_M  (MCPWM_TIMER1_MOD_V << MCPWM_TIMER1_MOD_S)
#define MCPWM_TIMER1_MOD_V  0x00000003U
#define MCPWM_TIMER1_MOD_S  3

/** MCPWM_TIMER1_SYNC_REG寄存器PWM TIMER1同步功能配置寄存器。
 */
#define MCPWM_TIMER1_SYNC_REG(i) (DR_REG_MCPWM_BASE(i) + 0x1c)
/** MCPWM_TIMER1_SYNCI_EN:R/W；位位置：[0]；默认值：0；设置后，启用同步输入事件时的计时器重新加载。
 */
#define MCPWM_TIMER1_SYNCI_EN    (BIT(0))
#define MCPWM_TIMER1_SYNCI_EN_M  (MCPWM_TIMER1_SYNCI_EN_V << MCPWM_TIMER1_SYNCI_EN_S)
#define MCPWM_TIMER1_SYNCI_EN_V  0x00000001U
#define MCPWM_TIMER1_SYNCI_EN_S  0
/** MCPWM_TIMER1_SYNC_SW:R/W；位位置：[1]；默认值：0；切换此位将触发软件同步。
 */
#define MCPWM_TIMER1_SYNC_SW    (BIT(1))
#define MCPWM_TIMER1_SYNC_SW_M  (MCPWM_TIMER1_SYNC_SW_V << MCPWM_TIMER1_SYNC_SW_S)
#define MCPWM_TIMER1_SYNC_SW_V  0x00000001U
#define MCPWM_TIMER1_SYNC_SW_S  1
/** MCPWM_TIMER1_syncosel:R/W；位位置：[3:2]；默认值：0；当切换reg_timer1_sync_sw位时，将始终生成PWM timer1 sync_out选择、0:sync_in、1:TEZ、2:TEP和sync-out
 */
#define MCPWM_TIMER1_SYNCO_SEL    0x00000003U
#define MCPWM_TIMER1_SYNCO_SEL_M  (MCPWM_TIMER1_SYNCO_SEL_V << MCPWM_TIMER1_SYNCO_SEL_S)
#define MCPWM_TIMER1_SYNCO_SEL_V  0x00000003U
#define MCPWM_TIMER1_SYNCO_SEL_S  2
/** MCPWM_TIMER1_PHASE:R/W；比特位置：[19:4]；默认值：0；同步事件时计时器重新加载阶段
 */
#define MCPWM_TIMER1_PHASE    0x0000FFFFU
#define MCPWM_TIMER1_PHASE_M  (MCPWM_TIMER1_PHASE_V << MCPWM_TIMER1_PHASE_S)
#define MCPWM_TIMER1_PHASE_V  0x0000FFFFU
#define MCPWM_TIMER1_PHASE_S  4
/** MCPWM_TIMER1_相位方向：R/W；位位置：[20]；默认值：0；在timer1模式为上下模式时发生时间同步事件时，配置PWM timer1的方向：0增加，1减少
 */
#define MCPWM_TIMER1_PHASE_DIRECTION    (BIT(20))
#define MCPWM_TIMER1_PHASE_DIRECTION_M  (MCPWM_TIMER1_PHASE_DIRECTION_V << MCPWM_TIMER1_PHASE_DIRECTION_S)
#define MCPWM_TIMER1_PHASE_DIRECTION_V  0x00000001U
#define MCPWM_TIMER1_PHASE_DIRECTION_S  20

/** MCPWM_TIMER1_STATUS_REG寄存器PWM TIMER1状态寄存器。
 */
#define MCPWM_TIMER1_STATUS_REG(i) (DR_REG_MCPWM_BASE(i) + 0x20)
/** MCPWM_TIMER1_VALUE:RO；比特位置：[15:0]；默认值：0；当前PWM计时器1计数器值
 */
#define MCPWM_TIMER1_VALUE    0x0000FFFFU
#define MCPWM_TIMER1_VALUE_M  (MCPWM_TIMER1_VALUE_V << MCPWM_TIMER1_VALUE_S)
#define MCPWM_TIMER1_VALUE_V  0x0000FFFFU
#define MCPWM_TIMER1_VALUE_S  0
/** MCPWM_TIMER1_DIRECTION:RO；位位置：[16]；默认值：0；当前PWM时间1计数器方向，0：增量1：减量
 */
#define MCPWM_TIMER1_DIRECTION    (BIT(16))
#define MCPWM_TIMER1_DIRECTION_M  (MCPWM_TIMER1_DIRECTION_V << MCPWM_TIMER1_DIRECTION_S)
#define MCPWM_TIMER1_DIRECTION_V  0x00000001U
#define MCPWM_TIMER1_DIRECTION_S  16

/** MCPWM_TIMER2_CFG0_REG寄存器PWM TIMER2周期和更新方法配置寄存器。
 */
#define MCPWM_TIMER2_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0x24)
/** MCPWM_TIMER2_重新缩放：R/W；位位置：[7:0]；默认值：0；配置PT2_clk的除数，当PWM计时器2停止并启动agsin时生效。PT2_clk周期=PWM_clk周期（PWM_TIMER2_PRESCALE+1）
 */
#define MCPWM_TIMER2_PRESCALE    0x000000FFU
#define MCPWM_TIMER2_PRESCALE_M  (MCPWM_TIMER2_PRESCALE_V << MCPWM_TIMER2_PRESCALE_S)
#define MCPWM_TIMER2_PRESCALE_V  0x000000FFU
#define MCPWM_TIMER2_PRESCALE_S  0
/** MCPWM_TIMER2_周期：R/W；比特位置：[23:8]；默认值：255；PWM时间2的周期阴影寄存器
 */
#define MCPWM_TIMER2_PERIOD    0x0000FFFFU
#define MCPWM_TIMER2_PERIOD_M  (MCPWM_TIMER2_PERIOD_V << MCPWM_TIMER2_PERIOD_S)
#define MCPWM_TIMER2_PERIOD_V  0x0000FFFFU
#define MCPWM_TIMER2_PERIOD_S  8
/** MCPWM_TIMER2_PERIOD_up方法：R/W；位位置：[25:24]；默认值：0；PWM时间2周期的激活寄存器的更新方法，0:立即，1:TEZ，2:sync，3:TEZ|sync。此处和下方的TEZ表示计时器等于零事件
 */
#define MCPWM_TIMER2_PERIOD_UPMETHOD    0x00000003U
#define MCPWM_TIMER2_PERIOD_UPMETHOD_M  (MCPWM_TIMER2_PERIOD_UPMETHOD_V << MCPWM_TIMER2_PERIOD_UPMETHOD_S)
#define MCPWM_TIMER2_PERIOD_UPMETHOD_V  0x00000003U
#define MCPWM_TIMER2_PERIOD_UPMETHOD_S  24

/** MCPWM_TIMER2_CFG1_REG寄存器PWM TIMER2工作模式和启动/停止控制配置寄存器。
 */
#define MCPWM_TIMER2_CFG1_REG(i) (DR_REG_MCPWM_BASE(i) + 0x28)
/** MCPWM_TIMER2_START:R/W/SC；位位置：[2:0]；默认值：0；PWM时间2启动和停止控制。0：如果PWM时间r2开始，则在TEZ停止；1：如果时间r2开始则在TEP停止；2：PWM时间r2启动并继续运行；3：时间r2在下一个TEZ开始并停止；4：时间r2开始并在下一TEP停止。这里和下面的TEP表示计时器等于周期时发生的事件
 */
#define MCPWM_TIMER2_START    0x00000007U
#define MCPWM_TIMER2_START_M  (MCPWM_TIMER2_START_V << MCPWM_TIMER2_START_S)
#define MCPWM_TIMER2_START_V  0x00000007U
#define MCPWM_TIMER2_START_S  0
/** MCPWM_TIMER2_mode:R/W；位位置：[4:3]；默认值：0；PWM时间2工作模式，0：冻结，1：增加模式，2：减少模式，3：上下模式
 */
#define MCPWM_TIMER2_MOD    0x00000003U
#define MCPWM_TIMER2_MOD_M  (MCPWM_TIMER2_MOD_V << MCPWM_TIMER2_MOD_S)
#define MCPWM_TIMER2_MOD_V  0x00000003U
#define MCPWM_TIMER2_MOD_S  3

/** MCPWM_TIMER2_SYNC_REG寄存器PWM TIMER2同步功能配置寄存器。
 */
#define MCPWM_TIMER2_SYNC_REG(i) (DR_REG_MCPWM_BASE(i) + 0x2c)
/** MCPWM_TIMER2_SYNCI_EN:R/W；位位置：[0]；默认值：0；设置后，启用同步输入事件时的计时器重新加载。
 */
#define MCPWM_TIMER2_SYNCI_EN    (BIT(0))
#define MCPWM_TIMER2_SYNCI_EN_M  (MCPWM_TIMER2_SYNCI_EN_V << MCPWM_TIMER2_SYNCI_EN_S)
#define MCPWM_TIMER2_SYNCI_EN_V  0x00000001U
#define MCPWM_TIMER2_SYNCI_EN_S  0
/** MCPWM_TIMER2_SYNC_SW:R/W；位位置：[1]；默认值：0；切换此位将触发软件同步。
 */
#define MCPWM_TIMER2_SYNC_SW    (BIT(1))
#define MCPWM_TIMER2_SYNC_SW_M  (MCPWM_TIMER2_SYNC_SW_V << MCPWM_TIMER2_SYNC_SW_S)
#define MCPWM_TIMER2_SYNC_SW_V  0x00000001U
#define MCPWM_TIMER2_SYNC_SW_S  1
/** MCPWM_TIMER2_syncosel:R/W；位位置：[3:2]；默认值：0；当切换reg_timer0_sync_sw位时，将始终生成PWM时间2 sync_out选择、0:sync_in、1:TEZ、2:TEP和sync-out
 */
#define MCPWM_TIMER2_SYNCO_SEL    0x00000003U
#define MCPWM_TIMER2_SYNCO_SEL_M  (MCPWM_TIMER2_SYNCO_SEL_V << MCPWM_TIMER2_SYNCO_SEL_S)
#define MCPWM_TIMER2_SYNCO_SEL_V  0x00000003U
#define MCPWM_TIMER2_SYNCO_SEL_S  2
/** MCPWM_TIMER2_PHASE:R/W；比特位置：[19:4]；默认值：0；同步事件时计时器重新加载阶段
 */
#define MCPWM_TIMER2_PHASE    0x0000FFFFU
#define MCPWM_TIMER2_PHASE_M  (MCPWM_TIMER2_PHASE_V << MCPWM_TIMER2_PHASE_S)
#define MCPWM_TIMER2_PHASE_V  0x0000FFFFU
#define MCPWM_TIMER2_PHASE_S  4
/** MCPWM_TIMER2_PHASE_DIRECTION:R/W；位位置：[20]；默认值：0；当timer2模式为上下模式时，在发生时间同步事件时配置PWM timer2的方向：0增加，1减少
 */
#define MCPWM_TIMER2_PHASE_DIRECTION    (BIT(20))
#define MCPWM_TIMER2_PHASE_DIRECTION_M  (MCPWM_TIMER2_PHASE_DIRECTION_V << MCPWM_TIMER2_PHASE_DIRECTION_S)
#define MCPWM_TIMER2_PHASE_DIRECTION_V  0x00000001U
#define MCPWM_TIMER2_PHASE_DIRECTION_S  20

/** MCPWM_TIMER2_STATUS_REG寄存器PWM TIMER2状态寄存器。
 */
#define MCPWM_TIMER2_STATUS_REG(i) (DR_REG_MCPWM_BASE(i) + 0x30)
/** MCPWM_TIMER2_VALUE:RO；比特位置：[15:0]；默认值：0；当前PWM时间2计数器值
 */
#define MCPWM_TIMER2_VALUE    0x0000FFFFU
#define MCPWM_TIMER2_VALUE_M  (MCPWM_TIMER2_VALUE_V << MCPWM_TIMER2_VALUE_S)
#define MCPWM_TIMER2_VALUE_V  0x0000FFFFU
#define MCPWM_TIMER2_VALUE_S  0
/** MCPWM_TIMER2_DIRECTION:RO；位位置：[16]；默认值：0；当前PWM时间2计数器方向，0：增量1：减量
 */
#define MCPWM_TIMER2_DIRECTION    (BIT(16))
#define MCPWM_TIMER2_DIRECTION_M  (MCPWM_TIMER2_DIRECTION_V << MCPWM_TIMER2_DIRECTION_S)
#define MCPWM_TIMER2_DIRECTION_V  0x00000001U
#define MCPWM_TIMER2_DIRECTION_S  16

/** MCPWM_TIMER_SYNCI_CFG_REG寄存器三个PWM定时器的同步输入选择。
 */
#define MCPWM_TIMER_SYNCI_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x34)
/** MCPWM_TIMER0_SYNCISEL:R/W；位位置：[2:0]；默认值：0；选择PWM时间r0的同步输入，1:PWM时间r0sync_out，2:PWM时间r1 sync_out；3:PWM时间r2 sync_out、4:GPIO矩阵的SYNC0、5:GPIO矩阵中的SYNC1、6:GPIO矩阵上的SYNC2，其他值：未选择同步输入
 */
#define MCPWM_TIMER0_SYNCISEL    0x00000007U
#define MCPWM_TIMER0_SYNCISEL_M  (MCPWM_TIMER0_SYNCISEL_V << MCPWM_TIMER0_SYNCISEL_S)
#define MCPWM_TIMER0_SYNCISEL_V  0x00000007U
#define MCPWM_TIMER0_SYNCISEL_S  0
/** MCPWM_TIMER1_SYNCISEL:R/W；比特位置：[5:3]；默认值：0；选择PWM计时器1的同步输入，1:PWM计时器0 sync_out，2:PWM计时器1 sync_out；3:PWM计时器2 sync_out、4:GPIO矩阵中的SYNC0、5:GPIO矩阵的SYNC1、6:GPIO矩阵上的SYNC2，其他值：未选择同步输入
 */
#define MCPWM_TIMER1_SYNCISEL    0x00000007U
#define MCPWM_TIMER1_SYNCISEL_M  (MCPWM_TIMER1_SYNCISEL_V << MCPWM_TIMER1_SYNCISEL_S)
#define MCPWM_TIMER1_SYNCISEL_V  0x00000007U
#define MCPWM_TIMER1_SYNCISEL_S  3
/** MCPWM_TIMER2_SYNCISEL:R/W；位位置：[8:6]；默认值：0；选择PWM时间2的同步输入，1:PWM时间0 sync_out，2:PWM时间1 sync_out、3:PWM时间2 sync_out；4:GPIO矩阵的SYNC0，5:GPIO矩阵中的SYNC1，6:GPIO矩阵上的SYNC2，其他值：未选择同步输入
 */
#define MCPWM_TIMER2_SYNCISEL    0x00000007U
#define MCPWM_TIMER2_SYNCISEL_M  (MCPWM_TIMER2_SYNCISEL_V << MCPWM_TIMER2_SYNCISEL_S)
#define MCPWM_TIMER2_SYNCISEL_V  0x00000007U
#define MCPWM_TIMER2_SYNCISEL_S  6
/** MCPWM_EXTERNAL_SYNCI0_反转：R/W；位位置：[9]；默认值：0；从GPIO矩阵反转SYNC0
 */
#define MCPWM_EXTERNAL_SYNCI0_INVERT    (BIT(9))
#define MCPWM_EXTERNAL_SYNCI0_INVERT_M  (MCPWM_EXTERNAL_SYNCI0_INVERT_V << MCPWM_EXTERNAL_SYNCI0_INVERT_S)
#define MCPWM_EXTERNAL_SYNCI0_INVERT_V  0x00000001U
#define MCPWM_EXTERNAL_SYNCI0_INVERT_S  9
/** MCPWM_EXTERNAL_synci_INVERT:R/W；位位置：[10]；默认值：0；从GPIO矩阵反转SYNC1
 */
#define MCPWM_EXTERNAL_SYNCI1_INVERT    (BIT(10))
#define MCPWM_EXTERNAL_SYNCI1_INVERT_M  (MCPWM_EXTERNAL_SYNCI1_INVERT_V << MCPWM_EXTERNAL_SYNCI1_INVERT_S)
#define MCPWM_EXTERNAL_SYNCI1_INVERT_V  0x00000001U
#define MCPWM_EXTERNAL_SYNCI1_INVERT_S  10
/** MCPWM_EXTERNAL_SYNCI2_INVERT:R/W；位位置：[11]；默认值：0；从GPIO矩阵反转SYNC2
 */
#define MCPWM_EXTERNAL_SYNCI2_INVERT    (BIT(11))
#define MCPWM_EXTERNAL_SYNCI2_INVERT_M  (MCPWM_EXTERNAL_SYNCI2_INVERT_V << MCPWM_EXTERNAL_SYNCI2_INVERT_S)
#define MCPWM_EXTERNAL_SYNCI2_INVERT_V  0x00000001U
#define MCPWM_EXTERNAL_SYNCI2_INVERT_S  11

/** MCPWM_OPERATOR_TIMERSEL_REG寄存器为PWM运算符选择特定计时器。
 */
#define MCPWM_OPERATOR_TIMERSEL_REG(i) (DR_REG_MCPWM_BASE(i) + 0x38)
/** MCPWM_OPERATOR0_TIMERSEL:R/W；位位置：[1:0]；默认值：0；选择哪个PWM计时器是PWM运算符的定时基准0，0:timer0，1:timer1，2:timer2
 */
#define MCPWM_OPERATOR0_TIMERSEL    0x00000003U
#define MCPWM_OPERATOR0_TIMERSEL_M  (MCPWM_OPERATOR0_TIMERSEL_V << MCPWM_OPERATOR0_TIMERSEL_S)
#define MCPWM_OPERATOR0_TIMERSEL_V  0x00000003U
#define MCPWM_OPERATOR0_TIMERSEL_S  0
/** MCPWM_OPERATOR1_TIMERSEL:R/W；位位置：[3:2]；默认值：0；选择哪个PWM计时器是PWM运算符的定时基准1，0:timer0，1:timer1，2:timer2
 */
#define MCPWM_OPERATOR1_TIMERSEL    0x00000003U
#define MCPWM_OPERATOR1_TIMERSEL_M  (MCPWM_OPERATOR1_TIMERSEL_V << MCPWM_OPERATOR1_TIMERSEL_S)
#define MCPWM_OPERATOR1_TIMERSEL_V  0x00000003U
#define MCPWM_OPERATOR1_TIMERSEL_S  2
/** MCPWM_OPERATOR2_TIMERSEL:R/W；比特位置：[5:4]；默认值：0；选择哪个PWM计时器是PWM运算符的定时基准2，0:timer0，1:timer1，2:timer2
 */
#define MCPWM_OPERATOR2_TIMERSEL    0x00000003U
#define MCPWM_OPERATOR2_TIMERSEL_M  (MCPWM_OPERATOR2_TIMERSEL_V << MCPWM_OPERATOR2_TIMERSEL_S)
#define MCPWM_OPERATOR2_TIMERSEL_V  0x00000003U
#define MCPWM_OPERATOR2_TIMERSEL_S  4

/** MCPWM_GEN0_STMP_CFG_REG寄存器时间戳寄存器A和B的传输状态和更新方法
 */
#define MCPWM_GEN0_STMP_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x3c)
/** MCPWM_GEN0_A_up方法：R/W；位位置：[3:0]；默认值：0；PWM发生器0时间戳A的激活寄存器的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TECP时，当比特2设置为1:sync时，当位元3设置为1时：禁用更新。
 */
#define MCPWM_GEN0_A_UPMETHOD    0x0000000FU
#define MCPWM_GEN0_A_UPMETHOD_M  (MCPWM_GEN0_A_UPMETHOD_V << MCPWM_GEN0_A_UPMETHOD_S)
#define MCPWM_GEN0_A_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN0_A_UPMETHOD_S  0
/** MCPWM_GEN0_B_up方法：R/W；位位置：[7:4]；默认值：0；PWM发生器0时间戳B激活寄存器的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TECP时，当比特2设置为1:sync时，当位元3设置为1时：禁用更新。
 */
#define MCPWM_GEN0_B_UPMETHOD    0x0000000FU
#define MCPWM_GEN0_B_UPMETHOD_M  (MCPWM_GEN0_B_UPMETHOD_V << MCPWM_GEN0_B_UPMETHOD_S)
#define MCPWM_GEN0_B_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN0_B_UPMETHOD_S  4
/** MCPWM_GEN0_A_SHDW_FULL:R/W/WTC/SC；位位置：[8]；默认值：0；通过硬件设置和重置。如果设置，PWM发生器0时间戳A的影子寄存器将被填充，并等待传输到A的活动寄存器。如果清除，A的活动注册表已用影子寄存器的最新值更新
 */
#define MCPWM_GEN0_A_SHDW_FULL    (BIT(8))
#define MCPWM_GEN0_A_SHDW_FULL_M  (MCPWM_GEN0_A_SHDW_FULL_V << MCPWM_GEN0_A_SHDW_FULL_S)
#define MCPWM_GEN0_A_SHDW_FULL_V  0x00000001U
#define MCPWM_GEN0_A_SHDW_FULL_S  8
/** MCPWM_GEN0_B_SHDW_FULL:R/W/WTC/SC；位位置：[9]；默认值：0；通过硬件设置和重置。如果设置，PWM发生器0时间戳B的影子寄存器将被填充并等待传输到B的活动寄存器。如果清除，则B的活动注册表已用影子寄存器的最新值更新
 */
#define MCPWM_GEN0_B_SHDW_FULL    (BIT(9))
#define MCPWM_GEN0_B_SHDW_FULL_M  (MCPWM_GEN0_B_SHDW_FULL_V << MCPWM_GEN0_B_SHDW_FULL_S)
#define MCPWM_GEN0_B_SHDW_FULL_V  0x00000001U
#define MCPWM_GEN0_B_SHDW_FULL_S  9

/** MCPWM_GEN0_TSTMP_A_REG寄存器PWM生成器0定时器标记A的影子寄存器。
 */
#define MCPWM_GEN0_TSTMP_A_REG(i) (DR_REG_MCPWM_BASE(i) + 0x40)
/** MCPWM_GEN0_A:R/W；比特位置：[15:0]；默认值：0；PWM发生器0时间戳A的影子寄存器
 */
#define MCPWM_GEN0_A    0x0000FFFFU
#define MCPWM_GEN0_A_M  (MCPWM_GEN0_A_V << MCPWM_GEN0_A_S)
#define MCPWM_GEN0_A_V  0x0000FFFFU
#define MCPWM_GEN0_A_S  0

/** MCPWM_GEN0_TTMP_B_REG寄存器PWM生成器0定时器标记B的影子寄存器。
 */
#define MCPWM_GEN0_TSTMP_B_REG(i) (DR_REG_MCPWM_BASE(i) + 0x44)
/** MCPWM_GEN0_B:R/W；比特位置：[15:0]；默认值：0；PWM发生器0时间戳B的影子寄存器
 */
#define MCPWM_GEN0_B    0x0000FFFFU
#define MCPWM_GEN0_B_M  (MCPWM_GEN0_B_V << MCPWM_GEN0_B_S)
#define MCPWM_GEN0_B_V  0x0000FFFFU
#define MCPWM_GEN0_B_S  0

/** MCPWM_GEN0_CFG0_REG寄存器PWM发生器0事件T0和T1处理
 */
#define MCPWM_GEN0_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0x48)
/** MCPWM_GEN0_CFG_up方法：R/W；位位置：[3:0]；默认值：0；PWM发生器0的配置激活寄存器的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TECP时，当位数2设置为1:sync时，当bit3设置为1时：禁用更新
 */
#define MCPWM_GEN0_CFG_UPMETHOD    0x0000000FU
#define MCPWM_GEN0_CFG_UPMETHOD_M  (MCPWM_GEN0_CFG_UPMETHOD_V << MCPWM_GEN0_CFG_UPMETHOD_S)
#define MCPWM_GEN0_CFG_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN0_CFG_UPMETHOD_S  0
/** MCPWM_GEN0_T0_SEL:R/W；比特位置：[6:4]；默认值：0；PWM发生器0 event_t0的源选择立即生效，0：故障事件0，1：故障事件1，2：故障事件2，3：同步事件，4：无
 */
#define MCPWM_GEN0_T0_SEL    0x00000007U
#define MCPWM_GEN0_T0_SEL_M  (MCPWM_GEN0_T0_SEL_V << MCPWM_GEN0_T0_SEL_S)
#define MCPWM_GEN0_T0_SEL_V  0x00000007U
#define MCPWM_GEN0_T0_SEL_S  4
/** MCPWM_GEN0_T1_SEL：R/W；比特位置：[9:7]；默认值：0；PWM发生器0 event_t1的源选择立即生效，0：故障事件0，1：故障事件1，2：故障事件2，3：同步事件，4：无
 */
#define MCPWM_GEN0_T1_SEL    0x00000007U
#define MCPWM_GEN0_T1_SEL_M  (MCPWM_GEN0_T1_SEL_V << MCPWM_GEN0_T1_SEL_S)
#define MCPWM_GEN0_T1_SEL_V  0x00000007U
#define MCPWM_GEN0_T1_SEL_S  7

/** MCPWM_GEN0_FORCE_REG寄存器允许通过软件强制PWM0A和PWM0B输出
 */
#define MCPWM_GEN0_FORCE_REG(i) (DR_REG_MCPWM_BASE(i) + 0x4c)
/** MCPWM_GEN0_CNTUFORCE_设备方法：R/W；比特位置：[5:0]；默认值：32；PWM发生器0的连续软件力更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TE P时，当位数2设置为1:TEA时，当3设置为1:T B时，当4设置为1:sync时，位5设置为1时：禁用更新。（这里和下面的TEA/B表示当计时器的值等于寄存器A/B的值时生成的事件。）
 */
#define MCPWM_GEN0_CNTUFORCE_UPMETHOD    0x0000003FU
#define MCPWM_GEN0_CNTUFORCE_UPMETHOD_M  (MCPWM_GEN0_CNTUFORCE_UPMETHOD_V << MCPWM_GEN0_CNTUFORCE_UPMETHOD_S)
#define MCPWM_GEN0_CNTUFORCE_UPMETHOD_V  0x0000003FU
#define MCPWM_GEN0_CNTUFORCE_UPMETHOD_S  0
/** MCPWM_GEN0_A_CNTUFORCE_MODE：R/W；位位置：[7:6]；默认值：0；PWM0A的连续软件强制模式。0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN0_A_CNTUFORCE_MODE    0x00000003U
#define MCPWM_GEN0_A_CNTUFORCE_MODE_M  (MCPWM_GEN0_A_CNTUFORCE_MODE_V << MCPWM_GEN0_A_CNTUFORCE_MODE_S)
#define MCPWM_GEN0_A_CNTUFORCE_MODE_V  0x00000003U
#define MCPWM_GEN0_A_CNTUFORCE_MODE_S  6
/** MCPWM_GEN0_B_CNTUFORCE_MODE：R/W；比特位置：[9:8]；默认值：0；PWM0B的连续软件强制模式。0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN0_B_CNTUFORCE_MODE    0x00000003U
#define MCPWM_GEN0_B_CNTUFORCE_MODE_M  (MCPWM_GEN0_B_CNTUFORCE_MODE_V << MCPWM_GEN0_B_CNTUFORCE_MODE_S)
#define MCPWM_GEN0_B_CNTUFORCE_MODE_V  0x00000003U
#define MCPWM_GEN0_B_CNTUFORCE_MODE_S  8
/** MCPWM_GEN0_A_协调力：R/W；位位置：[10]；默认值：0；触发PWM0A的非连续立即软件强制事件，触发开关将触发强制事件。
 */
#define MCPWM_GEN0_A_NCIFORCE    (BIT(10))
#define MCPWM_GEN0_A_NCIFORCE_M  (MCPWM_GEN0_A_NCIFORCE_V << MCPWM_GEN0_A_NCIFORCE_S)
#define MCPWM_GEN0_A_NCIFORCE_V  0x00000001U
#define MCPWM_GEN0_A_NCIFORCE_S  10
/** MCPWM_GEN0_A_协调模式：R/W；比特位置：[12:11]；默认值：0；PWM0A的非连续立即软件强制模式，0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN0_A_NCIFORCE_MODE    0x00000003U
#define MCPWM_GEN0_A_NCIFORCE_MODE_M  (MCPWM_GEN0_A_NCIFORCE_MODE_V << MCPWM_GEN0_A_NCIFORCE_MODE_S)
#define MCPWM_GEN0_A_NCIFORCE_MODE_V  0x00000003U
#define MCPWM_GEN0_A_NCIFORCE_MODE_S  11
/** MCPWM_GEN0_B_NCIFORCE:R/W；位位置：[13]；默认值：0；触发PWM0B的非连续立即软件强制事件，触发开关将触发强制事件。
 */
#define MCPWM_GEN0_B_NCIFORCE    (BIT(13))
#define MCPWM_GEN0_B_NCIFORCE_M  (MCPWM_GEN0_B_NCIFORCE_V << MCPWM_GEN0_B_NCIFORCE_S)
#define MCPWM_GEN0_B_NCIFORCE_V  0x00000001U
#define MCPWM_GEN0_B_NCIFORCE_S  13
/** MCPWM_GEN0_B_协调模式：R/W；比特位置：[15:14]；默认值：0；PWM0B的非连续立即软件强制模式，0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN0_B_NCIFORCE_MODE    0x00000003U
#define MCPWM_GEN0_B_NCIFORCE_MODE_M  (MCPWM_GEN0_B_NCIFORCE_MODE_V << MCPWM_GEN0_B_NCIFORCE_MODE_S)
#define MCPWM_GEN0_B_NCIFORCE_MODE_V  0x00000003U
#define MCPWM_GEN0_B_NCIFORCE_MODE_S  14

/** MCPWM_GEN0_A_REG寄存器由PWM0A上的事件触发的操作
 */
#define MCPWM_GEN0_A_REG(i) (DR_REG_MCPWM_BASE(i) + 0x50)
/** MCPWM_GEN0_A_UTEZ:R/W；位位置：[1:0]；默认值：0；计时器增加时，事件TEZ触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_UTEZ    0x00000003U
#define MCPWM_GEN0_A_UTEZ_M  (MCPWM_GEN0_A_UTEZ_V << MCPWM_GEN0_A_UTEZ_S)
#define MCPWM_GEN0_A_UTEZ_V  0x00000003U
#define MCPWM_GEN0_A_UTEZ_S  0
/** MCPWM_GEN0_A_UTEP:R/W；位位置：[3:2]；默认值：0；计时器增加时，事件TEP触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_UTEP    0x00000003U
#define MCPWM_GEN0_A_UTEP_M  (MCPWM_GEN0_A_UTEP_V << MCPWM_GEN0_A_UTEP_S)
#define MCPWM_GEN0_A_UTEP_V  0x00000003U
#define MCPWM_GEN0_A_UTEP_S  2
/** MCPWM_GEN0_A_uta:R/W；比特位置：[5:4]；默认值：0；定时器增加时，事件TEA触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_UTEA    0x00000003U
#define MCPWM_GEN0_A_UTEA_M  (MCPWM_GEN0_A_UTEA_V << MCPWM_GEN0_A_UTEA_S)
#define MCPWM_GEN0_A_UTEA_V  0x00000003U
#define MCPWM_GEN0_A_UTEA_S  4
/** MCPWM_GEN0_A_UTEB:R/W；位位置：[7:6]；默认值：0；计时器增加时，事件TEB触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_UTEB    0x00000003U
#define MCPWM_GEN0_A_UTEB_M  (MCPWM_GEN0_A_UTEB_V << MCPWM_GEN0_A_UTEB_S)
#define MCPWM_GEN0_A_UTEB_V  0x00000003U
#define MCPWM_GEN0_A_UTEB_S  6
/** MCPWM_GEN0_A_UT0:R/W；比特位置：[9:8]；默认值：0；计时器增加时，事件_t0触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_UT0    0x00000003U
#define MCPWM_GEN0_A_UT0_M  (MCPWM_GEN0_A_UT0_V << MCPWM_GEN0_A_UT0_S)
#define MCPWM_GEN0_A_UT0_V  0x00000003U
#define MCPWM_GEN0_A_UT0_S  8
/** MCPWM_GEN0_A_UT1:R/W；比特位置：[11:10]；默认值：0；计时器增加时，事件_t1触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_UT1    0x00000003U
#define MCPWM_GEN0_A_UT1_M  (MCPWM_GEN0_A_UT1_V << MCPWM_GEN0_A_UT1_S)
#define MCPWM_GEN0_A_UT1_V  0x00000003U
#define MCPWM_GEN0_A_UT1_S  10
/** MCPWM_GEN0_A_DTEZ:R/W；比特位置：[13:12]；默认值：0；计时器减少时，事件TEZ触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_DTEZ    0x00000003U
#define MCPWM_GEN0_A_DTEZ_M  (MCPWM_GEN0_A_DTEZ_V << MCPWM_GEN0_A_DTEZ_S)
#define MCPWM_GEN0_A_DTEZ_V  0x00000003U
#define MCPWM_GEN0_A_DTEZ_S  12
/** MCPWM_GEN0_A_DTEP:R/W；比特位置：[15:14]；默认值：0；计时器减少时，事件TEP触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_DTEP    0x00000003U
#define MCPWM_GEN0_A_DTEP_M  (MCPWM_GEN0_A_DTEP_V << MCPWM_GEN0_A_DTEP_S)
#define MCPWM_GEN0_A_DTEP_V  0x00000003U
#define MCPWM_GEN0_A_DTEP_S  14
/** MCPWM_GEN0_A_DTEA:R/W；比特位置：[17:16]；默认值：0；计时器减少时，事件TEA触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_DTEA    0x00000003U
#define MCPWM_GEN0_A_DTEA_M  (MCPWM_GEN0_A_DTEA_V << MCPWM_GEN0_A_DTEA_S)
#define MCPWM_GEN0_A_DTEA_V  0x00000003U
#define MCPWM_GEN0_A_DTEA_S  16
/** MCPWM_GEN0_A_DTEB:R/W；比特位置：[19:18]；默认值：0；计时器减少时，事件TEB触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_DTEB    0x00000003U
#define MCPWM_GEN0_A_DTEB_M  (MCPWM_GEN0_A_DTEB_V << MCPWM_GEN0_A_DTEB_S)
#define MCPWM_GEN0_A_DTEB_V  0x00000003U
#define MCPWM_GEN0_A_DTEB_S  18
/** MCPWM_GEN0_A_DT0:R/W；比特位置：[21:20]；默认值：0；计时器减少时，事件_t0触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_DT0    0x00000003U
#define MCPWM_GEN0_A_DT0_M  (MCPWM_GEN0_A_DT0_V << MCPWM_GEN0_A_DT0_S)
#define MCPWM_GEN0_A_DT0_V  0x00000003U
#define MCPWM_GEN0_A_DT0_S  20
/** MCPWM_GEN0_A_DT1:R/W；比特位置：[23:22]；默认值：0；计时器减少时，事件_t1触发PWM0A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_A_DT1    0x00000003U
#define MCPWM_GEN0_A_DT1_M  (MCPWM_GEN0_A_DT1_V << MCPWM_GEN0_A_DT1_S)
#define MCPWM_GEN0_A_DT1_V  0x00000003U
#define MCPWM_GEN0_A_DT1_S  22

/** MCPWM_GEN0_B_REG寄存器由PWM0B上的事件触发的操作
 */
#define MCPWM_GEN0_B_REG(i) (DR_REG_MCPWM_BASE(i) + 0x54)
/** MCPWM_GEN0_B_UTEZ:R/W；位位置：[1:0]；默认值：0；计时器增加时，事件TEZ触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_UTEZ    0x00000003U
#define MCPWM_GEN0_B_UTEZ_M  (MCPWM_GEN0_B_UTEZ_V << MCPWM_GEN0_B_UTEZ_S)
#define MCPWM_GEN0_B_UTEZ_V  0x00000003U
#define MCPWM_GEN0_B_UTEZ_S  0
/** MCPWM_GEN0_B_UTEP:R/W；位位置：[3:2]；默认值：0；计时器增加时，事件TEP触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_UTEP    0x00000003U
#define MCPWM_GEN0_B_UTEP_M  (MCPWM_GEN0_B_UTEP_V << MCPWM_GEN0_B_UTEP_S)
#define MCPWM_GEN0_B_UTEP_V  0x00000003U
#define MCPWM_GEN0_B_UTEP_S  2
/** MCPWM_GEN0_B_uta:R/W；比特位置：[5:4]；默认值：0；定时器增加时，事件TEA触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_UTEA    0x00000003U
#define MCPWM_GEN0_B_UTEA_M  (MCPWM_GEN0_B_UTEA_V << MCPWM_GEN0_B_UTEA_S)
#define MCPWM_GEN0_B_UTEA_V  0x00000003U
#define MCPWM_GEN0_B_UTEA_S  4
/** MCPWM_GEN0_B_utb:R/W；位位置：[7:6]；默认值：0；计时器增加时，事件TEB触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_UTEB    0x00000003U
#define MCPWM_GEN0_B_UTEB_M  (MCPWM_GEN0_B_UTEB_V << MCPWM_GEN0_B_UTEB_S)
#define MCPWM_GEN0_B_UTEB_V  0x00000003U
#define MCPWM_GEN0_B_UTEB_S  6
/** MCPWM_GEN0_B_UT0:R/W；比特位置：[9:8]；默认值：0；计时器增加时，事件_t0触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_UT0    0x00000003U
#define MCPWM_GEN0_B_UT0_M  (MCPWM_GEN0_B_UT0_V << MCPWM_GEN0_B_UT0_S)
#define MCPWM_GEN0_B_UT0_V  0x00000003U
#define MCPWM_GEN0_B_UT0_S  8
/** MCPWM_GEN0_B_UT1:R/W；比特位置：[11:10]；默认值：0；计时器增加时，事件_t1触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_UT1    0x00000003U
#define MCPWM_GEN0_B_UT1_M  (MCPWM_GEN0_B_UT1_V << MCPWM_GEN0_B_UT1_S)
#define MCPWM_GEN0_B_UT1_V  0x00000003U
#define MCPWM_GEN0_B_UT1_S  10
/** MCPWM_GEN0_B_DTEZ:R/W；比特位置：[13:12]；默认值：0；计时器减少时，事件TEZ触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_DTEZ    0x00000003U
#define MCPWM_GEN0_B_DTEZ_M  (MCPWM_GEN0_B_DTEZ_V << MCPWM_GEN0_B_DTEZ_S)
#define MCPWM_GEN0_B_DTEZ_V  0x00000003U
#define MCPWM_GEN0_B_DTEZ_S  12
/** MCPWM_GEN0_B_DTEP:R/W；比特位置：[15:14]；默认值：0；计时器减少时，事件TEP触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_DTEP    0x00000003U
#define MCPWM_GEN0_B_DTEP_M  (MCPWM_GEN0_B_DTEP_V << MCPWM_GEN0_B_DTEP_S)
#define MCPWM_GEN0_B_DTEP_V  0x00000003U
#define MCPWM_GEN0_B_DTEP_S  14
/** MCPWM_GEN0_B_DTEA:R/W；比特位置：[17:16]；默认值：0；计时器减少时，事件TEA触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_DTEA    0x00000003U
#define MCPWM_GEN0_B_DTEA_M  (MCPWM_GEN0_B_DTEA_V << MCPWM_GEN0_B_DTEA_S)
#define MCPWM_GEN0_B_DTEA_V  0x00000003U
#define MCPWM_GEN0_B_DTEA_S  16
/** MCPWM_GEN0_B_DTEB:R/W；比特位置：[19:18]；默认值：0；计时器减少时，事件TEB触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_DTEB    0x00000003U
#define MCPWM_GEN0_B_DTEB_M  (MCPWM_GEN0_B_DTEB_V << MCPWM_GEN0_B_DTEB_S)
#define MCPWM_GEN0_B_DTEB_V  0x00000003U
#define MCPWM_GEN0_B_DTEB_S  18
/** MCPWM_GEN0_B_DT0:R/W；比特位置：[21:20]；默认值：0；计时器减少时，事件_t0触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_DT0    0x00000003U
#define MCPWM_GEN0_B_DT0_M  (MCPWM_GEN0_B_DT0_V << MCPWM_GEN0_B_DT0_S)
#define MCPWM_GEN0_B_DT0_V  0x00000003U
#define MCPWM_GEN0_B_DT0_S  20
/** MCPWM_GEN0_B_DT1:R/W；比特位置：[23:22]；默认值：0；计时器减少时，事件_t1触发PWM0B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN0_B_DT1    0x00000003U
#define MCPWM_GEN0_B_DT1_M  (MCPWM_GEN0_B_DT1_V << MCPWM_GEN0_B_DT1_S)
#define MCPWM_GEN0_B_DT1_V  0x00000003U
#define MCPWM_GEN0_B_DT1_S  22

/** MCPWM_DT0_CFG_REG寄存器PWM发生器0停滞时间类型选择和配置
 */
#define MCPWM_DT0_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x58)
/** MCPWM_DT0_FED_upmeth:R/W；位位置：[3:0]；默认值：0；FED（上升沿延迟）激活寄存器的更新方法。0：立即，当bit0设置为1:tez，当bit1设置为1:step，当bit2设置为1:sync，当bit 3设置为1时：禁用更新
 */
#define MCPWM_DT0_FED_UPMETHOD    0x0000000FU
#define MCPWM_DT0_FED_UPMETHOD_M  (MCPWM_DT0_FED_UPMETHOD_V << MCPWM_DT0_FED_UPMETHOD_S)
#define MCPWM_DT0_FED_UPMETHOD_V  0x0000000FU
#define MCPWM_DT0_FED_UPMETHOD_S  0
/** MCPWM_DT0_RED_设备方法：R/W；位位置：[7:4]；默认值：0；RED（上升沿延迟）活动寄存器的更新方法。0：立即，当bit0设置为1:tez，当bit1设置为1:step，当bit2设置为1:sync，当bit 3设置为1时：禁用更新
 */
#define MCPWM_DT0_RED_UPMETHOD    0x0000000FU
#define MCPWM_DT0_RED_UPMETHOD_M  (MCPWM_DT0_RED_UPMETHOD_V << MCPWM_DT0_RED_UPMETHOD_S)
#define MCPWM_DT0_RED_UPMETHOD_V  0x0000000FU
#define MCPWM_DT0_RED_UPMETHOD_S  4
/** MCPWM_DT0_DEB_MODE：R/W；位位置：[8]；默认值：0；表中S8，双边缘B模式，0：馈电/红色分别在不同路径上生效，1：馈电/蓝色在B路径上生效；A输出处于旁路或dulpB模式
 */
#define MCPWM_DT0_DEB_MODE    (BIT(8))
#define MCPWM_DT0_DEB_MODE_M  (MCPWM_DT0_DEB_MODE_V << MCPWM_DT0_DEB_MODE_S)
#define MCPWM_DT0_DEB_MODE_V  0x00000001U
#define MCPWM_DT0_DEB_MODE_S  8
/** MCPWM_DT0_A_OUTSWAP:R/W；位位置：[9]；默认值：0；表中的S6
 */
#define MCPWM_DT0_A_OUTSWAP    (BIT(9))
#define MCPWM_DT0_A_OUTSWAP_M  (MCPWM_DT0_A_OUTSWAP_V << MCPWM_DT0_A_OUTSWAP_S)
#define MCPWM_DT0_A_OUTSWAP_V  0x00000001U
#define MCPWM_DT0_A_OUTSWAP_S  9
/** MCPWM_DT0_B_OUTSWAP:R/W；位位置：[10]；默认值：0；表中S7
 */
#define MCPWM_DT0_B_OUTSWAP    (BIT(10))
#define MCPWM_DT0_B_OUTSWAP_M  (MCPWM_DT0_B_OUTSWAP_V << MCPWM_DT0_B_OUTSWAP_S)
#define MCPWM_DT0_B_OUTSWAP_V  0x00000001U
#define MCPWM_DT0_B_OUTSWAP_S  10
/** MCPWM_DT0_RED_INSEL:R/W；位位置：[11]；默认值：0；表中的S4
 */
#define MCPWM_DT0_RED_INSEL    (BIT(11))
#define MCPWM_DT0_RED_INSEL_M  (MCPWM_DT0_RED_INSEL_V << MCPWM_DT0_RED_INSEL_S)
#define MCPWM_DT0_RED_INSEL_V  0x00000001U
#define MCPWM_DT0_RED_INSEL_S  11
/** MCPWM_DT0_FED_INSEL：R/W；位位置：[12]；默认值：0；表中S5
 */
#define MCPWM_DT0_FED_INSEL    (BIT(12))
#define MCPWM_DT0_FED_INSEL_M  (MCPWM_DT0_FED_INSEL_V << MCPWM_DT0_FED_INSEL_S)
#define MCPWM_DT0_FED_INSEL_V  0x00000001U
#define MCPWM_DT0_FED_INSEL_S  12
/** MCPWM_DT0_RED_outidvert:R/W；位位置：[13]；默认值：0；表中的S2
 */
#define MCPWM_DT0_RED_OUTINVERT    (BIT(13))
#define MCPWM_DT0_RED_OUTINVERT_M  (MCPWM_DT0_RED_OUTINVERT_V << MCPWM_DT0_RED_OUTINVERT_S)
#define MCPWM_DT0_RED_OUTINVERT_V  0x00000001U
#define MCPWM_DT0_RED_OUTINVERT_S  13
/** MCPWM_DT0_FED_OUTINVERT:R/W；位位置：[14]；默认值：0；表中的S3
 */
#define MCPWM_DT0_FED_OUTINVERT    (BIT(14))
#define MCPWM_DT0_FED_OUTINVERT_M  (MCPWM_DT0_FED_OUTINVERT_V << MCPWM_DT0_FED_OUTINVERT_S)
#define MCPWM_DT0_FED_OUTINVERT_V  0x00000001U
#define MCPWM_DT0_FED_OUTINVERT_S  14
/** MCPWM_DT0_A_outypass:R/W；位位置：[15]；默认值：1；表中的S1
 */
#define MCPWM_DT0_A_OUTBYPASS    (BIT(15))
#define MCPWM_DT0_A_OUTBYPASS_M  (MCPWM_DT0_A_OUTBYPASS_V << MCPWM_DT0_A_OUTBYPASS_S)
#define MCPWM_DT0_A_OUTBYPASS_V  0x00000001U
#define MCPWM_DT0_A_OUTBYPASS_S  15
/** MCPWM_DT0_B_outypass:R/W；位位置：[16]；默认值：1；表中S0
 */
#define MCPWM_DT0_B_OUTBYPASS    (BIT(16))
#define MCPWM_DT0_B_OUTBYPASS_M  (MCPWM_DT0_B_OUTBYPASS_V << MCPWM_DT0_B_OUTBYPASS_S)
#define MCPWM_DT0_B_OUTBYPASS_V  0x00000001U
#define MCPWM_DT0_B_OUTBYPASS_S  16
/** MCPWM_DT0_CLK_SEL:R/W；位位置：[17]；默认值：0；死区时间时钟选择。0:PWM_clk，1:PT_clk
 */
#define MCPWM_DT0_CLK_SEL    (BIT(17))
#define MCPWM_DT0_CLK_SEL_M  (MCPWM_DT0_CLK_SEL_V << MCPWM_DT0_CLK_SEL_S)
#define MCPWM_DT0_CLK_SEL_V  0x00000001U
#define MCPWM_DT0_CLK_SEL_S  17

/** MCPWM_DT0_FED_CFG_REG寄存器PWM发生器0下降沿延迟阴影寄存器（FED）。
 */
#define MCPWM_DT0_FED_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x5c)
/** MCPWM_DT0_feed:R/W；比特位置：[15:0]；默认值：0；FED的影子寄存器
 */
#define MCPWM_DT0_FED    0x0000FFFFU
#define MCPWM_DT0_FED_M  (MCPWM_DT0_FED_V << MCPWM_DT0_FED_S)
#define MCPWM_DT0_FED_V  0x0000FFFFU
#define MCPWM_DT0_FED_S  0

/** MCPWM_DT0_RED_CFG_REG寄存器PWM发生器0上升沿延迟阴影寄存器（RED）。
 */
#define MCPWM_DT0_RED_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x60)
/** MCPWM_DT0_RED:R/W；比特位置：[15:0]；默认值：0；RED的影子寄存器
 */
#define MCPWM_DT0_RED    0x0000FFFFU
#define MCPWM_DT0_RED_M  (MCPWM_DT0_RED_V << MCPWM_DT0_RED_S)
#define MCPWM_DT0_RED_V  0x0000FFFFU
#define MCPWM_DT0_RED_S  0

/** MCPWM_CARRIR0_CFG_REG寄存器PWM发生器0载波启用和配置
 */
#define MCPWM_CARRIER0_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x64)
/** MCPWM_CARRIER0_EN:R/W；位位置：[0]；默认值：0；设置后，载波0功能启用。清除后，绕过载波0
 */
#define MCPWM_CARRIER0_EN    (BIT(0))
#define MCPWM_CARRIER0_EN_M  (MCPWM_CARRIER0_EN_V << MCPWM_CARRIER0_EN_S)
#define MCPWM_CARRIER0_EN_V  0x00000001U
#define MCPWM_CARRIER0_EN_S  0
/** MCPWM_CARRIER0_PRESCALE：R/W；比特位置：[4:1]；默认值：0；PWM载波0时钟（PC_clk）预缩放值。PC_clk的周期=PWM_clk的周期（PWM_CARRIR0_PRESCALE+1）
 */
#define MCPWM_CARRIER0_PRESCALE    0x0000000FU
#define MCPWM_CARRIER0_PRESCALE_M  (MCPWM_CARRIER0_PRESCALE_V << MCPWM_CARRIER0_PRESCALE_S)
#define MCPWM_CARRIER0_PRESCALE_V  0x0000000FU
#define MCPWM_CARRIER0_PRESCALE_S  1
/** MCPWM_CARRIER0_负载：R/W；位位置：[7:5]；默认值：0；承运人职责选择。负载=PWM_CARRIR0_Duty/8
 */
#define MCPWM_CARRIER0_DUTY    0x00000007U
#define MCPWM_CARRIER0_DUTY_M  (MCPWM_CARRIER0_DUTY_V << MCPWM_CARRIER0_DUTY_S)
#define MCPWM_CARRIER0_DUTY_V  0x00000007U
#define MCPWM_CARRIER0_DUTY_S  5
/** MCPWM_CARRIER0_OSHTWTH:R/W；位位置：[11:8]；默认值：0；载波周期数中第一脉冲的宽度
 */
#define MCPWM_CARRIER0_OSHTWTH    0x0000000FU
#define MCPWM_CARRIER0_OSHTWTH_M  (MCPWM_CARRIER0_OSHTWTH_V << MCPWM_CARRIER0_OSHTWTH_S)
#define MCPWM_CARRIER0_OSHTWTH_V  0x0000000FU
#define MCPWM_CARRIER0_OSHTWTH_S  8
/** MCPWM_CARRIER0_OUT_INVERT:R/W；位位置：[12]；默认值：0；设置后，反转该子模块的PWM0A和PWM0B的输出
 */
#define MCPWM_CARRIER0_OUT_INVERT    (BIT(12))
#define MCPWM_CARRIER0_OUT_INVERT_M  (MCPWM_CARRIER0_OUT_INVERT_V << MCPWM_CARRIER0_OUT_INVERT_S)
#define MCPWM_CARRIER0_OUT_INVERT_V  0x00000001U
#define MCPWM_CARRIER0_OUT_INVERT_S  12
/** MCPWM_CARRIER0_IN_INVERT:R/W；位位置：[13]；默认值：0；设置后，将该子模块的PWM0A和PWM0B的输入反相
 */
#define MCPWM_CARRIER0_IN_INVERT    (BIT(13))
#define MCPWM_CARRIER0_IN_INVERT_M  (MCPWM_CARRIER0_IN_INVERT_V << MCPWM_CARRIER0_IN_INVERT_S)
#define MCPWM_CARRIER0_IN_INVERT_V  0x00000001U
#define MCPWM_CARRIER0_IN_INVERT_S  13

/** MCPWM_FH0_CFG0_REG寄存器PWM0A和PWM0B跳闸事件的动作
 */
#define MCPWM_FH0_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0x68)
/** MCPWM_FH0_SW_CBC:R/W；位位置：[0]；默认值：0；启用软件强制循环模式动作的寄存器。0：禁用，1：启用
 */
#define MCPWM_FH0_SW_CBC    (BIT(0))
#define MCPWM_FH0_SW_CBC_M  (MCPWM_FH0_SW_CBC_V << MCPWM_FH0_SW_CBC_S)
#define MCPWM_FH0_SW_CBC_V  0x00000001U
#define MCPWM_FH0_SW_CBC_S  0
/** MCPWM_FH0_F2_CBC:R/W；位位置：[1]；默认值：0；fault_event2将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH0_F2_CBC    (BIT(1))
#define MCPWM_FH0_F2_CBC_M  (MCPWM_FH0_F2_CBC_V << MCPWM_FH0_F2_CBC_S)
#define MCPWM_FH0_F2_CBC_V  0x00000001U
#define MCPWM_FH0_F2_CBC_S  1
/** MCPWM_FH0_F1_CBC：R/W；位位置：[2]；默认值：0；fault_event1将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH0_F1_CBC    (BIT(2))
#define MCPWM_FH0_F1_CBC_M  (MCPWM_FH0_F1_CBC_V << MCPWM_FH0_F1_CBC_S)
#define MCPWM_FH0_F1_CBC_V  0x00000001U
#define MCPWM_FH0_F1_CBC_S  2
/** MCPWM_FH0_F0_CBC:R/W；位位置：[3]；默认值：0；fault_event0将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH0_F0_CBC    (BIT(3))
#define MCPWM_FH0_F0_CBC_M  (MCPWM_FH0_F0_CBC_V << MCPWM_FH0_F0_CBC_S)
#define MCPWM_FH0_F0_CBC_V  0x00000001U
#define MCPWM_FH0_F0_CBC_S  3
/** MCPWM_FH0_SW_OST:R/W；位位置：[4]；默认值：0；启用软件强制单触发模式动作的寄存器。0：禁用，1：启用
 */
#define MCPWM_FH0_SW_OST    (BIT(4))
#define MCPWM_FH0_SW_OST_M  (MCPWM_FH0_SW_OST_V << MCPWM_FH0_SW_OST_S)
#define MCPWM_FH0_SW_OST_V  0x00000001U
#define MCPWM_FH0_SW_OST_S  4
/** MCPWM_FH0_F2_OST:R/W；位位置：[5]；默认值：0；fault_event2将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH0_F2_OST    (BIT(5))
#define MCPWM_FH0_F2_OST_M  (MCPWM_FH0_F2_OST_V << MCPWM_FH0_F2_OST_S)
#define MCPWM_FH0_F2_OST_V  0x00000001U
#define MCPWM_FH0_F2_OST_S  5
/** MCPWM_FH0_F1_OST:R/W；位位置：[6]；默认值：0；fault_event1将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH0_F1_OST    (BIT(6))
#define MCPWM_FH0_F1_OST_M  (MCPWM_FH0_F1_OST_V << MCPWM_FH0_F1_OST_S)
#define MCPWM_FH0_F1_OST_V  0x00000001U
#define MCPWM_FH0_F1_OST_S  6
/** MCPWM_FH0_F0_OST:R/W；位位置：[7]；默认值：0；fault_event0将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH0_F0_OST    (BIT(7))
#define MCPWM_FH0_F0_OST_M  (MCPWM_FH0_F0_OST_V << MCPWM_FH0_F0_OST_S)
#define MCPWM_FH0_F0_OST_V  0x00000001U
#define MCPWM_FH0_F0_OST_S  7
/** MCPWM_FH0_A_CBC_D:R/W；比特位置：[9:8]；默认值：0；当故障事件发生且计时器正在减少时，PWM0A上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH0_A_CBC_D    0x00000003U
#define MCPWM_FH0_A_CBC_D_M  (MCPWM_FH0_A_CBC_D_V << MCPWM_FH0_A_CBC_D_S)
#define MCPWM_FH0_A_CBC_D_V  0x00000003U
#define MCPWM_FH0_A_CBC_D_S  8
/** MCPWM_FH0_A_CBC_U:R/W；比特位置：[11:10]；默认值：0；当故障事件发生且计时器增加时，PWM0A上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH0_A_CBC_U    0x00000003U
#define MCPWM_FH0_A_CBC_U_M  (MCPWM_FH0_A_CBC_U_V << MCPWM_FH0_A_CBC_U_S)
#define MCPWM_FH0_A_CBC_U_V  0x00000003U
#define MCPWM_FH0_A_CBC_U_S  10
/** MCPWM_FH0_A_OST_D:R/W；比特位置：[13:12]；默认值：0；当发生故障事件且计时器正在减少时，PWM0A上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH0_A_OST_D    0x00000003U
#define MCPWM_FH0_A_OST_D_M  (MCPWM_FH0_A_OST_D_V << MCPWM_FH0_A_OST_D_S)
#define MCPWM_FH0_A_OST_D_V  0x00000003U
#define MCPWM_FH0_A_OST_D_S  12
/** MCPWM_FH0_A_OST_U:R/W；比特位置：[15:14]；默认值：0；当故障事件发生且计时器增加时，PWM0A上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH0_A_OST_U    0x00000003U
#define MCPWM_FH0_A_OST_U_M  (MCPWM_FH0_A_OST_U_V << MCPWM_FH0_A_OST_U_S)
#define MCPWM_FH0_A_OST_U_V  0x00000003U
#define MCPWM_FH0_A_OST_U_S  14
/** MCPWM_FH0_bcbc_D:R/W；比特位置：[17:16]；默认值：0；当故障事件发生且计时器正在减少时，PWM0B上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH0_B_CBC_D    0x00000003U
#define MCPWM_FH0_B_CBC_D_M  (MCPWM_FH0_B_CBC_D_V << MCPWM_FH0_B_CBC_D_S)
#define MCPWM_FH0_B_CBC_D_V  0x00000003U
#define MCPWM_FH0_B_CBC_D_S  16
/** MCPWM_FH0_B_CBC_U:R/W；比特位置：[19:18]；默认值：0；当故障事件发生且计时器增加时，PWM0B上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH0_B_CBC_U    0x00000003U
#define MCPWM_FH0_B_CBC_U_M  (MCPWM_FH0_B_CBC_U_V << MCPWM_FH0_B_CBC_U_S)
#define MCPWM_FH0_B_CBC_U_V  0x00000003U
#define MCPWM_FH0_B_CBC_U_S  18
/** MCPWM_FH0_B_OST_D:R/W；比特位置：[21:20]；默认值：0；当发生故障事件且计时器正在减少时，PWM0B上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH0_B_OST_D    0x00000003U
#define MCPWM_FH0_B_OST_D_M  (MCPWM_FH0_B_OST_D_V << MCPWM_FH0_B_OST_D_S)
#define MCPWM_FH0_B_OST_D_V  0x00000003U
#define MCPWM_FH0_B_OST_D_S  20
/** MCPWM_FH0_B_OST_U:R/W；比特位置：[23:22]；默认值：0；当故障事件发生且计时器增加时，PWM0B上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH0_B_OST_U    0x00000003U
#define MCPWM_FH0_B_OST_U_M  (MCPWM_FH0_B_OST_U_V << MCPWM_FH0_B_OST_U_S)
#define MCPWM_FH0_B_OST_U_V  0x00000003U
#define MCPWM_FH0_B_OST_U_S  22

/** MCPWM_FH0_CFG1_REG寄存器故障处理程序操作的软件触发器
 */
#define MCPWM_FH0_CFG1_REG(i) (DR_REG_MCPWM_BASE(i) + 0x6c)
/** MCPWM_FH0_CLR_OST:R/W；位位置：[0]；默认值：0；在进行一次射击模式动作时，上升沿将消失
 */
#define MCPWM_FH0_CLR_OST    (BIT(0))
#define MCPWM_FH0_CLR_OST_M  (MCPWM_FH0_CLR_OST_V << MCPWM_FH0_CLR_OST_S)
#define MCPWM_FH0_CLR_OST_V  0x00000001U
#define MCPWM_FH0_CLR_OST_S  0
/** MCPWM_FH0_CBCPULSE:R/W；位位置：[2:1]；默认值：0；逐周期模式动作刷新时刻选择。当bit0设置为1:TEZ时，当bit1设置为1:TECP时，当bit0和bit1都设置为0时：停止刷新，当bit0和bit2都设置为1时：在TEP/TEZ刷新
 */
#define MCPWM_FH0_CBCPULSE    0x00000003U
#define MCPWM_FH0_CBCPULSE_M  (MCPWM_FH0_CBCPULSE_V << MCPWM_FH0_CBCPULSE_S)
#define MCPWM_FH0_CBCPULSE_V  0x00000003U
#define MCPWM_FH0_CBCPULSE_S  1
/** MCPWM_FH0_FORCE_CBC:R/W；位位置：[3]；默认值：0；触发一个循环一个循环的模式动作
 */
#define MCPWM_FH0_FORCE_CBC    (BIT(3))
#define MCPWM_FH0_FORCE_CBC_M  (MCPWM_FH0_FORCE_CBC_V << MCPWM_FH0_FORCE_CBC_S)
#define MCPWM_FH0_FORCE_CBC_V  0x00000001U
#define MCPWM_FH0_FORCE_CBC_S  3
/** MCPWM_FH0_FORCE_OST:R/W；位位置：[4]；默认值：0；切换（软件否定其值）触发单次模式动作
 */
#define MCPWM_FH0_FORCE_OST    (BIT(4))
#define MCPWM_FH0_FORCE_OST_M  (MCPWM_FH0_FORCE_OST_V << MCPWM_FH0_FORCE_OST_S)
#define MCPWM_FH0_FORCE_OST_V  0x00000001U
#define MCPWM_FH0_FORCE_OST_S  4

/** MCPWM_FH0_STATUS_REG寄存器故障事件状态。
 */
#define MCPWM_FH0_STATUS_REG(i) (DR_REG_MCPWM_BASE(i) + 0x70)
/** MCPWM_FH0_CBC-ON:RO；位位置：[0]；默认值：0；通过硬件设置和重置。如果设置，则循环模式操作正在进行
 */
#define MCPWM_FH0_CBC_ON    (BIT(0))
#define MCPWM_FH0_CBC_ON_M  (MCPWM_FH0_CBC_ON_V << MCPWM_FH0_CBC_ON_S)
#define MCPWM_FH0_CBC_ON_V  0x00000001U
#define MCPWM_FH0_CBC_ON_S  0
/** MCPWM_FH0_OST_ON:RO；位位置：[1]；默认值：0；通过硬件设置和重置。如果设置，则一次拍摄模式动作正在进行
 */
#define MCPWM_FH0_OST_ON    (BIT(1))
#define MCPWM_FH0_OST_ON_M  (MCPWM_FH0_OST_ON_V << MCPWM_FH0_OST_ON_S)
#define MCPWM_FH0_OST_ON_V  0x00000001U
#define MCPWM_FH0_OST_ON_S  1

/** MCPWM_GEN1_STMP_CFG_REG寄存器时间戳寄存器A和B的传输状态和更新方法
 */
#define MCPWM_GEN1_STMP_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x74)
/** MCPWM_GEN1_A_pmethod:R/W；位位置：[3:0]；默认值：0；PWM发生器1时间戳A的激活寄存器的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TECP时，当比特2设置为1:sync时，当位元3设置为1时：禁用更新。
 */
#define MCPWM_GEN1_A_UPMETHOD    0x0000000FU
#define MCPWM_GEN1_A_UPMETHOD_M  (MCPWM_GEN1_A_UPMETHOD_V << MCPWM_GEN1_A_UPMETHOD_S)
#define MCPWM_GEN1_A_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN1_A_UPMETHOD_S  0
/** MCPWM_GEN1_B_UPMETHOD:R/W；位位置：[7:4]；默认值：0；PWM发生器1时间戳B激活寄存器的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TECP时，当比特2设置为1:sync时，当位元3设置为1时：禁用更新。
 */
#define MCPWM_GEN1_B_UPMETHOD    0x0000000FU
#define MCPWM_GEN1_B_UPMETHOD_M  (MCPWM_GEN1_B_UPMETHOD_V << MCPWM_GEN1_B_UPMETHOD_S)
#define MCPWM_GEN1_B_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN1_B_UPMETHOD_S  4
/** MCPWM_GEN1_A_SHDW_FULL:R/W/WTC/SC；位位置：[8]；默认值：0；通过硬件设置和重置。如果设置，PWM发生器1的时间戳A的影子寄存器将被填充，并等待传输到A的活动寄存器。如果清除，A的活动注册表已用影子寄存器的最新值更新
 */
#define MCPWM_GEN1_A_SHDW_FULL    (BIT(8))
#define MCPWM_GEN1_A_SHDW_FULL_M  (MCPWM_GEN1_A_SHDW_FULL_V << MCPWM_GEN1_A_SHDW_FULL_S)
#define MCPWM_GEN1_A_SHDW_FULL_V  0x00000001U
#define MCPWM_GEN1_A_SHDW_FULL_S  8
/** MCPWM_GEN1_B_SHDW_FULL:R/W/WTC/SC；位位置：[9]；默认值：0；通过硬件设置和重置。如果设置，PWM发生器1时间戳B的影子寄存器将被填充，并等待转移到B的活动寄存器。如果清除，则B的活动注册表已用影子寄存器的最新值更新
 */
#define MCPWM_GEN1_B_SHDW_FULL    (BIT(9))
#define MCPWM_GEN1_B_SHDW_FULL_M  (MCPWM_GEN1_B_SHDW_FULL_V << MCPWM_GEN1_B_SHDW_FULL_S)
#define MCPWM_GEN1_B_SHDW_FULL_V  0x00000001U
#define MCPWM_GEN1_B_SHDW_FULL_S  9

/** MCPWM_GEN1_TSTMP_A_REG寄存器PWM生成器1用于定时器标记A的影子寄存器。
 */
#define MCPWM_GEN1_TSTMP_A_REG(i) (DR_REG_MCPWM_BASE(i) + 0x78)
/** MCPWM_GEN1_A:R/W；比特位置：[15:0]；默认值：0；PWM发生器1时间戳A的影子寄存器
 */
#define MCPWM_GEN1_A    0x0000FFFFU
#define MCPWM_GEN1_A_M  (MCPWM_GEN1_A_V << MCPWM_GEN1_A_S)
#define MCPWM_GEN1_A_V  0x0000FFFFU
#define MCPWM_GEN1_A_S  0

/** MCPWM_GEN1_TSTMP_B_REG寄存器PWM生成器1定时器标记B的影子寄存器。
 */
#define MCPWM_GEN1_TSTMP_B_REG(i) (DR_REG_MCPWM_BASE(i) + 0x7c)
/** MCPWM_GEN1_B:R/W；比特位置：[15:0]；默认值：0；PWM发生器1时间戳B的影子寄存器
 */
#define MCPWM_GEN1_B    0x0000FFFFU
#define MCPWM_GEN1_B_M  (MCPWM_GEN1_B_V << MCPWM_GEN1_B_S)
#define MCPWM_GEN1_B_V  0x0000FFFFU
#define MCPWM_GEN1_B_S  0

/** MCPWM_GEN1_CFG0_REG寄存器PWM发生器1事件T0和T1处理
 */
#define MCPWM_GEN1_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0x80)
/** MCPWM_GEN1_CFG_up方法：R/W；位位置：[3:0]；默认值：0；PWM发电机1的激活配置寄存器的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:sync时；当bit3设置为1时：禁用更新。
 */
#define MCPWM_GEN1_CFG_UPMETHOD    0x0000000FU
#define MCPWM_GEN1_CFG_UPMETHOD_M  (MCPWM_GEN1_CFG_UPMETHOD_V << MCPWM_GEN1_CFG_UPMETHOD_S)
#define MCPWM_GEN1_CFG_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN1_CFG_UPMETHOD_S  0
/** MCPWM_GEN1_T0_SEL:R/W；比特位置：[6:4]；默认值：0；PWM发电机1事件_t0的源选择立即生效，0：故障事件0，1：故障事件1，2：故障事件2，3：同步事件，4：无
 */
#define MCPWM_GEN1_T0_SEL    0x00000007U
#define MCPWM_GEN1_T0_SEL_M  (MCPWM_GEN1_T0_SEL_V << MCPWM_GEN1_T0_SEL_S)
#define MCPWM_GEN1_T0_SEL_V  0x00000007U
#define MCPWM_GEN1_T0_SEL_S  4
/** MCPWM_GEN1_T1_SEL:R/W；比特位置：[9:7]；默认值：0；PWM发电机1事件t1的源选择立即生效，0：故障事件0，1：故障事件1，2：故障事件2，3：同步事件，4：无
 */
#define MCPWM_GEN1_T1_SEL    0x00000007U
#define MCPWM_GEN1_T1_SEL_M  (MCPWM_GEN1_T1_SEL_V << MCPWM_GEN1_T1_SEL_S)
#define MCPWM_GEN1_T1_SEL_V  0x00000007U
#define MCPWM_GEN1_T1_SEL_S  7

/** MCPWM_GEN1_FORCE_REG寄存器允许通过软件强制PWM1A和PWM1B输出
 */
#define MCPWM_GEN1_FORCE_REG(i) (DR_REG_MCPWM_BASE(i) + 0x84)
/** MCPWM_GEN1_CNTUFORCE_upmeth:R/W；比特位置：[5:0]；默认值：32；PWM发生器1连续软件力的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TE P时，当位数2设置为1:TEA时，当3设置为1:TEB时，当4设置为1:sync时，位5设置为1:disable update时。（这里和下面的TEA/B表示当计时器的值等于寄存器A/B的值时生成的事件。）
 */
#define MCPWM_GEN1_CNTUFORCE_UPMETHOD    0x0000003FU
#define MCPWM_GEN1_CNTUFORCE_UPMETHOD_M  (MCPWM_GEN1_CNTUFORCE_UPMETHOD_V << MCPWM_GEN1_CNTUFORCE_UPMETHOD_S)
#define MCPWM_GEN1_CNTUFORCE_UPMETHOD_V  0x0000003FU
#define MCPWM_GEN1_CNTUFORCE_UPMETHOD_S  0
/** MCPWM_GEN1_A_CNTUFORCE_MODE：R/W；位位置：[7:6]；默认值：0；PWM1A的连续软件力模式。0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN1_A_CNTUFORCE_MODE    0x00000003U
#define MCPWM_GEN1_A_CNTUFORCE_MODE_M  (MCPWM_GEN1_A_CNTUFORCE_MODE_V << MCPWM_GEN1_A_CNTUFORCE_MODE_S)
#define MCPWM_GEN1_A_CNTUFORCE_MODE_V  0x00000003U
#define MCPWM_GEN1_A_CNTUFORCE_MODE_S  6
/** MCPWM_GEN1_B_CNTUFORCE_MODE：R/W；比特位置：[9:8]；默认值：0；PWM1B的连续软件力模式。0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN1_B_CNTUFORCE_MODE    0x00000003U
#define MCPWM_GEN1_B_CNTUFORCE_MODE_M  (MCPWM_GEN1_B_CNTUFORCE_MODE_V << MCPWM_GEN1_B_CNTUFORCE_MODE_S)
#define MCPWM_GEN1_B_CNTUFORCE_MODE_V  0x00000003U
#define MCPWM_GEN1_B_CNTUFORCE_MODE_S  8
/** MCPWM_GEN1_A_ciforce:R/W；位位置：[10]；默认值：0；触发PWM1A的非连续立即软件强制事件，触发开关将触发强制事件。
 */
#define MCPWM_GEN1_A_NCIFORCE    (BIT(10))
#define MCPWM_GEN1_A_NCIFORCE_M  (MCPWM_GEN1_A_NCIFORCE_V << MCPWM_GEN1_A_NCIFORCE_S)
#define MCPWM_GEN1_A_NCIFORCE_V  0x00000001U
#define MCPWM_GEN1_A_NCIFORCE_S  10
/** MCPWM_GEN1_A协调模式：R/W；比特位置：[12:11]；默认值：0；PWM1A的非连续立即软件强制模式，0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN1_A_NCIFORCE_MODE    0x00000003U
#define MCPWM_GEN1_A_NCIFORCE_MODE_M  (MCPWM_GEN1_A_NCIFORCE_MODE_V << MCPWM_GEN1_A_NCIFORCE_MODE_S)
#define MCPWM_GEN1_A_NCIFORCE_MODE_V  0x00000003U
#define MCPWM_GEN1_A_NCIFORCE_MODE_S  11
/** MCPWM_GEN1_B_NCIFORCE:R/W；位位置：[13]；默认值：0；触发PWM1B的非连续立即软件强制事件，触发开关将触发强制事件。
 */
#define MCPWM_GEN1_B_NCIFORCE    (BIT(13))
#define MCPWM_GEN1_B_NCIFORCE_M  (MCPWM_GEN1_B_NCIFORCE_V << MCPWM_GEN1_B_NCIFORCE_S)
#define MCPWM_GEN1_B_NCIFORCE_V  0x00000001U
#define MCPWM_GEN1_B_NCIFORCE_S  13
/** MCPWM_GEN1_B_NCIFORCE_MODE：R/W；比特位置：[15:14]；默认值：0；PWM1B的非连续立即软件强制模式，0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN1_B_NCIFORCE_MODE    0x00000003U
#define MCPWM_GEN1_B_NCIFORCE_MODE_M  (MCPWM_GEN1_B_NCIFORCE_MODE_V << MCPWM_GEN1_B_NCIFORCE_MODE_S)
#define MCPWM_GEN1_B_NCIFORCE_MODE_V  0x00000003U
#define MCPWM_GEN1_B_NCIFORCE_MODE_S  14

/** MCPWM_GEN1_A_REG寄存器PWM1A上事件触发的操作
 */
#define MCPWM_GEN1_A_REG(i) (DR_REG_MCPWM_BASE(i) + 0x88)
/** MCPWM_GEN1_A_tez:R/W；位位置：[1:0]；默认值：0；定时器增加时，事件TEZ触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_UTEZ    0x00000003U
#define MCPWM_GEN1_A_UTEZ_M  (MCPWM_GEN1_A_UTEZ_V << MCPWM_GEN1_A_UTEZ_S)
#define MCPWM_GEN1_A_UTEZ_V  0x00000003U
#define MCPWM_GEN1_A_UTEZ_S  0
/** MCPWM_GEN1_A_tep:R/W；位位置：[3:2]；默认值：0；定时器增加时，事件TEP触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_UTEP    0x00000003U
#define MCPWM_GEN1_A_UTEP_M  (MCPWM_GEN1_A_UTEP_V << MCPWM_GEN1_A_UTEP_S)
#define MCPWM_GEN1_A_UTEP_V  0x00000003U
#define MCPWM_GEN1_A_UTEP_S  2
/** MCPWM_GEN1_A_uta:R/W；比特位置：[5:4]；默认值：0；定时器增加时，事件TEA触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_UTEA    0x00000003U
#define MCPWM_GEN1_A_UTEA_M  (MCPWM_GEN1_A_UTEA_V << MCPWM_GEN1_A_UTEA_S)
#define MCPWM_GEN1_A_UTEA_V  0x00000003U
#define MCPWM_GEN1_A_UTEA_S  4
/** MCPWM_GEN1_A_utb:R/W；位位置：[7:6]；默认值：0；计时器增加时，事件TEB触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_UTEB    0x00000003U
#define MCPWM_GEN1_A_UTEB_M  (MCPWM_GEN1_A_UTEB_V << MCPWM_GEN1_A_UTEB_S)
#define MCPWM_GEN1_A_UTEB_V  0x00000003U
#define MCPWM_GEN1_A_UTEB_S  6
/** MCPWM_GEN1_A_UT0:R/W；比特位置：[9:8]；默认值：0；计时器增加时，事件_t0触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_UT0    0x00000003U
#define MCPWM_GEN1_A_UT0_M  (MCPWM_GEN1_A_UT0_V << MCPWM_GEN1_A_UT0_S)
#define MCPWM_GEN1_A_UT0_V  0x00000003U
#define MCPWM_GEN1_A_UT0_S  8
/** MCPWM_GEN1_A_t1:R/W；比特位置：[11:10]；默认值：0；计时器增加时，事件_t1触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_UT1    0x00000003U
#define MCPWM_GEN1_A_UT1_M  (MCPWM_GEN1_A_UT1_V << MCPWM_GEN1_A_UT1_S)
#define MCPWM_GEN1_A_UT1_V  0x00000003U
#define MCPWM_GEN1_A_UT1_S  10
/** MCPWM_GEN1_A_DTEZ:R/W；比特位置：[13:12]；默认值：0；计时器减少时，事件TEZ触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_DTEZ    0x00000003U
#define MCPWM_GEN1_A_DTEZ_M  (MCPWM_GEN1_A_DTEZ_V << MCPWM_GEN1_A_DTEZ_S)
#define MCPWM_GEN1_A_DTEZ_V  0x00000003U
#define MCPWM_GEN1_A_DTEZ_S  12
/** MCPWM_GEN1_A_DTEP:R/W；比特位置：[15:14]；默认值：0；计时器减少时，事件TEP触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_DTEP    0x00000003U
#define MCPWM_GEN1_A_DTEP_M  (MCPWM_GEN1_A_DTEP_V << MCPWM_GEN1_A_DTEP_S)
#define MCPWM_GEN1_A_DTEP_V  0x00000003U
#define MCPWM_GEN1_A_DTEP_S  14
/** MCPWM_GEN1_A_DTEA:R/W；比特位置：[17:16]；默认值：0；定时器减少时，事件TEA触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_DTEA    0x00000003U
#define MCPWM_GEN1_A_DTEA_M  (MCPWM_GEN1_A_DTEA_V << MCPWM_GEN1_A_DTEA_S)
#define MCPWM_GEN1_A_DTEA_V  0x00000003U
#define MCPWM_GEN1_A_DTEA_S  16
/** MCPWM_GEN1_A_DTEB:R/W；比特位置：[19:18]；默认值：0；计时器减少时，事件TEB触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_DTEB    0x00000003U
#define MCPWM_GEN1_A_DTEB_M  (MCPWM_GEN1_A_DTEB_V << MCPWM_GEN1_A_DTEB_S)
#define MCPWM_GEN1_A_DTEB_V  0x00000003U
#define MCPWM_GEN1_A_DTEB_S  18
/** MCPWM_GEN1_A_DT0:R/W；比特位置：[21:20]；默认值：0；计时器减少时，事件_t0触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_DT0    0x00000003U
#define MCPWM_GEN1_A_DT0_M  (MCPWM_GEN1_A_DT0_V << MCPWM_GEN1_A_DT0_S)
#define MCPWM_GEN1_A_DT0_V  0x00000003U
#define MCPWM_GEN1_A_DT0_S  20
/** MCPWM_GEN1_A_DT1:R/W；比特位置：[23:22]；默认值：0；计时器减少时，事件_t1触发PWM1A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_A_DT1    0x00000003U
#define MCPWM_GEN1_A_DT1_M  (MCPWM_GEN1_A_DT1_V << MCPWM_GEN1_A_DT1_S)
#define MCPWM_GEN1_A_DT1_V  0x00000003U
#define MCPWM_GEN1_A_DT1_S  22

/** MCPWM_GEN1_B_REG寄存器PWM1B上事件触发的操作
 */
#define MCPWM_GEN1_B_REG(i) (DR_REG_MCPWM_BASE(i) + 0x8c)
/** MCPWM_GEN1_B_UTEZ:R/W；位位置：[1:0]；默认值：0；定时器增加时，事件TEZ触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_UTEZ    0x00000003U
#define MCPWM_GEN1_B_UTEZ_M  (MCPWM_GEN1_B_UTEZ_V << MCPWM_GEN1_B_UTEZ_S)
#define MCPWM_GEN1_B_UTEZ_V  0x00000003U
#define MCPWM_GEN1_B_UTEZ_S  0
/** MCPWM_GEN1_B_UTEP:R/W；位位置：[3:2]；默认值：0；计时器增加时，事件TEP触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_UTEP    0x00000003U
#define MCPWM_GEN1_B_UTEP_M  (MCPWM_GEN1_B_UTEP_V << MCPWM_GEN1_B_UTEP_S)
#define MCPWM_GEN1_B_UTEP_V  0x00000003U
#define MCPWM_GEN1_B_UTEP_S  2
/** MCPWM_GEN1_B_UTEA:R/W；比特位置：[5:4]；默认值：0；定时器增加时，事件TEA触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_UTEA    0x00000003U
#define MCPWM_GEN1_B_UTEA_M  (MCPWM_GEN1_B_UTEA_V << MCPWM_GEN1_B_UTEA_S)
#define MCPWM_GEN1_B_UTEA_V  0x00000003U
#define MCPWM_GEN1_B_UTEA_S  4
/** MCPWM_GEN1_B_UTEB:R/W；位位置：[7:6]；默认值：0；计时器增加时，事件TEB触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_UTEB    0x00000003U
#define MCPWM_GEN1_B_UTEB_M  (MCPWM_GEN1_B_UTEB_V << MCPWM_GEN1_B_UTEB_S)
#define MCPWM_GEN1_B_UTEB_V  0x00000003U
#define MCPWM_GEN1_B_UTEB_S  6
/** MCPWM_GEN1_B_UT0:R/W；比特位置：[9:8]；默认值：0；计时器增加时，事件_t0触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_UT0    0x00000003U
#define MCPWM_GEN1_B_UT0_M  (MCPWM_GEN1_B_UT0_V << MCPWM_GEN1_B_UT0_S)
#define MCPWM_GEN1_B_UT0_V  0x00000003U
#define MCPWM_GEN1_B_UT0_S  8
/** MCPWM_GEN1_B_UT1:R/W；比特位置：[11:10]；默认值：0；计时器增加时，事件_t1触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_UT1    0x00000003U
#define MCPWM_GEN1_B_UT1_M  (MCPWM_GEN1_B_UT1_V << MCPWM_GEN1_B_UT1_S)
#define MCPWM_GEN1_B_UT1_V  0x00000003U
#define MCPWM_GEN1_B_UT1_S  10
/** MCPWM_GEN1_B_DTEZ:R/W；比特位置：[13:12]；默认值：0；计时器减少时，事件TEZ触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_DTEZ    0x00000003U
#define MCPWM_GEN1_B_DTEZ_M  (MCPWM_GEN1_B_DTEZ_V << MCPWM_GEN1_B_DTEZ_S)
#define MCPWM_GEN1_B_DTEZ_V  0x00000003U
#define MCPWM_GEN1_B_DTEZ_S  12
/** MCPWM_GEN1_B_DTEP:R/W；比特位置：[15:14]；默认值：0；计时器减少时，事件TEP触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_DTEP    0x00000003U
#define MCPWM_GEN1_B_DTEP_M  (MCPWM_GEN1_B_DTEP_V << MCPWM_GEN1_B_DTEP_S)
#define MCPWM_GEN1_B_DTEP_V  0x00000003U
#define MCPWM_GEN1_B_DTEP_S  14
/** MCPWM_GEN1_B_DTEA:R/W；比特位置：[17:16]；默认值：0；定时器减少时，事件TEA触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_DTEA    0x00000003U
#define MCPWM_GEN1_B_DTEA_M  (MCPWM_GEN1_B_DTEA_V << MCPWM_GEN1_B_DTEA_S)
#define MCPWM_GEN1_B_DTEA_V  0x00000003U
#define MCPWM_GEN1_B_DTEA_S  16
/** MCPWM_GEN1_B_DTEB:R/W；比特位置：[19:18]；默认值：0；计时器减少时，事件TEB触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_DTEB    0x00000003U
#define MCPWM_GEN1_B_DTEB_M  (MCPWM_GEN1_B_DTEB_V << MCPWM_GEN1_B_DTEB_S)
#define MCPWM_GEN1_B_DTEB_V  0x00000003U
#define MCPWM_GEN1_B_DTEB_S  18
/** MCPWM_GEN1_B_DT0:R/W；比特位置：[21:20]；默认值：0；计时器减少时，事件_t0触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_DT0    0x00000003U
#define MCPWM_GEN1_B_DT0_M  (MCPWM_GEN1_B_DT0_V << MCPWM_GEN1_B_DT0_S)
#define MCPWM_GEN1_B_DT0_V  0x00000003U
#define MCPWM_GEN1_B_DT0_S  20
/** MCPWM_GEN1_B_DT1:R/W；比特位置：[23:22]；默认值：0；计时器减少时，事件_t1触发PWM1B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN1_B_DT1    0x00000003U
#define MCPWM_GEN1_B_DT1_M  (MCPWM_GEN1_B_DT1_V << MCPWM_GEN1_B_DT1_S)
#define MCPWM_GEN1_B_DT1_V  0x00000003U
#define MCPWM_GEN1_B_DT1_S  22

/** MCPWM_DT1_CFG_REG寄存器PWM发生器1空载时间类型选择和配置
 */
#define MCPWM_DT1_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x90)
/** MCPWM_DT1_FED_upmeth:R/W；位位置：[3:0]；默认值：0；FED（下降沿延迟）活动寄存器的更新方法。0：立即，当bit0设置为1:tez，当bit1设置为1:step，当bit2设置为1:sync，当bit 3设置为1时：禁用更新
 */
#define MCPWM_DT1_FED_UPMETHOD    0x0000000FU
#define MCPWM_DT1_FED_UPMETHOD_M  (MCPWM_DT1_FED_UPMETHOD_V << MCPWM_DT1_FED_UPMETHOD_S)
#define MCPWM_DT1_FED_UPMETHOD_V  0x0000000FU
#define MCPWM_DT1_FED_UPMETHOD_S  0
/** MCPWM_DT1_RED_upmeth:R/W；位位置：[7:4]；默认值：0；RED（上升沿延迟）活动寄存器的更新方法。0：立即，当bit0设置为1:tez，当bit1设置为1:step，当bit2设置为1:sync，当bit 3设置为1时：禁用更新
 */
#define MCPWM_DT1_RED_UPMETHOD    0x0000000FU
#define MCPWM_DT1_RED_UPMETHOD_M  (MCPWM_DT1_RED_UPMETHOD_V << MCPWM_DT1_RED_UPMETHOD_S)
#define MCPWM_DT1_RED_UPMETHOD_V  0x0000000FU
#define MCPWM_DT1_RED_UPMETHOD_S  4
/** MCPWM_DT1_DEB_MODE：R/W；位位置：[8]；默认值：0；表中S8，双边缘B模式，0：馈电/红色分别在不同路径上生效，1：馈电/蓝色在B路径上生效；A输出处于旁路或dulpB模式
 */
#define MCPWM_DT1_DEB_MODE    (BIT(8))
#define MCPWM_DT1_DEB_MODE_M  (MCPWM_DT1_DEB_MODE_V << MCPWM_DT1_DEB_MODE_S)
#define MCPWM_DT1_DEB_MODE_V  0x00000001U
#define MCPWM_DT1_DEB_MODE_S  8
/** MCPWM_DT1_A_OUTSWAP:R/W；位位置：[9]；默认值：0；表中的S6
 */
#define MCPWM_DT1_A_OUTSWAP    (BIT(9))
#define MCPWM_DT1_A_OUTSWAP_M  (MCPWM_DT1_A_OUTSWAP_V << MCPWM_DT1_A_OUTSWAP_S)
#define MCPWM_DT1_A_OUTSWAP_V  0x00000001U
#define MCPWM_DT1_A_OUTSWAP_S  9
/** MCPWM_DT1_B_OUTSWAP:R/W；位位置：[10]；默认值：0；表中S7
 */
#define MCPWM_DT1_B_OUTSWAP    (BIT(10))
#define MCPWM_DT1_B_OUTSWAP_M  (MCPWM_DT1_B_OUTSWAP_V << MCPWM_DT1_B_OUTSWAP_S)
#define MCPWM_DT1_B_OUTSWAP_V  0x00000001U
#define MCPWM_DT1_B_OUTSWAP_S  10
/** MCPWM_DT1_RED_INSEL：R/W；位位置：[11]；默认值：0；表中的S4
 */
#define MCPWM_DT1_RED_INSEL    (BIT(11))
#define MCPWM_DT1_RED_INSEL_M  (MCPWM_DT1_RED_INSEL_V << MCPWM_DT1_RED_INSEL_S)
#define MCPWM_DT1_RED_INSEL_V  0x00000001U
#define MCPWM_DT1_RED_INSEL_S  11
/** MCPWM_DT1_FED_INSEL：R/W；位位置：[12]；默认值：0；表中S5
 */
#define MCPWM_DT1_FED_INSEL    (BIT(12))
#define MCPWM_DT1_FED_INSEL_M  (MCPWM_DT1_FED_INSEL_V << MCPWM_DT1_FED_INSEL_S)
#define MCPWM_DT1_FED_INSEL_V  0x00000001U
#define MCPWM_DT1_FED_INSEL_S  12
/** MCPWM_DT1_RED_OUTINVERT:R/W；位位置：[13]；默认值：0；表中的S2
 */
#define MCPWM_DT1_RED_OUTINVERT    (BIT(13))
#define MCPWM_DT1_RED_OUTINVERT_M  (MCPWM_DT1_RED_OUTINVERT_V << MCPWM_DT1_RED_OUTINVERT_S)
#define MCPWM_DT1_RED_OUTINVERT_V  0x00000001U
#define MCPWM_DT1_RED_OUTINVERT_S  13
/** MCPWM_DT1_FED_OUTINVERT:R/W；位位置：[14]；默认值：0；表中的S3
 */
#define MCPWM_DT1_FED_OUTINVERT    (BIT(14))
#define MCPWM_DT1_FED_OUTINVERT_M  (MCPWM_DT1_FED_OUTINVERT_V << MCPWM_DT1_FED_OUTINVERT_S)
#define MCPWM_DT1_FED_OUTINVERT_V  0x00000001U
#define MCPWM_DT1_FED_OUTINVERT_S  14
/** MCPWM_DT1_A_outypass:R/W；位位置：[15]；默认值：1；表中的S1
 */
#define MCPWM_DT1_A_OUTBYPASS    (BIT(15))
#define MCPWM_DT1_A_OUTBYPASS_M  (MCPWM_DT1_A_OUTBYPASS_V << MCPWM_DT1_A_OUTBYPASS_S)
#define MCPWM_DT1_A_OUTBYPASS_V  0x00000001U
#define MCPWM_DT1_A_OUTBYPASS_S  15
/** MCPWM_DT1_B_outypass:R/W；位位置：[16]；默认值：1；表中S0
 */
#define MCPWM_DT1_B_OUTBYPASS    (BIT(16))
#define MCPWM_DT1_B_OUTBYPASS_M  (MCPWM_DT1_B_OUTBYPASS_V << MCPWM_DT1_B_OUTBYPASS_S)
#define MCPWM_DT1_B_OUTBYPASS_V  0x00000001U
#define MCPWM_DT1_B_OUTBYPASS_S  16
/** MCPWM_DT1_CLK_SEL:R/W；位位置：[17]；默认值：0；死区时间时钟选择。0:PWM_clk，1:PT_clk
 */
#define MCPWM_DT1_CLK_SEL    (BIT(17))
#define MCPWM_DT1_CLK_SEL_M  (MCPWM_DT1_CLK_SEL_V << MCPWM_DT1_CLK_SEL_S)
#define MCPWM_DT1_CLK_SEL_V  0x00000001U
#define MCPWM_DT1_CLK_SEL_S  17

/** MCPWM_DT1_FED_CFG_REG寄存器PWM发生器1下降沿延迟阴影寄存器（FED）。
 */
#define MCPWM_DT1_FED_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x94)
/** MCPWM_DT1_FED:R/W；比特位置：[15:0]；默认值：0；FED的影子寄存器
 */
#define MCPWM_DT1_FED    0x0000FFFFU
#define MCPWM_DT1_FED_M  (MCPWM_DT1_FED_V << MCPWM_DT1_FED_S)
#define MCPWM_DT1_FED_V  0x0000FFFFU
#define MCPWM_DT1_FED_S  0

/** MCPWM_DT1_RED_CFG_REG寄存器PWM发生器1上升沿延迟阴影寄存器（RED）。
 */
#define MCPWM_DT1_RED_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x98)
/** MCPWM_DT1_RED：R/W；比特位置：[15:0]；默认值：0；RED的影子寄存器
 */
#define MCPWM_DT1_RED    0x0000FFFFU
#define MCPWM_DT1_RED_M  (MCPWM_DT1_RED_V << MCPWM_DT1_RED_S)
#define MCPWM_DT1_RED_V  0x0000FFFFU
#define MCPWM_DT1_RED_S  0

/** MCPWM_CARRIR1_CFG_REG寄存器PWM发生器1载波启用和配置
 */
#define MCPWM_CARRIER1_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x9c)
/** MCPWM_CARRIER1_EN:R/W；位位置：[0]；默认值：0；设置后，载波1功能启用。清除后，载波1被旁路
 */
#define MCPWM_CARRIER1_EN    (BIT(0))
#define MCPWM_CARRIER1_EN_M  (MCPWM_CARRIER1_EN_V << MCPWM_CARRIER1_EN_S)
#define MCPWM_CARRIER1_EN_V  0x00000001U
#define MCPWM_CARRIER1_EN_S  0
/** MCPWM_CARRIER1_比例：R/W；比特位置：[4:1]；默认值：0；PWM载波1时钟（PC_clk）预缩放值。PC_clk的周期=PWM_clk的周期（PWM_CARRIR0_PRESCALE+1）
 */
#define MCPWM_CARRIER1_PRESCALE    0x0000000FU
#define MCPWM_CARRIER1_PRESCALE_M  (MCPWM_CARRIER1_PRESCALE_V << MCPWM_CARRIER1_PRESCALE_S)
#define MCPWM_CARRIER1_PRESCALE_V  0x0000000FU
#define MCPWM_CARRIER1_PRESCALE_S  1
/** MCPWM_CARRIER1_DUTY:R/W；位位置：[7:5]；默认值：0；承运人职责选择。负载=PWM_CARRIR0_Duty/8
 */
#define MCPWM_CARRIER1_DUTY    0x00000007U
#define MCPWM_CARRIER1_DUTY_M  (MCPWM_CARRIER1_DUTY_V << MCPWM_CARRIER1_DUTY_S)
#define MCPWM_CARRIER1_DUTY_V  0x00000007U
#define MCPWM_CARRIER1_DUTY_S  5
/** MCPWM_CARRIER1_OSHTWTH:R/W；位位置：[11:8]；默认值：0；载波周期数中第一脉冲的宽度
 */
#define MCPWM_CARRIER1_OSHTWTH    0x0000000FU
#define MCPWM_CARRIER1_OSHTWTH_M  (MCPWM_CARRIER1_OSHTWTH_V << MCPWM_CARRIER1_OSHTWTH_S)
#define MCPWM_CARRIER1_OSHTWTH_V  0x0000000FU
#define MCPWM_CARRIER1_OSHTWTH_S  8
/** MCPWM_CARRIER1_OUT_INVERT:R/W；位位置：[12]；默认值：0；设置后，将该子模块的PWM1A和PWM1B的输出反相
 */
#define MCPWM_CARRIER1_OUT_INVERT    (BIT(12))
#define MCPWM_CARRIER1_OUT_INVERT_M  (MCPWM_CARRIER1_OUT_INVERT_V << MCPWM_CARRIER1_OUT_INVERT_S)
#define MCPWM_CARRIER1_OUT_INVERT_V  0x00000001U
#define MCPWM_CARRIER1_OUT_INVERT_S  12
/** MCPWM_CARRIER1_IN_INVERT:R/W；位位置：[13]；默认值：0；设置后，将该子模块的PWM1A和PWM1B的输入反相
 */
#define MCPWM_CARRIER1_IN_INVERT    (BIT(13))
#define MCPWM_CARRIER1_IN_INVERT_M  (MCPWM_CARRIER1_IN_INVERT_V << MCPWM_CARRIER1_IN_INVERT_S)
#define MCPWM_CARRIER1_IN_INVERT_V  0x00000001U
#define MCPWM_CARRIER1_IN_INVERT_S  13

/** MCPWM_FH1_CFG0_REG寄存器PWM1A和PWM1B跳闸事件的动作
 */
#define MCPWM_FH1_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0xa0)
/** MCPWM_FH1_SW_CBC:R/W；位位置：[0]；默认值：0；启用软件强制循环模式动作的寄存器。0：禁用，1：启用
 */
#define MCPWM_FH1_SW_CBC    (BIT(0))
#define MCPWM_FH1_SW_CBC_M  (MCPWM_FH1_SW_CBC_V << MCPWM_FH1_SW_CBC_S)
#define MCPWM_FH1_SW_CBC_V  0x00000001U
#define MCPWM_FH1_SW_CBC_S  0
/** MCPWM_FH1_F2_CBC：R/W；位位置：[1]；默认值：0；fault_event2将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH1_F2_CBC    (BIT(1))
#define MCPWM_FH1_F2_CBC_M  (MCPWM_FH1_F2_CBC_V << MCPWM_FH1_F2_CBC_S)
#define MCPWM_FH1_F2_CBC_V  0x00000001U
#define MCPWM_FH1_F2_CBC_S  1
/** MCPWM_FH1_F1_CBC：R/W；位位置：[2]；默认值：0；fault_event1将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH1_F1_CBC    (BIT(2))
#define MCPWM_FH1_F1_CBC_M  (MCPWM_FH1_F1_CBC_V << MCPWM_FH1_F1_CBC_S)
#define MCPWM_FH1_F1_CBC_V  0x00000001U
#define MCPWM_FH1_F1_CBC_S  2
/** MCPWM_FH1_F0_CBC:R/W；位位置：[3]；默认值：0；fault_event0将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH1_F0_CBC    (BIT(3))
#define MCPWM_FH1_F0_CBC_M  (MCPWM_FH1_F0_CBC_V << MCPWM_FH1_F0_CBC_S)
#define MCPWM_FH1_F0_CBC_V  0x00000001U
#define MCPWM_FH1_F0_CBC_S  3
/** MCPWM_FH1_SW_OST:R/W；位位置：[4]；默认值：0；启用软件强制单触发模式动作的寄存器。0：禁用，1：启用
 */
#define MCPWM_FH1_SW_OST    (BIT(4))
#define MCPWM_FH1_SW_OST_M  (MCPWM_FH1_SW_OST_V << MCPWM_FH1_SW_OST_S)
#define MCPWM_FH1_SW_OST_V  0x00000001U
#define MCPWM_FH1_SW_OST_S  4
/** MCPWM_FH1_F2_OST:R/W；位位置：[5]；默认值：0；fault_event2将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH1_F2_OST    (BIT(5))
#define MCPWM_FH1_F2_OST_M  (MCPWM_FH1_F2_OST_V << MCPWM_FH1_F2_OST_S)
#define MCPWM_FH1_F2_OST_V  0x00000001U
#define MCPWM_FH1_F2_OST_S  5
/** MCPWM_FH1_F1_OST:R/W；位位置：[6]；默认值：0；fault_event1将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH1_F1_OST    (BIT(6))
#define MCPWM_FH1_F1_OST_M  (MCPWM_FH1_F1_OST_V << MCPWM_FH1_F1_OST_S)
#define MCPWM_FH1_F1_OST_V  0x00000001U
#define MCPWM_FH1_F1_OST_S  6
/** MCPWM_FH1_F0_OST:R/W；位位置：[7]；默认值：0；fault_event0将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH1_F0_OST    (BIT(7))
#define MCPWM_FH1_F0_OST_M  (MCPWM_FH1_F0_OST_V << MCPWM_FH1_F0_OST_S)
#define MCPWM_FH1_F0_OST_V  0x00000001U
#define MCPWM_FH1_F0_OST_S  7
/** MCPWM_FH1_A_CBC_D:R/W；比特位置：[9:8]；默认值：0；当故障事件发生且计时器正在减少时，PWM1A上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH1_A_CBC_D    0x00000003U
#define MCPWM_FH1_A_CBC_D_M  (MCPWM_FH1_A_CBC_D_V << MCPWM_FH1_A_CBC_D_S)
#define MCPWM_FH1_A_CBC_D_V  0x00000003U
#define MCPWM_FH1_A_CBC_D_S  8
/** MCPWM_FH1_A_CBC_U:R/W；比特位置：[11:10]；默认值：0；当故障事件发生且计时器增加时，PWM1A上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH1_A_CBC_U    0x00000003U
#define MCPWM_FH1_A_CBC_U_M  (MCPWM_FH1_A_CBC_U_V << MCPWM_FH1_A_CBC_U_S)
#define MCPWM_FH1_A_CBC_U_V  0x00000003U
#define MCPWM_FH1_A_CBC_U_S  10
/** MCPWM_FH1_A_OST_D:R/W；比特位置：[13:12]；默认值：0；当发生故障事件且计时器正在减少时，PWM1A上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH1_A_OST_D    0x00000003U
#define MCPWM_FH1_A_OST_D_M  (MCPWM_FH1_A_OST_D_V << MCPWM_FH1_A_OST_D_S)
#define MCPWM_FH1_A_OST_D_V  0x00000003U
#define MCPWM_FH1_A_OST_D_S  12
/** MCPWM_FH1_A_OST_U:R/W；比特位置：[15:14]；默认值：0；当故障事件发生且计时器增加时，PWM1A上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH1_A_OST_U    0x00000003U
#define MCPWM_FH1_A_OST_U_M  (MCPWM_FH1_A_OST_U_V << MCPWM_FH1_A_OST_U_S)
#define MCPWM_FH1_A_OST_U_V  0x00000003U
#define MCPWM_FH1_A_OST_U_S  14
/** MCPWM_FH1_bcbc_D:R/W；比特位置：[17:16]；默认值：0；当故障事件发生且计时器正在减少时，PWM1B上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH1_B_CBC_D    0x00000003U
#define MCPWM_FH1_B_CBC_D_M  (MCPWM_FH1_B_CBC_D_V << MCPWM_FH1_B_CBC_D_S)
#define MCPWM_FH1_B_CBC_D_V  0x00000003U
#define MCPWM_FH1_B_CBC_D_S  16
/** MCPWM_FH1_B_CBC_U:R/W；比特位置：[19:18]；默认值：0；当故障事件发生且计时器增加时，PWM1B上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH1_B_CBC_U    0x00000003U
#define MCPWM_FH1_B_CBC_U_M  (MCPWM_FH1_B_CBC_U_V << MCPWM_FH1_B_CBC_U_S)
#define MCPWM_FH1_B_CBC_U_V  0x00000003U
#define MCPWM_FH1_B_CBC_U_S  18
/** MCPWM_FH1_B_OST_D:R/W；比特位置：[21:20]；默认值：0；当发生故障事件且计时器正在减少时，PWM1B上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH1_B_OST_D    0x00000003U
#define MCPWM_FH1_B_OST_D_M  (MCPWM_FH1_B_OST_D_V << MCPWM_FH1_B_OST_D_S)
#define MCPWM_FH1_B_OST_D_V  0x00000003U
#define MCPWM_FH1_B_OST_D_S  20
/** MCPWM_FH1_B_OST_U:R/W；比特位置：[23:22]；默认值：0；当故障事件发生且计时器增加时，PWM1B上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH1_B_OST_U    0x00000003U
#define MCPWM_FH1_B_OST_U_M  (MCPWM_FH1_B_OST_U_V << MCPWM_FH1_B_OST_U_S)
#define MCPWM_FH1_B_OST_U_V  0x00000003U
#define MCPWM_FH1_B_OST_U_S  22

/** MCPWM_FH1_CFG1_REG寄存器故障处理程序动作的软件触发器
 */
#define MCPWM_FH1_CFG1_REG(i) (DR_REG_MCPWM_BASE(i) + 0xa4)
/** MCPWM_FH1_CLR_OST:R/W；位位置：[0]；默认值：0；在进行一次射击模式动作时，上升沿将消失
 */
#define MCPWM_FH1_CLR_OST    (BIT(0))
#define MCPWM_FH1_CLR_OST_M  (MCPWM_FH1_CLR_OST_V << MCPWM_FH1_CLR_OST_S)
#define MCPWM_FH1_CLR_OST_V  0x00000001U
#define MCPWM_FH1_CLR_OST_S  0
/** MCPWM_FH1_CBCPULSE:R/W；位位置：[2:1]；默认值：0；逐周期模式动作刷新时刻选择。当位0设置为1:TEZ时，当位1设置为1:TECP时
 */
#define MCPWM_FH1_CBCPULSE    0x00000003U
#define MCPWM_FH1_CBCPULSE_M  (MCPWM_FH1_CBCPULSE_V << MCPWM_FH1_CBCPULSE_S)
#define MCPWM_FH1_CBCPULSE_V  0x00000003U
#define MCPWM_FH1_CBCPULSE_S  1
/** MCPWM_FH1-FORCE_CBC:R/W；位位置：[3]；默认值：0；触发一个循环一个循环的模式动作
 */
#define MCPWM_FH1_FORCE_CBC    (BIT(3))
#define MCPWM_FH1_FORCE_CBC_M  (MCPWM_FH1_FORCE_CBC_V << MCPWM_FH1_FORCE_CBC_S)
#define MCPWM_FH1_FORCE_CBC_V  0x00000001U
#define MCPWM_FH1_FORCE_CBC_S  3
/** MCPWM_FH1_FORCE_OST:R/W；位位置：[4]；默认值：0；切换（软件否定其值）触发单次模式动作
 */
#define MCPWM_FH1_FORCE_OST    (BIT(4))
#define MCPWM_FH1_FORCE_OST_M  (MCPWM_FH1_FORCE_OST_V << MCPWM_FH1_FORCE_OST_S)
#define MCPWM_FH1_FORCE_OST_V  0x00000001U
#define MCPWM_FH1_FORCE_OST_S  4

/** MCPWM_FH1_STATUS_REG寄存器故障事件状态。
 */
#define MCPWM_FH1_STATUS_REG(i) (DR_REG_MCPWM_BASE(i) + 0xa8)
/** MCPWM_FH1_CBC-ON:RO；位位置：[0]；默认值：0；通过硬件设置和重置。如果设置，则循环模式操作正在进行
 */
#define MCPWM_FH1_CBC_ON    (BIT(0))
#define MCPWM_FH1_CBC_ON_M  (MCPWM_FH1_CBC_ON_V << MCPWM_FH1_CBC_ON_S)
#define MCPWM_FH1_CBC_ON_V  0x00000001U
#define MCPWM_FH1_CBC_ON_S  0
/** MCPWM_FH1_OST_ON:RO；位位置：[1]；默认值：0；通过硬件设置和重置。如果设置，则一次拍摄模式动作正在进行
 */
#define MCPWM_FH1_OST_ON    (BIT(1))
#define MCPWM_FH1_OST_ON_M  (MCPWM_FH1_OST_ON_V << MCPWM_FH1_OST_ON_S)
#define MCPWM_FH1_OST_ON_V  0x00000001U
#define MCPWM_FH1_OST_ON_S  1

/** MCPWM_GEN2_STMP_CFG_REG寄存器时间戳寄存器A和B的传输状态和更新方法
 */
#define MCPWM_GEN2_STMP_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xac)
/** MCPWM_GEN2_A_pmethod:R/W；位位置：[3:0]；默认值：0；PWM发生器2时间戳A的激活寄存器的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TECP时，当比特2设置为1:sync时，当位元3设置为1时：禁用更新。
 */
#define MCPWM_GEN2_A_UPMETHOD    0x0000000FU
#define MCPWM_GEN2_A_UPMETHOD_M  (MCPWM_GEN2_A_UPMETHOD_V << MCPWM_GEN2_A_UPMETHOD_S)
#define MCPWM_GEN2_A_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN2_A_UPMETHOD_S  0
/** MCPWM_GEN2_B_UPMETHOD:R/W；位位置：[7:4]；默认值：0；PWM发生器2时间戳B激活寄存器的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TECP时，当比特2设置为1:sync时，当位元3设置为1时：禁用更新。
 */
#define MCPWM_GEN2_B_UPMETHOD    0x0000000FU
#define MCPWM_GEN2_B_UPMETHOD_M  (MCPWM_GEN2_B_UPMETHOD_V << MCPWM_GEN2_B_UPMETHOD_S)
#define MCPWM_GEN2_B_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN2_B_UPMETHOD_S  4
/** MCPWM_GEN2_A_SHDW_FULL:R/W/WTC/SC；位位置：[8]；默认值：0；通过硬件设置和重置。如果设置，PWM发生器2的时间戳A的影子寄存器将被填充，并等待传输到A的活动寄存器。如果清除，A的活动注册表已用影子寄存器的最新值更新
 */
#define MCPWM_GEN2_A_SHDW_FULL    (BIT(8))
#define MCPWM_GEN2_A_SHDW_FULL_M  (MCPWM_GEN2_A_SHDW_FULL_V << MCPWM_GEN2_A_SHDW_FULL_S)
#define MCPWM_GEN2_A_SHDW_FULL_V  0x00000001U
#define MCPWM_GEN2_A_SHDW_FULL_S  8
/** MCPWM_GEN2_B_SHDW_FULL:R/W/WTC/SC；位位置：[9]；默认值：0；通过硬件设置和重置。如果设置，PWM发生器2的时间戳B的影子寄存器将被填充，并等待传输到B的活动寄存器。如果清除，则B的活动注册表已用影子寄存器的最新值更新
 */
#define MCPWM_GEN2_B_SHDW_FULL    (BIT(9))
#define MCPWM_GEN2_B_SHDW_FULL_M  (MCPWM_GEN2_B_SHDW_FULL_V << MCPWM_GEN2_B_SHDW_FULL_S)
#define MCPWM_GEN2_B_SHDW_FULL_V  0x00000001U
#define MCPWM_GEN2_B_SHDW_FULL_S  9

/** MCPWM_GEN2_TSTMP_A_REG寄存器PWM生成器2用于定时器标记A的影子寄存器。
 */
#define MCPWM_GEN2_TSTMP_A_REG(i) (DR_REG_MCPWM_BASE(i) + 0xb0)
/** MCPWM_GEN2_A:R/W；比特位置：[15:0]；默认值：0；PWM发生器2时间戳A的影子寄存器
 */
#define MCPWM_GEN2_A    0x0000FFFFU
#define MCPWM_GEN2_A_M  (MCPWM_GEN2_A_V << MCPWM_GEN2_A_S)
#define MCPWM_GEN2_A_V  0x0000FFFFU
#define MCPWM_GEN2_A_S  0

/** MCPWM_GEN2_TSTMP_B_REG寄存器PWM生成器2用于定时器标记A的影子寄存器。
 */
#define MCPWM_GEN2_TSTMP_B_REG(i) (DR_REG_MCPWM_BASE(i) + 0xb4)
/** MCPWM_GEN2_B:R/W；比特位置：[15:0]；默认值：0；PWM发生器2时间戳B的影子寄存器
 */
#define MCPWM_GEN2_B    0x0000FFFFU
#define MCPWM_GEN2_B_M  (MCPWM_GEN2_B_V << MCPWM_GEN2_B_S)
#define MCPWM_GEN2_B_V  0x0000FFFFU
#define MCPWM_GEN2_B_S  0

/** MCPWM_GEN2_CFG0_REG寄存器PWM发生器2事件T0和T1处理
 */
#define MCPWM_GEN2_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0xb8)
/** MCPWM_GEN2_CFG_up方法：R/W；位位置：[3:0]；默认值：0；PWM发电机2的激活配置寄存器的更新方法。0：立即，当位0设置为1:TEZ时，当位1设置为1:sync时；当bit3设置为1时：禁用更新。
 */
#define MCPWM_GEN2_CFG_UPMETHOD    0x0000000FU
#define MCPWM_GEN2_CFG_UPMETHOD_M  (MCPWM_GEN2_CFG_UPMETHOD_V << MCPWM_GEN2_CFG_UPMETHOD_S)
#define MCPWM_GEN2_CFG_UPMETHOD_V  0x0000000FU
#define MCPWM_GEN2_CFG_UPMETHOD_S  0
/** MCPWM_GEN2_T0_SEL:R/W；比特位置：[6:4]；默认值：0；PWM发电机2事件_t0的源选择立即生效，0：故障事件0，1：故障事件1，2：故障事件2，3：同步事件，4：无
 */
#define MCPWM_GEN2_T0_SEL    0x00000007U
#define MCPWM_GEN2_T0_SEL_M  (MCPWM_GEN2_T0_SEL_V << MCPWM_GEN2_T0_SEL_S)
#define MCPWM_GEN2_T0_SEL_V  0x00000007U
#define MCPWM_GEN2_T0_SEL_S  4
/** MCPWM_GEN2_T1_SEL:R/W；比特位置：[9:7]；默认值：0；PWM发电机2事件t1的源选择立即生效，0：故障事件0，1：故障事件1，2：故障事件2，3：同步事件，4：无
 */
#define MCPWM_GEN2_T1_SEL    0x00000007U
#define MCPWM_GEN2_T1_SEL_M  (MCPWM_GEN2_T1_SEL_V << MCPWM_GEN2_T1_SEL_S)
#define MCPWM_GEN2_T1_SEL_V  0x00000007U
#define MCPWM_GEN2_T1_SEL_S  7

/** MCPWM_GEN2_FORCE_REG寄存器允许通过软件强制PWM2A和PWM2B输出
 */
#define MCPWM_GEN2_FORCE_REG(i) (DR_REG_MCPWM_BASE(i) + 0xbc)
/** MCPWM_GEN2_CNTUFORCE_upmeth:R/W；比特位置：[5:0]；默认值：32；PWM发生器2连续软件力的更新方法。当所有位设置为0时：立即，当位0设置为1:TEZ时，当位1设置为1:TE P时，当位数2设置为1:TEA时，当3设置为1:TEB时，当4设置为1:sync时，位5设置为1:disable update时。（这里和下面的TEA/B表示当计时器的值等于寄存器A/B的值时生成的事件。）
 */
#define MCPWM_GEN2_CNTUFORCE_UPMETHOD    0x0000003FU
#define MCPWM_GEN2_CNTUFORCE_UPMETHOD_M  (MCPWM_GEN2_CNTUFORCE_UPMETHOD_V << MCPWM_GEN2_CNTUFORCE_UPMETHOD_S)
#define MCPWM_GEN2_CNTUFORCE_UPMETHOD_V  0x0000003FU
#define MCPWM_GEN2_CNTUFORCE_UPMETHOD_S  0
/** MCPWM_GEN2_A_CNTUFORCE_MODE：R/W；位位置：[7:6]；默认值：0；PWM2A的连续软件强制模式。0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN2_A_CNTUFORCE_MODE    0x00000003U
#define MCPWM_GEN2_A_CNTUFORCE_MODE_M  (MCPWM_GEN2_A_CNTUFORCE_MODE_V << MCPWM_GEN2_A_CNTUFORCE_MODE_S)
#define MCPWM_GEN2_A_CNTUFORCE_MODE_V  0x00000003U
#define MCPWM_GEN2_A_CNTUFORCE_MODE_S  6
/** MCPWM_GEN2_B_CNTUFORCE_MODE：R/W；比特位置：[9:8]；默认值：0；PWM2B的连续软件强制模式。0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN2_B_CNTUFORCE_MODE    0x00000003U
#define MCPWM_GEN2_B_CNTUFORCE_MODE_M  (MCPWM_GEN2_B_CNTUFORCE_MODE_V << MCPWM_GEN2_B_CNTUFORCE_MODE_S)
#define MCPWM_GEN2_B_CNTUFORCE_MODE_V  0x00000003U
#define MCPWM_GEN2_B_CNTUFORCE_MODE_S  8
/** MCPWM_GEN2_A_ciforce:R/W；位位置：[10]；默认值：0；触发PWM2A的非连续立即软件强制事件，触发开关将触发强制事件。
 */
#define MCPWM_GEN2_A_NCIFORCE    (BIT(10))
#define MCPWM_GEN2_A_NCIFORCE_M  (MCPWM_GEN2_A_NCIFORCE_V << MCPWM_GEN2_A_NCIFORCE_S)
#define MCPWM_GEN2_A_NCIFORCE_V  0x00000001U
#define MCPWM_GEN2_A_NCIFORCE_S  10
/** MCPWM_GEN2_A协调模式：R/W；比特位置：[12:11]；默认值：0；PWM2A的非连续立即软件强制模式，0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN2_A_NCIFORCE_MODE    0x00000003U
#define MCPWM_GEN2_A_NCIFORCE_MODE_M  (MCPWM_GEN2_A_NCIFORCE_MODE_V << MCPWM_GEN2_A_NCIFORCE_MODE_S)
#define MCPWM_GEN2_A_NCIFORCE_MODE_V  0x00000003U
#define MCPWM_GEN2_A_NCIFORCE_MODE_S  11
/** MCPWM_GEN2_B_NCIFORCE:R/W；位位置：[13]；默认值：0；触发PWM2B的非连续即时软件强制事件，触发开关将触发强制事件。
 */
#define MCPWM_GEN2_B_NCIFORCE    (BIT(13))
#define MCPWM_GEN2_B_NCIFORCE_M  (MCPWM_GEN2_B_NCIFORCE_V << MCPWM_GEN2_B_NCIFORCE_S)
#define MCPWM_GEN2_B_NCIFORCE_V  0x00000001U
#define MCPWM_GEN2_B_NCIFORCE_S  13
/** MCPWM_GEN2_B_NCIFORCE_MODE：R/W；比特位置：[15:14]；默认值：0；PWM2B的非连续立即软件强制模式，0：禁用，1：低，2：高，3：禁用
 */
#define MCPWM_GEN2_B_NCIFORCE_MODE    0x00000003U
#define MCPWM_GEN2_B_NCIFORCE_MODE_M  (MCPWM_GEN2_B_NCIFORCE_MODE_V << MCPWM_GEN2_B_NCIFORCE_MODE_S)
#define MCPWM_GEN2_B_NCIFORCE_MODE_V  0x00000003U
#define MCPWM_GEN2_B_NCIFORCE_MODE_S  14

/** MCPWM_GEN2_A_REG寄存器PWM2A上事件触发的操作
 */
#define MCPWM_GEN2_A_REG(i) (DR_REG_MCPWM_BASE(i) + 0xc0)
/** MCPWM_GEN2_A_tez:R/W；位位置：[1:0]；默认值：0；定时器增加时，事件TEZ触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_UTEZ    0x00000003U
#define MCPWM_GEN2_A_UTEZ_M  (MCPWM_GEN2_A_UTEZ_V << MCPWM_GEN2_A_UTEZ_S)
#define MCPWM_GEN2_A_UTEZ_V  0x00000003U
#define MCPWM_GEN2_A_UTEZ_S  0
/** MCPWM_GEN2_A_tep:R/W；位位置：[3:2]；默认值：0；定时器增加时，事件TEP触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_UTEP    0x00000003U
#define MCPWM_GEN2_A_UTEP_M  (MCPWM_GEN2_A_UTEP_V << MCPWM_GEN2_A_UTEP_S)
#define MCPWM_GEN2_A_UTEP_V  0x00000003U
#define MCPWM_GEN2_A_UTEP_S  2
/** MCPWM_GEN2_A_uta:R/W；比特位置：[5:4]；默认值：0；定时器增加时，事件TEA触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_UTEA    0x00000003U
#define MCPWM_GEN2_A_UTEA_M  (MCPWM_GEN2_A_UTEA_V << MCPWM_GEN2_A_UTEA_S)
#define MCPWM_GEN2_A_UTEA_V  0x00000003U
#define MCPWM_GEN2_A_UTEA_S  4
/** MCPWM_GEN2_A_utb:R/W；位位置：[7:6]；默认值：0；定时器增加时，事件TEB触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_UTEB    0x00000003U
#define MCPWM_GEN2_A_UTEB_M  (MCPWM_GEN2_A_UTEB_V << MCPWM_GEN2_A_UTEB_S)
#define MCPWM_GEN2_A_UTEB_V  0x00000003U
#define MCPWM_GEN2_A_UTEB_S  6
/** MCPWM_GEN2_A_UT0:R/W；比特位置：[9:8]；默认值：0；计时器增加时，事件_t0触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_UT0    0x00000003U
#define MCPWM_GEN2_A_UT0_M  (MCPWM_GEN2_A_UT0_V << MCPWM_GEN2_A_UT0_S)
#define MCPWM_GEN2_A_UT0_V  0x00000003U
#define MCPWM_GEN2_A_UT0_S  8
/** MCPWM_GEN2_A_t1:R/W；比特位置：[11:10]；默认值：0；计时器增加时，事件_t1触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_UT1    0x00000003U
#define MCPWM_GEN2_A_UT1_M  (MCPWM_GEN2_A_UT1_V << MCPWM_GEN2_A_UT1_S)
#define MCPWM_GEN2_A_UT1_V  0x00000003U
#define MCPWM_GEN2_A_UT1_S  10
/** MCPWM_GEN2_A_DTEZ:R/W；比特位置：[13:12]；默认值：0；计时器减少时，事件TEZ触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_DTEZ    0x00000003U
#define MCPWM_GEN2_A_DTEZ_M  (MCPWM_GEN2_A_DTEZ_V << MCPWM_GEN2_A_DTEZ_S)
#define MCPWM_GEN2_A_DTEZ_V  0x00000003U
#define MCPWM_GEN2_A_DTEZ_S  12
/** MCPWM_GEN2_A_DTEP:R/W；比特位置：[15:14]；默认值：0；计时器减少时，事件TEP触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_DTEP    0x00000003U
#define MCPWM_GEN2_A_DTEP_M  (MCPWM_GEN2_A_DTEP_V << MCPWM_GEN2_A_DTEP_S)
#define MCPWM_GEN2_A_DTEP_V  0x00000003U
#define MCPWM_GEN2_A_DTEP_S  14
/** MCPWM_GEN2_A_DTEA:R/W；比特位置：[17:16]；默认值：0；定时器减少时，事件TEA触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_DTEA    0x00000003U
#define MCPWM_GEN2_A_DTEA_M  (MCPWM_GEN2_A_DTEA_V << MCPWM_GEN2_A_DTEA_S)
#define MCPWM_GEN2_A_DTEA_V  0x00000003U
#define MCPWM_GEN2_A_DTEA_S  16
/** MCPWM_GEN2_A_DTEB:R/W；比特位置：[19:18]；默认值：0；计时器减少时，事件TEB触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_DTEB    0x00000003U
#define MCPWM_GEN2_A_DTEB_M  (MCPWM_GEN2_A_DTEB_V << MCPWM_GEN2_A_DTEB_S)
#define MCPWM_GEN2_A_DTEB_V  0x00000003U
#define MCPWM_GEN2_A_DTEB_S  18
/** MCPWM_GEN2_A_DT0:R/W；比特位置：[21:20]；默认值：0；计时器减少时，事件_t0触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_DT0    0x00000003U
#define MCPWM_GEN2_A_DT0_M  (MCPWM_GEN2_A_DT0_V << MCPWM_GEN2_A_DT0_S)
#define MCPWM_GEN2_A_DT0_V  0x00000003U
#define MCPWM_GEN2_A_DT0_S  20
/** MCPWM_GEN2_A_DT1:R/W；比特位置：[23:22]；默认值：0；计时器减少时，事件_t1触发PWM2A上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_A_DT1    0x00000003U
#define MCPWM_GEN2_A_DT1_M  (MCPWM_GEN2_A_DT1_V << MCPWM_GEN2_A_DT1_S)
#define MCPWM_GEN2_A_DT1_V  0x00000003U
#define MCPWM_GEN2_A_DT1_S  22

/** MCPWM_GEN2_B_REG寄存器PWM2B上事件触发的操作
 */
#define MCPWM_GEN2_B_REG(i) (DR_REG_MCPWM_BASE(i) + 0xc4)
/** MCPWM_GEN2_B_UTEZ:R/W；位位置：[1:0]；默认值：0；定时器增加时，事件TEZ触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_UTEZ    0x00000003U
#define MCPWM_GEN2_B_UTEZ_M  (MCPWM_GEN2_B_UTEZ_V << MCPWM_GEN2_B_UTEZ_S)
#define MCPWM_GEN2_B_UTEZ_V  0x00000003U
#define MCPWM_GEN2_B_UTEZ_S  0
/** MCPWM_GEN2_B_UTEP:R/W；位位置：[3:2]；默认值：0；定时器增加时，事件TEP触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_UTEP    0x00000003U
#define MCPWM_GEN2_B_UTEP_M  (MCPWM_GEN2_B_UTEP_V << MCPWM_GEN2_B_UTEP_S)
#define MCPWM_GEN2_B_UTEP_V  0x00000003U
#define MCPWM_GEN2_B_UTEP_S  2
/** MCPWM_GEN2_B_UTEA:R/W；比特位置：[5:4]；默认值：0；定时器增加时，事件TEA触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_UTEA    0x00000003U
#define MCPWM_GEN2_B_UTEA_M  (MCPWM_GEN2_B_UTEA_V << MCPWM_GEN2_B_UTEA_S)
#define MCPWM_GEN2_B_UTEA_V  0x00000003U
#define MCPWM_GEN2_B_UTEA_S  4
/** MCPWM_GEN2_B_UTEB:R/W；位位置：[7:6]；默认值：0；定时器增加时，事件TEB触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_UTEB    0x00000003U
#define MCPWM_GEN2_B_UTEB_M  (MCPWM_GEN2_B_UTEB_V << MCPWM_GEN2_B_UTEB_S)
#define MCPWM_GEN2_B_UTEB_V  0x00000003U
#define MCPWM_GEN2_B_UTEB_S  6
/** MCPWM_GEN2_B_UT0:R/W；比特位置：[9:8]；默认值：0；计时器增加时，事件_t0触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_UT0    0x00000003U
#define MCPWM_GEN2_B_UT0_M  (MCPWM_GEN2_B_UT0_V << MCPWM_GEN2_B_UT0_S)
#define MCPWM_GEN2_B_UT0_V  0x00000003U
#define MCPWM_GEN2_B_UT0_S  8
/** MCPWM_GEN2_B_UT1:R/W；比特位置：[11:10]；默认值：0；计时器增加时，事件_t1触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_UT1    0x00000003U
#define MCPWM_GEN2_B_UT1_M  (MCPWM_GEN2_B_UT1_V << MCPWM_GEN2_B_UT1_S)
#define MCPWM_GEN2_B_UT1_V  0x00000003U
#define MCPWM_GEN2_B_UT1_S  10
/** MCPWM_GEN2_B_DTEZ:R/W；比特位置：[13:12]；默认值：0；计时器减少时，事件TEZ触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_DTEZ    0x00000003U
#define MCPWM_GEN2_B_DTEZ_M  (MCPWM_GEN2_B_DTEZ_V << MCPWM_GEN2_B_DTEZ_S)
#define MCPWM_GEN2_B_DTEZ_V  0x00000003U
#define MCPWM_GEN2_B_DTEZ_S  12
/** MCPWM_GEN2_B_DTEP:R/W；比特位置：[15:14]；默认值：0；计时器减少时，事件TEP触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_DTEP    0x00000003U
#define MCPWM_GEN2_B_DTEP_M  (MCPWM_GEN2_B_DTEP_V << MCPWM_GEN2_B_DTEP_S)
#define MCPWM_GEN2_B_DTEP_V  0x00000003U
#define MCPWM_GEN2_B_DTEP_S  14
/** MCPWM_GEN2_B_DTEA:R/W；比特位置：[17:16]；默认值：0；定时器减少时，事件TEA触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_DTEA    0x00000003U
#define MCPWM_GEN2_B_DTEA_M  (MCPWM_GEN2_B_DTEA_V << MCPWM_GEN2_B_DTEA_S)
#define MCPWM_GEN2_B_DTEA_V  0x00000003U
#define MCPWM_GEN2_B_DTEA_S  16
/** MCPWM_GEN2_B_DTEB:R/W；比特位置：[19:18]；默认值：0；计时器减少时，事件TEB触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_DTEB    0x00000003U
#define MCPWM_GEN2_B_DTEB_M  (MCPWM_GEN2_B_DTEB_V << MCPWM_GEN2_B_DTEB_S)
#define MCPWM_GEN2_B_DTEB_V  0x00000003U
#define MCPWM_GEN2_B_DTEB_S  18
/** MCPWM_GEN2_B_DT0:R/W；比特位置：[21:20]；默认值：0；计时器减少时，事件_t0触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_DT0    0x00000003U
#define MCPWM_GEN2_B_DT0_M  (MCPWM_GEN2_B_DT0_V << MCPWM_GEN2_B_DT0_S)
#define MCPWM_GEN2_B_DT0_V  0x00000003U
#define MCPWM_GEN2_B_DT0_S  20
/** MCPWM_GEN2_B_DT1:R/W；比特位置：[23:22]；默认值：0；计时器减少时，事件_t1触发PWM2B上的动作。0：无变化，1：低，2：高，3：切换
 */
#define MCPWM_GEN2_B_DT1    0x00000003U
#define MCPWM_GEN2_B_DT1_M  (MCPWM_GEN2_B_DT1_V << MCPWM_GEN2_B_DT1_S)
#define MCPWM_GEN2_B_DT1_V  0x00000003U
#define MCPWM_GEN2_B_DT1_S  22

/** MCPWM_DT2_CFG_REG寄存器PWM发生器2停滞时间类型选择和配置
 */
#define MCPWM_DT2_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xc8)
/** MCPWM_DT2_FED_upmeth:R/W；位位置：[3:0]；默认值：0；FED（下降沿延迟）活动寄存器的更新方法。0：立即，当bit0设置为1:tez，当bit1设置为1:step，当bit2设置为1:sync，当bit 3设置为1时：禁用更新
 */
#define MCPWM_DT2_FED_UPMETHOD    0x0000000FU
#define MCPWM_DT2_FED_UPMETHOD_M  (MCPWM_DT2_FED_UPMETHOD_V << MCPWM_DT2_FED_UPMETHOD_S)
#define MCPWM_DT2_FED_UPMETHOD_V  0x0000000FU
#define MCPWM_DT2_FED_UPMETHOD_S  0
/** MCPWM_DT2_RED_upmeth:R/W；位位置：[7:4]；默认值：0；RED（上升沿延迟）活动寄存器的更新方法。0：立即，当bit0设置为1:tez，当bit1设置为1:step，当bit2设置为1:sync，当bit 3设置为1时：禁用更新
 */
#define MCPWM_DT2_RED_UPMETHOD    0x0000000FU
#define MCPWM_DT2_RED_UPMETHOD_M  (MCPWM_DT2_RED_UPMETHOD_V << MCPWM_DT2_RED_UPMETHOD_S)
#define MCPWM_DT2_RED_UPMETHOD_V  0x0000000FU
#define MCPWM_DT2_RED_UPMETHOD_S  4
/** MCPWM_DT2_DEB_MODE：R/W；位位置：[8]；默认值：0；表中S8，双边缘B模式，0：馈电/红色分别在不同路径上生效，1：馈电/蓝色在B路径上生效；A输出处于旁路或dulpB模式
 */
#define MCPWM_DT2_DEB_MODE    (BIT(8))
#define MCPWM_DT2_DEB_MODE_M  (MCPWM_DT2_DEB_MODE_V << MCPWM_DT2_DEB_MODE_S)
#define MCPWM_DT2_DEB_MODE_V  0x00000001U
#define MCPWM_DT2_DEB_MODE_S  8
/** MCPWM_DT2_A_OUTSWAP:R/W；位位置：[9]；默认值：0；表中的S6
 */
#define MCPWM_DT2_A_OUTSWAP    (BIT(9))
#define MCPWM_DT2_A_OUTSWAP_M  (MCPWM_DT2_A_OUTSWAP_V << MCPWM_DT2_A_OUTSWAP_S)
#define MCPWM_DT2_A_OUTSWAP_V  0x00000001U
#define MCPWM_DT2_A_OUTSWAP_S  9
/** MCPWM_DT2_B_OUTSWAP:R/W；位位置：[10]；默认值：0；表中S7
 */
#define MCPWM_DT2_B_OUTSWAP    (BIT(10))
#define MCPWM_DT2_B_OUTSWAP_M  (MCPWM_DT2_B_OUTSWAP_V << MCPWM_DT2_B_OUTSWAP_S)
#define MCPWM_DT2_B_OUTSWAP_V  0x00000001U
#define MCPWM_DT2_B_OUTSWAP_S  10
/** MCPWM_DT2_RED_INSEL：R/W；位位置：[11]；默认值：0；表中的S4
 */
#define MCPWM_DT2_RED_INSEL    (BIT(11))
#define MCPWM_DT2_RED_INSEL_M  (MCPWM_DT2_RED_INSEL_V << MCPWM_DT2_RED_INSEL_S)
#define MCPWM_DT2_RED_INSEL_V  0x00000001U
#define MCPWM_DT2_RED_INSEL_S  11
/** MCPWM_DT2_FED_INSEL：R/W；位位置：[12]；默认值：0；表中S5
 */
#define MCPWM_DT2_FED_INSEL    (BIT(12))
#define MCPWM_DT2_FED_INSEL_M  (MCPWM_DT2_FED_INSEL_V << MCPWM_DT2_FED_INSEL_S)
#define MCPWM_DT2_FED_INSEL_V  0x00000001U
#define MCPWM_DT2_FED_INSEL_S  12
/** MCPWM_DT2_RED_OUTINVERT:R/W；位位置：[13]；默认值：0；表中的S2
 */
#define MCPWM_DT2_RED_OUTINVERT    (BIT(13))
#define MCPWM_DT2_RED_OUTINVERT_M  (MCPWM_DT2_RED_OUTINVERT_V << MCPWM_DT2_RED_OUTINVERT_S)
#define MCPWM_DT2_RED_OUTINVERT_V  0x00000001U
#define MCPWM_DT2_RED_OUTINVERT_S  13
/** MCPWM_DT2_FED_OUTINVERT:R/W；位位置：[14]；默认值：0；表中的S3
 */
#define MCPWM_DT2_FED_OUTINVERT    (BIT(14))
#define MCPWM_DT2_FED_OUTINVERT_M  (MCPWM_DT2_FED_OUTINVERT_V << MCPWM_DT2_FED_OUTINVERT_S)
#define MCPWM_DT2_FED_OUTINVERT_V  0x00000001U
#define MCPWM_DT2_FED_OUTINVERT_S  14
/** MCPWM_DT2_A_outypass:R/W；位位置：[15]；默认值：1；表中的S1
 */
#define MCPWM_DT2_A_OUTBYPASS    (BIT(15))
#define MCPWM_DT2_A_OUTBYPASS_M  (MCPWM_DT2_A_OUTBYPASS_V << MCPWM_DT2_A_OUTBYPASS_S)
#define MCPWM_DT2_A_OUTBYPASS_V  0x00000001U
#define MCPWM_DT2_A_OUTBYPASS_S  15
/** MCPWM_DT2_B_outypass:R/W；位位置：[16]；默认值：1；表中S0
 */
#define MCPWM_DT2_B_OUTBYPASS    (BIT(16))
#define MCPWM_DT2_B_OUTBYPASS_M  (MCPWM_DT2_B_OUTBYPASS_V << MCPWM_DT2_B_OUTBYPASS_S)
#define MCPWM_DT2_B_OUTBYPASS_V  0x00000001U
#define MCPWM_DT2_B_OUTBYPASS_S  16
/** MCPWM_DT2_CLK_SEL:R/W；位位置：[17]；默认值：0；死区时间时钟选择。0:PWM_clk，1:PT_clk
 */
#define MCPWM_DT2_CLK_SEL    (BIT(17))
#define MCPWM_DT2_CLK_SEL_M  (MCPWM_DT2_CLK_SEL_V << MCPWM_DT2_CLK_SEL_S)
#define MCPWM_DT2_CLK_SEL_V  0x00000001U
#define MCPWM_DT2_CLK_SEL_S  17

/** MCPWM_DT2_FED_CFG_REG寄存器PWM发生器2下降沿延迟阴影寄存器（FED）。
 */
#define MCPWM_DT2_FED_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xcc)
/** MCPWM_DT2_FED:R/W；比特位置：[15:0]；默认值：0；FED的影子寄存器
 */
#define MCPWM_DT2_FED    0x0000FFFFU
#define MCPWM_DT2_FED_M  (MCPWM_DT2_FED_V << MCPWM_DT2_FED_S)
#define MCPWM_DT2_FED_V  0x0000FFFFU
#define MCPWM_DT2_FED_S  0

/** MCPWM_DT2_RED_CFG_REG寄存器PWM发生器2上升沿延迟阴影寄存器（RED）。
 */
#define MCPWM_DT2_RED_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xd0)
/** MCPWM_DT2_RED：R/W；比特位置：[15:0]；默认值：0；RED的影子寄存器
 */
#define MCPWM_DT2_RED    0x0000FFFFU
#define MCPWM_DT2_RED_M  (MCPWM_DT2_RED_V << MCPWM_DT2_RED_S)
#define MCPWM_DT2_RED_V  0x0000FFFFU
#define MCPWM_DT2_RED_S  0

/** MCPWM_CARRIR2_CFG_REG寄存器PWM发生器2载波启用和配置
 */
#define MCPWM_CARRIER2_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xd4)
/** MCPWM_CARRIER2_EN:R/W；位位置：[0]；默认值：0；设置后，载波2功能启用。清除后，绕过载波2
 */
#define MCPWM_CARRIER2_EN    (BIT(0))
#define MCPWM_CARRIER2_EN_M  (MCPWM_CARRIER2_EN_V << MCPWM_CARRIER2_EN_S)
#define MCPWM_CARRIER2_EN_V  0x00000001U
#define MCPWM_CARRIER2_EN_S  0
/** MCPWM_CARRIER2_比例：R/W；比特位置：[4:1]；默认值：0；PWM载波2时钟（PC_clk）预缩放值。PC_clk的周期=PWM_clk的周期（PWM_CARRIR0_PRESCALE+1）
 */
#define MCPWM_CARRIER2_PRESCALE    0x0000000FU
#define MCPWM_CARRIER2_PRESCALE_M  (MCPWM_CARRIER2_PRESCALE_V << MCPWM_CARRIER2_PRESCALE_S)
#define MCPWM_CARRIER2_PRESCALE_V  0x0000000FU
#define MCPWM_CARRIER2_PRESCALE_S  1
/** MCPWM_CARRIER2_DUTY:R/W；位位置：[7:5]；默认值：0；承运人职责选择。负载=PWM_CARRIR0_Duty/8
 */
#define MCPWM_CARRIER2_DUTY    0x00000007U
#define MCPWM_CARRIER2_DUTY_M  (MCPWM_CARRIER2_DUTY_V << MCPWM_CARRIER2_DUTY_S)
#define MCPWM_CARRIER2_DUTY_V  0x00000007U
#define MCPWM_CARRIER2_DUTY_S  5
/** MCPWM_CARRIER2_OSHTWTH:R/W；位位置：[11:8]；默认值：0；载波周期数中第一脉冲的宽度
 */
#define MCPWM_CARRIER2_OSHTWTH    0x0000000FU
#define MCPWM_CARRIER2_OSHTWTH_M  (MCPWM_CARRIER2_OSHTWTH_V << MCPWM_CARRIER2_OSHTWTH_S)
#define MCPWM_CARRIER2_OSHTWTH_V  0x0000000FU
#define MCPWM_CARRIER2_OSHTWTH_S  8
/** MCPWM_CARRIER2_OUT_INVERT:R/W；位位置：[12]；默认值：0；设置后，将该子模块的PWM2A和PWM2B的输出反相
 */
#define MCPWM_CARRIER2_OUT_INVERT    (BIT(12))
#define MCPWM_CARRIER2_OUT_INVERT_M  (MCPWM_CARRIER2_OUT_INVERT_V << MCPWM_CARRIER2_OUT_INVERT_S)
#define MCPWM_CARRIER2_OUT_INVERT_V  0x00000001U
#define MCPWM_CARRIER2_OUT_INVERT_S  12
/** MCPWM_CARRIER2_IN_INVERT:R/W；位位置：[13]；默认值：0；设置后，将该子模块的PWM2A和PWM2B的输入反相
 */
#define MCPWM_CARRIER2_IN_INVERT    (BIT(13))
#define MCPWM_CARRIER2_IN_INVERT_M  (MCPWM_CARRIER2_IN_INVERT_V << MCPWM_CARRIER2_IN_INVERT_S)
#define MCPWM_CARRIER2_IN_INVERT_V  0x00000001U
#define MCPWM_CARRIER2_IN_INVERT_S  13

/** MCPWM_FH2_CFG0_REG寄存器PWM2A和PWM2B跳闸事件的动作
 */
#define MCPWM_FH2_CFG0_REG(i) (DR_REG_MCPWM_BASE(i) + 0xd8)
/** MCPWM_FH2_SW_CBC:R/W；位位置：[0]；默认值：0；启用软件强制循环模式动作的寄存器。0：禁用，1：启用
 */
#define MCPWM_FH2_SW_CBC    (BIT(0))
#define MCPWM_FH2_SW_CBC_M  (MCPWM_FH2_SW_CBC_V << MCPWM_FH2_SW_CBC_S)
#define MCPWM_FH2_SW_CBC_V  0x00000001U
#define MCPWM_FH2_SW_CBC_S  0
/** MCPWM_FH2_F2_CBC:R/W；位位置：[1]；默认值：0；fault_event2将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH2_F2_CBC    (BIT(1))
#define MCPWM_FH2_F2_CBC_M  (MCPWM_FH2_F2_CBC_V << MCPWM_FH2_F2_CBC_S)
#define MCPWM_FH2_F2_CBC_V  0x00000001U
#define MCPWM_FH2_F2_CBC_S  1
/** MCPWM_FH2_F1_CBC:R/W；位位置：[2]；默认值：0；fault_event1将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH2_F1_CBC    (BIT(2))
#define MCPWM_FH2_F1_CBC_M  (MCPWM_FH2_F1_CBC_V << MCPWM_FH2_F1_CBC_S)
#define MCPWM_FH2_F1_CBC_V  0x00000001U
#define MCPWM_FH2_F1_CBC_S  2
/** MCPWM_FH2_F0_CBC:R/W；位位置：[3]；默认值：0；fault_event0将触发逐周期模式动作。0：禁用，1：启用
 */
#define MCPWM_FH2_F0_CBC    (BIT(3))
#define MCPWM_FH2_F0_CBC_M  (MCPWM_FH2_F0_CBC_V << MCPWM_FH2_F0_CBC_S)
#define MCPWM_FH2_F0_CBC_V  0x00000001U
#define MCPWM_FH2_F0_CBC_S  3
/** MCPWM_FH2_SW_OST:R/W；位位置：[4]；默认值：0；启用软件强制单触发模式动作的寄存器。0：禁用，1：启用
 */
#define MCPWM_FH2_SW_OST    (BIT(4))
#define MCPWM_FH2_SW_OST_M  (MCPWM_FH2_SW_OST_V << MCPWM_FH2_SW_OST_S)
#define MCPWM_FH2_SW_OST_V  0x00000001U
#define MCPWM_FH2_SW_OST_S  4
/** MCPWM_FH2_F2_OST:R/W；位位置：[5]；默认值：0；fault_event2将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH2_F2_OST    (BIT(5))
#define MCPWM_FH2_F2_OST_M  (MCPWM_FH2_F2_OST_V << MCPWM_FH2_F2_OST_S)
#define MCPWM_FH2_F2_OST_V  0x00000001U
#define MCPWM_FH2_F2_OST_S  5
/** MCPWM_FH2_F1_OST:R/W；位位置：[6]；默认值：0；fault_event1将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH2_F1_OST    (BIT(6))
#define MCPWM_FH2_F1_OST_M  (MCPWM_FH2_F1_OST_V << MCPWM_FH2_F1_OST_S)
#define MCPWM_FH2_F1_OST_V  0x00000001U
#define MCPWM_FH2_F1_OST_S  6
/** MCPWM_FH2_F0_OST:R/W；位位置：[7]；默认值：0；fault_event0将触发单触发模式动作。0：禁用，1：启用
 */
#define MCPWM_FH2_F0_OST    (BIT(7))
#define MCPWM_FH2_F0_OST_M  (MCPWM_FH2_F0_OST_V << MCPWM_FH2_F0_OST_S)
#define MCPWM_FH2_F0_OST_V  0x00000001U
#define MCPWM_FH2_F0_OST_S  7
/** MCPWM_FH2_A_CBC_D:R/W；比特位置：[9:8]；默认值：0；当故障事件发生且计时器正在减少时，PWM2A上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH2_A_CBC_D    0x00000003U
#define MCPWM_FH2_A_CBC_D_M  (MCPWM_FH2_A_CBC_D_V << MCPWM_FH2_A_CBC_D_S)
#define MCPWM_FH2_A_CBC_D_V  0x00000003U
#define MCPWM_FH2_A_CBC_D_S  8
/** MCPWM_FH2_A_CBC_U:R/W；比特位置：[11:10]；默认值：0；当故障事件发生且计时器增加时，PWM2A上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH2_A_CBC_U    0x00000003U
#define MCPWM_FH2_A_CBC_U_M  (MCPWM_FH2_A_CBC_U_V << MCPWM_FH2_A_CBC_U_S)
#define MCPWM_FH2_A_CBC_U_V  0x00000003U
#define MCPWM_FH2_A_CBC_U_S  10
/** MCPWM_FH2_A_OST_D:R/W；比特位置：[13:12]；默认值：0；当发生故障事件且计时器正在减少时，PWM2A上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH2_A_OST_D    0x00000003U
#define MCPWM_FH2_A_OST_D_M  (MCPWM_FH2_A_OST_D_V << MCPWM_FH2_A_OST_D_S)
#define MCPWM_FH2_A_OST_D_V  0x00000003U
#define MCPWM_FH2_A_OST_D_S  12
/** MCPWM_FH2_A_OST_U:R/W；比特位置：[15:14]；默认值：0；当故障事件发生且计时器增加时，PWM2A上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH2_A_OST_U    0x00000003U
#define MCPWM_FH2_A_OST_U_M  (MCPWM_FH2_A_OST_U_V << MCPWM_FH2_A_OST_U_S)
#define MCPWM_FH2_A_OST_U_V  0x00000003U
#define MCPWM_FH2_A_OST_U_S  14
/** MCPWM_FH2_bcbc_D:R/W；比特位置：[17:16]；默认值：0；当故障事件发生且计时器正在减少时，PWM2B上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH2_B_CBC_D    0x00000003U
#define MCPWM_FH2_B_CBC_D_M  (MCPWM_FH2_B_CBC_D_V << MCPWM_FH2_B_CBC_D_S)
#define MCPWM_FH2_B_CBC_D_V  0x00000003U
#define MCPWM_FH2_B_CBC_D_S  16
/** MCPWM_FH2_bcbc_U:R/W；比特位置：[19:18]；默认值：0；当故障事件发生且计时器增加时，PWM2B上的循环模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH2_B_CBC_U    0x00000003U
#define MCPWM_FH2_B_CBC_U_M  (MCPWM_FH2_B_CBC_U_V << MCPWM_FH2_B_CBC_U_S)
#define MCPWM_FH2_B_CBC_U_V  0x00000003U
#define MCPWM_FH2_B_CBC_U_S  18
/** MCPWM_FH2_B_OST_D:R/W；比特位置：[21:20]；默认值：0；当发生故障事件且计时器正在减少时，PWM2B上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH2_B_OST_D    0x00000003U
#define MCPWM_FH2_B_OST_D_M  (MCPWM_FH2_B_OST_D_V << MCPWM_FH2_B_OST_D_S)
#define MCPWM_FH2_B_OST_D_V  0x00000003U
#define MCPWM_FH2_B_OST_D_S  20
/** MCPWM_FH2_B_OST_U:R/W；比特位置：[23:22]；默认值：0；当故障事件发生且计时器增加时，PWM2B上的单次模式动作。0：不执行任何操作，1：强制低，2：强制高，3：切换
 */
#define MCPWM_FH2_B_OST_U    0x00000003U
#define MCPWM_FH2_B_OST_U_M  (MCPWM_FH2_B_OST_U_V << MCPWM_FH2_B_OST_U_S)
#define MCPWM_FH2_B_OST_U_V  0x00000003U
#define MCPWM_FH2_B_OST_U_S  22

/** MCPWM_FH2_CFG1_REG寄存器故障处理程序操作的软件触发器
 */
#define MCPWM_FH2_CFG1_REG(i) (DR_REG_MCPWM_BASE(i) + 0xdc)
/** MCPWM_FH2_CLR_OST:R/W；位位置：[0]；默认值：0；在进行一次射击模式动作时，上升沿将消失
 */
#define MCPWM_FH2_CLR_OST    (BIT(0))
#define MCPWM_FH2_CLR_OST_M  (MCPWM_FH2_CLR_OST_V << MCPWM_FH2_CLR_OST_S)
#define MCPWM_FH2_CLR_OST_V  0x00000001U
#define MCPWM_FH2_CLR_OST_S  0
/** MCPWM_FH2_CBCPULSE:R/W；位位置：[2:1]；默认值：0；逐周期模式动作刷新时刻选择。当位0设置为1:TEZ时，当位1设置为1:TECP时
 */
#define MCPWM_FH2_CBCPULSE    0x00000003U
#define MCPWM_FH2_CBCPULSE_M  (MCPWM_FH2_CBCPULSE_V << MCPWM_FH2_CBCPULSE_S)
#define MCPWM_FH2_CBCPULSE_V  0x00000003U
#define MCPWM_FH2_CBCPULSE_S  1
/** MCPWM_FH2-FORCE_CBC:R/W；位位置：[3]；默认值：0；触发一个循环一个循环的模式动作
 */
#define MCPWM_FH2_FORCE_CBC    (BIT(3))
#define MCPWM_FH2_FORCE_CBC_M  (MCPWM_FH2_FORCE_CBC_V << MCPWM_FH2_FORCE_CBC_S)
#define MCPWM_FH2_FORCE_CBC_V  0x00000001U
#define MCPWM_FH2_FORCE_CBC_S  3
/** MCPWM_FH2_FORCE_OST:R/W；位位置：[4]；默认值：0；切换（软件否定其值）触发单次模式动作
 */
#define MCPWM_FH2_FORCE_OST    (BIT(4))
#define MCPWM_FH2_FORCE_OST_M  (MCPWM_FH2_FORCE_OST_V << MCPWM_FH2_FORCE_OST_S)
#define MCPWM_FH2_FORCE_OST_V  0x00000001U
#define MCPWM_FH2_FORCE_OST_S  4

/** MCPWM_FH2_STATUS_REG寄存器故障事件状态。
 */
#define MCPWM_FH2_STATUS_REG(i) (DR_REG_MCPWM_BASE(i) + 0xe0)
/** MCPWM_FH2_CBC-ON:RO；位位置：[0]；默认值：0；通过硬件设置和重置。如果设置，则循环模式操作正在进行
 */
#define MCPWM_FH2_CBC_ON    (BIT(0))
#define MCPWM_FH2_CBC_ON_M  (MCPWM_FH2_CBC_ON_V << MCPWM_FH2_CBC_ON_S)
#define MCPWM_FH2_CBC_ON_V  0x00000001U
#define MCPWM_FH2_CBC_ON_S  0
/** MCPWM_FH2_OST_ON:RO；位位置：[1]；默认值：0；通过硬件设置和重置。如果设置，则一次拍摄模式动作正在进行
 */
#define MCPWM_FH2_OST_ON    (BIT(1))
#define MCPWM_FH2_OST_ON_M  (MCPWM_FH2_OST_ON_V << MCPWM_FH2_OST_ON_S)
#define MCPWM_FH2_OST_ON_V  0x00000001U
#define MCPWM_FH2_OST_ON_S  1

/** MCPWM_FAULT_DETECT_REG寄存器故障检测配置和状态
 */
#define MCPWM_FAULT_DETECT_REG(i) (DR_REG_MCPWM_BASE(i) + 0xe4)
/** MCPWM_F0_EN:R/W；位位置：[0]；默认值：0；设置后，将启用fault_event0生成
 */
#define MCPWM_F0_EN    (BIT(0))
#define MCPWM_F0_EN_M  (MCPWM_F0_EN_V << MCPWM_F0_EN_S)
#define MCPWM_F0_EN_V  0x00000001U
#define MCPWM_F0_EN_S  0
/** MCPWM_F1_EN:R/W；位位置：[1]；默认值：0；设置后，将启用fault_event1生成
 */
#define MCPWM_F1_EN    (BIT(1))
#define MCPWM_F1_EN_M  (MCPWM_F1_EN_V << MCPWM_F1_EN_S)
#define MCPWM_F1_EN_V  0x00000001U
#define MCPWM_F1_EN_S  1
/** MCPWM_F2_EN:R/W；位位置：[2]；默认值：0；设置后，将启用fault_event2生成
 */
#define MCPWM_F2_EN    (BIT(2))
#define MCPWM_F2_EN_M  (MCPWM_F2_EN_V << MCPWM_F2_EN_S)
#define MCPWM_F2_EN_V  0x00000001U
#define MCPWM_F2_EN_S  2
/** MCPWM_F0_极：R/W；位位置：[3]；默认值：0；在GPIO矩阵的FAULT2源上设置fault_event0触发极性。0：级别低，1：级别高
 */
#define MCPWM_F0_POLE    (BIT(3))
#define MCPWM_F0_POLE_M  (MCPWM_F0_POLE_V << MCPWM_F0_POLE_S)
#define MCPWM_F0_POLE_V  0x00000001U
#define MCPWM_F0_POLE_S  3
/** MCPWM_F1_POLE：R/W；位位置：[4]；默认值：0；在GPIO矩阵的FAULT2源上设置fault_event1触发极性。0：级别低，1：级别高
 */
#define MCPWM_F1_POLE    (BIT(4))
#define MCPWM_F1_POLE_M  (MCPWM_F1_POLE_V << MCPWM_F1_POLE_S)
#define MCPWM_F1_POLE_V  0x00000001U
#define MCPWM_F1_POLE_S  4
/** MCPWM_F2_POLE：R/W；位位置：[5]；默认值：0；在GPIO矩阵的FAULT2源上设置fault_event2触发极性。0：级别低，1：级别高
 */
#define MCPWM_F2_POLE    (BIT(5))
#define MCPWM_F2_POLE_M  (MCPWM_F2_POLE_V << MCPWM_F2_POLE_S)
#define MCPWM_F2_POLE_V  0x00000001U
#define MCPWM_F2_POLE_S  5
/** MCPWM_EVENT_F0:RO；位位置：[6]；默认值：0；通过硬件设置和重置。如果设置，则fault_event0正在运行
 */
#define MCPWM_EVENT_F0    (BIT(6))
#define MCPWM_EVENT_F0_M  (MCPWM_EVENT_F0_V << MCPWM_EVENT_F0_S)
#define MCPWM_EVENT_F0_V  0x00000001U
#define MCPWM_EVENT_F0_S  6
/** MCPWM_EVENT_F1:RO；位位置：[7]；默认值：0；通过硬件设置和重置。如果设置，则fault_event1正在运行
 */
#define MCPWM_EVENT_F1    (BIT(7))
#define MCPWM_EVENT_F1_M  (MCPWM_EVENT_F1_V << MCPWM_EVENT_F1_S)
#define MCPWM_EVENT_F1_V  0x00000001U
#define MCPWM_EVENT_F1_S  7
/** MCPWM_EVENT_F2:RO；位位置：[8]；默认值：0；通过硬件设置和重置。如果设置，则fault_event2正在运行
 */
#define MCPWM_EVENT_F2    (BIT(8))
#define MCPWM_EVENT_F2_M  (MCPWM_EVENT_F2_V << MCPWM_EVENT_F2_S)
#define MCPWM_EVENT_F2_V  0x00000001U
#define MCPWM_EVENT_F2_S  8

/** MCPWM_CAP_TIMER_CFG_REG寄存器配置捕获计时器
 */
#define MCPWM_CAP_TIMER_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xe8)
/** MCPWM_CAP_TIMER_EN:R/W；位位置：[0]；默认值：0；设置后，启用APB_clk下的捕获计时器递增。
 */
#define MCPWM_CAP_TIMER_EN    (BIT(0))
#define MCPWM_CAP_TIMER_EN_M  (MCPWM_CAP_TIMER_EN_V << MCPWM_CAP_TIMER_EN_S)
#define MCPWM_CAP_TIMER_EN_V  0x00000001U
#define MCPWM_CAP_TIMER_EN_S  0
/** MCPWM_CAP_SYNCI_EN:R/W；位位置：[1]；默认值：0；设置后，将启用捕获计时器同步。
 */
#define MCPWM_CAP_SYNCI_EN    (BIT(1))
#define MCPWM_CAP_SYNCI_EN_M  (MCPWM_CAP_SYNCI_EN_V << MCPWM_CAP_SYNCI_EN_S)
#define MCPWM_CAP_SYNCI_EN_V  0x00000001U
#define MCPWM_CAP_SYNCI_EN_S  1
/** MCPWM_CAP_SYNCI_SEL:R/W；位位置：[4:2]；默认值：0；捕获模块同步输入选择。0:无，1:timer0同步输出，2:timer1同步输出，3:timer2同步输出，4:GPIO矩阵的SYNC0，5:GPIO矩阵中的SYNC1，6:GPIO矩阵上的SYNC2
 */
#define MCPWM_CAP_SYNCI_SEL    0x00000007U
#define MCPWM_CAP_SYNCI_SEL_M  (MCPWM_CAP_SYNCI_SEL_V << MCPWM_CAP_SYNCI_SEL_S)
#define MCPWM_CAP_SYNCI_SEL_V  0x00000007U
#define MCPWM_CAP_SYNCI_SEL_S  2
/** MCPWM_CAP_SYNC_SW:WT；位位置：[5]；默认值：0；当reg_cap_synci_en为1时，write 1将触发捕获计时器同步，捕获计时器将加载相位寄存器中的值。
 */
#define MCPWM_CAP_SYNC_SW    (BIT(5))
#define MCPWM_CAP_SYNC_SW_M  (MCPWM_CAP_SYNC_SW_V << MCPWM_CAP_SYNC_SW_S)
#define MCPWM_CAP_SYNC_SW_V  0x00000001U
#define MCPWM_CAP_SYNC_SW_S  5

/** MCPWM_CAP_TIMER_PHASE_REG寄存器捕获计时器同步的相位
 */
#define MCPWM_CAP_TIMER_PHASE_REG(i) (DR_REG_MCPWM_BASE(i) + 0xec)
/** MCPWM_CAP_TIMER_PHASE:R/W；位位置：[31:0]；默认值：0；捕获计时器同步操作的相位值。
 */
#define MCPWM_CAP_TIMER_PHASE    0xFFFFFFFFU
#define MCPWM_CAP_TIMER_PHASE_M  (MCPWM_CAP_TIMER_PHASE_V << MCPWM_CAP_TIMER_PHASE_S)
#define MCPWM_CAP_TIMER_PHASE_V  0xFFFFFFFFU
#define MCPWM_CAP_TIMER_PHASE_S  0

/** MCPWM_CAP_CH0_CFG_REG寄存器捕获通道0配置并启用
 */
#define MCPWM_CAP_CH0_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xf0)
/** MCPWM_CAP0_EN:R/W；位位置：[0]；默认值：0；设置后，启用通道0上的捕获
 */
#define MCPWM_CAP0_EN    (BIT(0))
#define MCPWM_CAP0_EN_M  (MCPWM_CAP0_EN_V << MCPWM_CAP0_EN_S)
#define MCPWM_CAP0_EN_V  0x00000001U
#define MCPWM_CAP0_EN_S  0
/** MCPWM_CAP0_MODE：R/W；位位置：[2:1]；默认值：0；预缩放后通道0上的捕获边缘。当bit0设置为1时：在负边缘启用捕获，当bit1设置为1：在正边缘启用捕获。
 */
#define MCPWM_CAP0_MODE    0x00000003U
#define MCPWM_CAP0_MODE_M  (MCPWM_CAP0_MODE_V << MCPWM_CAP0_MODE_S)
#define MCPWM_CAP0_MODE_V  0x00000003U
#define MCPWM_CAP0_MODE_S  1
/** MCPWM_CAP0_PRESCALE：R/W；比特位置：[10:3]；默认值：0；CAP0可能边缘上的预缩放值。预缩放值=PWM_CAP0_Prescale+1
 */
#define MCPWM_CAP0_PRESCALE    0x000000FFU
#define MCPWM_CAP0_PRESCALE_M  (MCPWM_CAP0_PRESCALE_V << MCPWM_CAP0_PRESCALE_S)
#define MCPWM_CAP0_PRESCALE_V  0x000000FFU
#define MCPWM_CAP0_PRESCALE_S  3
/** MCPWM_CAP0_IN_INVERT:R/W；位位置：[11]；默认值：0；设置后，CAP0形式的GPIO矩阵在预缩放前反转
 */
#define MCPWM_CAP0_IN_INVERT    (BIT(11))
#define MCPWM_CAP0_IN_INVERT_M  (MCPWM_CAP0_IN_INVERT_V << MCPWM_CAP0_IN_INVERT_S)
#define MCPWM_CAP0_IN_INVERT_V  0x00000001U
#define MCPWM_CAP0_IN_INVERT_S  11
/** MCPWM_CAP0_SW:WT；位位置：[12]；默认值：0；写入1将触发通道0上的软件强制捕获
 */
#define MCPWM_CAP0_SW    (BIT(12))
#define MCPWM_CAP0_SW_M  (MCPWM_CAP0_SW_V << MCPWM_CAP0_SW_S)
#define MCPWM_CAP0_SW_V  0x00000001U
#define MCPWM_CAP0_SW_S  12

/** MCPWM_CAP_CH1_CFG_REG寄存器捕获通道1配置并启用
 */
#define MCPWM_CAP_CH1_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xf4)
/** MCPWM_CAP1_EN:R/W；位位置：[0]；默认值：0；设置后，启用通道2上的捕获
 */
#define MCPWM_CAP1_EN    (BIT(0))
#define MCPWM_CAP1_EN_M  (MCPWM_CAP1_EN_V << MCPWM_CAP1_EN_S)
#define MCPWM_CAP1_EN_V  0x00000001U
#define MCPWM_CAP1_EN_S  0
/** MCPWM_CAP1_MODE：R/W；位位置：[2:1]；默认值：0；预缩放后通道1上的捕获边缘。当bit0设置为1时：在负边缘启用捕获，当bit1设置为1：在正边缘启用捕获。
 */
#define MCPWM_CAP1_MODE    0x00000003U
#define MCPWM_CAP1_MODE_M  (MCPWM_CAP1_MODE_V << MCPWM_CAP1_MODE_S)
#define MCPWM_CAP1_MODE_V  0x00000003U
#define MCPWM_CAP1_MODE_S  1
/** MCPWM_CAP1_PRESCALE:R/W；比特位置：[10:3]；默认值：0；CAP1可能边缘上的预缩放值。预缩放值=PWM_CAP1_Prescale+1
 */
#define MCPWM_CAP1_PRESCALE    0x000000FFU
#define MCPWM_CAP1_PRESCALE_M  (MCPWM_CAP1_PRESCALE_V << MCPWM_CAP1_PRESCALE_S)
#define MCPWM_CAP1_PRESCALE_V  0x000000FFU
#define MCPWM_CAP1_PRESCALE_S  3
/** MCPWM_CAP1_IN_INVERT:R/W；位位置：[11]；默认值：0；设置后，CAP1形式的GPIO矩阵在预缩放前反转
 */
#define MCPWM_CAP1_IN_INVERT    (BIT(11))
#define MCPWM_CAP1_IN_INVERT_M  (MCPWM_CAP1_IN_INVERT_V << MCPWM_CAP1_IN_INVERT_S)
#define MCPWM_CAP1_IN_INVERT_V  0x00000001U
#define MCPWM_CAP1_IN_INVERT_S  11
/** MCPWM_CAP1_SW:WT；位位置：[12]；默认值：0；写入1将触发通道1上的软件强制捕获
 */
#define MCPWM_CAP1_SW    (BIT(12))
#define MCPWM_CAP1_SW_M  (MCPWM_CAP1_SW_V << MCPWM_CAP1_SW_S)
#define MCPWM_CAP1_SW_V  0x00000001U
#define MCPWM_CAP1_SW_S  12

/** MCPWM_CAP_CH2_CFG_REG寄存器捕获通道2配置并启用
 */
#define MCPWM_CAP_CH2_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0xf8)
/** MCPWM_CAP2_EN:R/W；位位置：[0]；默认值：0；设置后，启用通道2上的捕获
 */
#define MCPWM_CAP2_EN    (BIT(0))
#define MCPWM_CAP2_EN_M  (MCPWM_CAP2_EN_V << MCPWM_CAP2_EN_S)
#define MCPWM_CAP2_EN_V  0x00000001U
#define MCPWM_CAP2_EN_S  0
/** MCPWM_CAP2_MODE:R/W；位位置：[2:1]；默认值：0；预缩放后通道2上的捕获边缘。当bit0设置为1时：在负边缘启用捕获，当bit1设置为1：在正边缘启用捕获。
 */
#define MCPWM_CAP2_MODE    0x00000003U
#define MCPWM_CAP2_MODE_M  (MCPWM_CAP2_MODE_V << MCPWM_CAP2_MODE_S)
#define MCPWM_CAP2_MODE_V  0x00000003U
#define MCPWM_CAP2_MODE_S  1
/** MCPWM_CAP2_PRESCALE:R/W；比特位置：[10:3]；默认值：0；CAP2可能边缘上的预缩放值。预缩放值=PWM_CAP2_Prescale+1
 */
#define MCPWM_CAP2_PRESCALE    0x000000FFU
#define MCPWM_CAP2_PRESCALE_M  (MCPWM_CAP2_PRESCALE_V << MCPWM_CAP2_PRESCALE_S)
#define MCPWM_CAP2_PRESCALE_V  0x000000FFU
#define MCPWM_CAP2_PRESCALE_S  3
/** MCPWM_CAP2_IN_INVERT:R/W；位位置：[11]；默认值：0；设置后，CAP2形式的GPIO矩阵在预缩放前反转
 */
#define MCPWM_CAP2_IN_INVERT    (BIT(11))
#define MCPWM_CAP2_IN_INVERT_M  (MCPWM_CAP2_IN_INVERT_V << MCPWM_CAP2_IN_INVERT_S)
#define MCPWM_CAP2_IN_INVERT_V  0x00000001U
#define MCPWM_CAP2_IN_INVERT_S  11
/** MCPWM_CAP2_SW:WT；位位置：[12]；默认值：0；写入1将触发通道2上的软件强制捕获
 */
#define MCPWM_CAP2_SW    (BIT(12))
#define MCPWM_CAP2_SW_M  (MCPWM_CAP2_SW_V << MCPWM_CAP2_SW_S)
#define MCPWM_CAP2_SW_V  0x00000001U
#define MCPWM_CAP2_SW_S  12

/** MCPWM_CAP_CH0_REG寄存器CH0捕获值状态寄存器
 */
#define MCPWM_CAP_CH0_REG(i) (DR_REG_MCPWM_BASE(i) + 0xfc)
/** MCPWM_CAP0_VALUE:RO；位位置：[31:0]；默认值：0；通道0上上次捕获的值
 */
#define MCPWM_CAP0_VALUE    0xFFFFFFFFU
#define MCPWM_CAP0_VALUE_M  (MCPWM_CAP0_VALUE_V << MCPWM_CAP0_VALUE_S)
#define MCPWM_CAP0_VALUE_V  0xFFFFFFFFU
#define MCPWM_CAP0_VALUE_S  0

/** MCPWM_CAP_CH1_REG寄存器CH1捕获值状态寄存器
 */
#define MCPWM_CAP_CH1_REG(i) (DR_REG_MCPWM_BASE(i) + 0x100)
/** MCPWM_CAP1_VALUE:RO；位位置：[31:0]；默认值：0；通道1上最后一次捕获的值
 */
#define MCPWM_CAP1_VALUE    0xFFFFFFFFU
#define MCPWM_CAP1_VALUE_M  (MCPWM_CAP1_VALUE_V << MCPWM_CAP1_VALUE_S)
#define MCPWM_CAP1_VALUE_V  0xFFFFFFFFU
#define MCPWM_CAP1_VALUE_S  0

/** MCPWM_CAP_CH2_REG寄存器CH2捕获值状态寄存器
 */
#define MCPWM_CAP_CH2_REG(i) (DR_REG_MCPWM_BASE(i) + 0x104)
/** MCPWM_CAP2_VALUE:RO；位位置：[31:0]；默认值：0；通道2上最后一次捕获的值
 */
#define MCPWM_CAP2_VALUE    0xFFFFFFFFU
#define MCPWM_CAP2_VALUE_M  (MCPWM_CAP2_VALUE_V << MCPWM_CAP2_VALUE_S)
#define MCPWM_CAP2_VALUE_V  0xFFFFFFFFU
#define MCPWM_CAP2_VALUE_S  0

/** MCPWM_CAP_STATUS_REG寄存器上次捕获触发器的边缘
 */
#define MCPWM_CAP_STATUS_REG(i) (DR_REG_MCPWM_BASE(i) + 0x108)
/** MCPWM_cap0edge:RO；位位置：[0]；默认值：0；通道0上最后一次捕获触发的边缘，0：边缘，1：负边缘
 */
#define MCPWM_CAP0_EDGE    (BIT(0))
#define MCPWM_CAP0_EDGE_M  (MCPWM_CAP0_EDGE_V << MCPWM_CAP0_EDGE_S)
#define MCPWM_CAP0_EDGE_V  0x00000001U
#define MCPWM_CAP0_EDGE_S  0
/** MCPWM_CAP1_EDGE:RO；位位置：[1]；默认值：0；通道1上最后一次捕获触发的边缘，0：边缘，1：负边缘
 */
#define MCPWM_CAP1_EDGE    (BIT(1))
#define MCPWM_CAP1_EDGE_M  (MCPWM_CAP1_EDGE_V << MCPWM_CAP1_EDGE_S)
#define MCPWM_CAP1_EDGE_V  0x00000001U
#define MCPWM_CAP1_EDGE_S  1
/** MCPWM_CAP2_EDGE:RO；位位置：[2]；默认值：0；通道2上最后一次捕获触发的边缘，0：边缘，1：负边缘
 */
#define MCPWM_CAP2_EDGE    (BIT(2))
#define MCPWM_CAP2_EDGE_M  (MCPWM_CAP2_EDGE_V << MCPWM_CAP2_EDGE_S)
#define MCPWM_CAP2_EDGE_V  0x00000001U
#define MCPWM_CAP2_EDGE_S  2

/** MCPWM_UPDATE_CFG_REG寄存器启用更新。
 */
#define MCPWM_UPDATE_CFG_REG(i) (DR_REG_MCPWM_BASE(i) + 0x10c)
/** MCPWM_GLOBAL_UP_EN:R/W；位位置：[0]；默认值：1；MCPWM模块中所有活动寄存器的全局启用更新
 */
#define MCPWM_GLOBAL_UP_EN    (BIT(0))
#define MCPWM_GLOBAL_UP_EN_M  (MCPWM_GLOBAL_UP_EN_V << MCPWM_GLOBAL_UP_EN_S)
#define MCPWM_GLOBAL_UP_EN_V  0x00000001U
#define MCPWM_GLOBAL_UP_EN_S  0
/** MCPWM_GLOBAL_FORCE_UP:R/W；位位置：[1]；默认值：0；触发（软件反转其值）将触发MCPWM模块中所有活动寄存器的强制更新
 */
#define MCPWM_GLOBAL_FORCE_UP    (BIT(1))
#define MCPWM_GLOBAL_FORCE_UP_M  (MCPWM_GLOBAL_FORCE_UP_V << MCPWM_GLOBAL_FORCE_UP_S)
#define MCPWM_GLOBAL_FORCE_UP_V  0x00000001U
#define MCPWM_GLOBAL_FORCE_UP_S  1
/** MCPWM_OP0_UP_EN:R/W；位位置：[2]；默认值：1；当设置且设置了PWM_GLOBAL_UP_EN时，启用PWM运算符0中的活动寄存器更新
 */
#define MCPWM_OP0_UP_EN    (BIT(2))
#define MCPWM_OP0_UP_EN_M  (MCPWM_OP0_UP_EN_V << MCPWM_OP0_UP_EN_S)
#define MCPWM_OP0_UP_EN_V  0x00000001U
#define MCPWM_OP0_UP_EN_S  2
/** MCPWM_OP0_FORCE_UP:R/W；位位置：[3]；默认值：0；触发（软件反转其值）将触发PWM运算器0中活动寄存器的强制更新
 */
#define MCPWM_OP0_FORCE_UP    (BIT(3))
#define MCPWM_OP0_FORCE_UP_M  (MCPWM_OP0_FORCE_UP_V << MCPWM_OP0_FORCE_UP_S)
#define MCPWM_OP0_FORCE_UP_V  0x00000001U
#define MCPWM_OP0_FORCE_UP_S  3
/** MCPWM_OP1_UP_EN:R/W；位位置：[4]；默认值：1；当设置且设置了PWM_GLOBAL_UP_EN时，启用PWM运算符1中的活动寄存器更新
 */
#define MCPWM_OP1_UP_EN    (BIT(4))
#define MCPWM_OP1_UP_EN_M  (MCPWM_OP1_UP_EN_V << MCPWM_OP1_UP_EN_S)
#define MCPWM_OP1_UP_EN_V  0x00000001U
#define MCPWM_OP1_UP_EN_S  4
/** MCPWM_OP1_FORCE_UP:R/W；位位置：[5]；默认值：0；触发（软件反转其值）将触发PWM运算器1中活动寄存器的强制更新
 */
#define MCPWM_OP1_FORCE_UP    (BIT(5))
#define MCPWM_OP1_FORCE_UP_M  (MCPWM_OP1_FORCE_UP_V << MCPWM_OP1_FORCE_UP_S)
#define MCPWM_OP1_FORCE_UP_V  0x00000001U
#define MCPWM_OP1_FORCE_UP_S  5
/** MCPWM_OP2_UP_EN:R/W；位位置：[6]；默认值：1；当设置且设置了PWM_GLOBAL_UP_EN时，启用PWM运算符2中的活动寄存器更新
 */
#define MCPWM_OP2_UP_EN    (BIT(6))
#define MCPWM_OP2_UP_EN_M  (MCPWM_OP2_UP_EN_V << MCPWM_OP2_UP_EN_S)
#define MCPWM_OP2_UP_EN_V  0x00000001U
#define MCPWM_OP2_UP_EN_S  6
/** MCPWM_OP2_FORCE_UP:R/W；位位置：[7]；默认值：0；触发（软件反转其值）将触发PWM运算器2中活动寄存器的强制更新
 */
#define MCPWM_OP2_FORCE_UP    (BIT(7))
#define MCPWM_OP2_FORCE_UP_M  (MCPWM_OP2_FORCE_UP_V << MCPWM_OP2_FORCE_UP_S)
#define MCPWM_OP2_FORCE_UP_V  0x00000001U
#define MCPWM_OP2_FORCE_UP_S  7

/** MCPWM_INT_ENA_REG寄存器中断启用位
 */
#define MCPWM_INT_ENA_REG(i) (DR_REG_MCPWM_BASE(i) + 0x110)
/** MCPWM_TIMER0_STOP_INT_ENA:R/W；位位置：[0]；默认值：0；计时器0停止时触发的中断的启用位。
 */
#define MCPWM_TIMER0_STOP_INT_ENA    (BIT(0))
#define MCPWM_TIMER0_STOP_INT_ENA_M  (MCPWM_TIMER0_STOP_INT_ENA_V << MCPWM_TIMER0_STOP_INT_ENA_S)
#define MCPWM_TIMER0_STOP_INT_ENA_V  0x00000001U
#define MCPWM_TIMER0_STOP_INT_ENA_S  0
/** MCPWM_TIMER1_STOP_INT_ENA:R/W；位位置：[1]；默认值：0；计时器1停止时触发的中断的启用位。
 */
#define MCPWM_TIMER1_STOP_INT_ENA    (BIT(1))
#define MCPWM_TIMER1_STOP_INT_ENA_M  (MCPWM_TIMER1_STOP_INT_ENA_V << MCPWM_TIMER1_STOP_INT_ENA_S)
#define MCPWM_TIMER1_STOP_INT_ENA_V  0x00000001U
#define MCPWM_TIMER1_STOP_INT_ENA_S  1
/** MCPWM_TIMER2_STOP_INT_ENA:R/W；位位置：[2]；默认值：0；计时器2停止时触发的中断的启用位。
 */
#define MCPWM_TIMER2_STOP_INT_ENA    (BIT(2))
#define MCPWM_TIMER2_STOP_INT_ENA_M  (MCPWM_TIMER2_STOP_INT_ENA_V << MCPWM_TIMER2_STOP_INT_ENA_S)
#define MCPWM_TIMER2_STOP_INT_ENA_V  0x00000001U
#define MCPWM_TIMER2_STOP_INT_ENA_S  2
/** MCPWM_TIMER0_TEZ_INT_ENA:R/W；位位置：[3]；默认值：0；PWM定时器0 TEZ事件触发的中断的启用位。
 */
#define MCPWM_TIMER0_TEZ_INT_ENA    (BIT(3))
#define MCPWM_TIMER0_TEZ_INT_ENA_M  (MCPWM_TIMER0_TEZ_INT_ENA_V << MCPWM_TIMER0_TEZ_INT_ENA_S)
#define MCPWM_TIMER0_TEZ_INT_ENA_V  0x00000001U
#define MCPWM_TIMER0_TEZ_INT_ENA_S  3
/** MCPWM_TIMER1_TEZ_INT_ENA:R/W；位位置：[4]；默认值：0；PWM定时器1 TEZ事件触发的中断的启用位。
 */
#define MCPWM_TIMER1_TEZ_INT_ENA    (BIT(4))
#define MCPWM_TIMER1_TEZ_INT_ENA_M  (MCPWM_TIMER1_TEZ_INT_ENA_V << MCPWM_TIMER1_TEZ_INT_ENA_S)
#define MCPWM_TIMER1_TEZ_INT_ENA_V  0x00000001U
#define MCPWM_TIMER1_TEZ_INT_ENA_S  4
/** MCPWM_TIMER2_TEZ_INT_ENA:R/W；位位置：[5]；默认值：0；PWM定时器2 TEZ事件触发的中断的启用位。
 */
#define MCPWM_TIMER2_TEZ_INT_ENA    (BIT(5))
#define MCPWM_TIMER2_TEZ_INT_ENA_M  (MCPWM_TIMER2_TEZ_INT_ENA_V << MCPWM_TIMER2_TEZ_INT_ENA_S)
#define MCPWM_TIMER2_TEZ_INT_ENA_V  0x00000001U
#define MCPWM_TIMER2_TEZ_INT_ENA_S  5
/** MCPWM_TIMER0_TEP_INT_ENA:R/W；位位置：[6]；默认值：0；PWM定时器0 TEP事件触发的中断的启用位。
 */
#define MCPWM_TIMER0_TEP_INT_ENA    (BIT(6))
#define MCPWM_TIMER0_TEP_INT_ENA_M  (MCPWM_TIMER0_TEP_INT_ENA_V << MCPWM_TIMER0_TEP_INT_ENA_S)
#define MCPWM_TIMER0_TEP_INT_ENA_V  0x00000001U
#define MCPWM_TIMER0_TEP_INT_ENA_S  6
/** MCPWM_TIMER1_TEP_INT_ENA:R/W；位位置：[7]；默认值：0；PWM定时器1 TEP事件触发的中断的启用位。
 */
#define MCPWM_TIMER1_TEP_INT_ENA    (BIT(7))
#define MCPWM_TIMER1_TEP_INT_ENA_M  (MCPWM_TIMER1_TEP_INT_ENA_V << MCPWM_TIMER1_TEP_INT_ENA_S)
#define MCPWM_TIMER1_TEP_INT_ENA_V  0x00000001U
#define MCPWM_TIMER1_TEP_INT_ENA_S  7
/** MCPWM_TIMER2_TEP_INT_ENA:R/W；位位置：[8]；默认值：0；PWM定时器2 TEP事件触发的中断的启用位。
 */
#define MCPWM_TIMER2_TEP_INT_ENA    (BIT(8))
#define MCPWM_TIMER2_TEP_INT_ENA_M  (MCPWM_TIMER2_TEP_INT_ENA_V << MCPWM_TIMER2_TEP_INT_ENA_S)
#define MCPWM_TIMER2_TEP_INT_ENA_V  0x00000001U
#define MCPWM_TIMER2_TEP_INT_ENA_S  8
/** MCPWM_FAULT0_INT_ENA:R/W；位位置：[9]；默认值：0；fault_event0启动时触发的中断的启用位。
 */
#define MCPWM_FAULT0_INT_ENA    (BIT(9))
#define MCPWM_FAULT0_INT_ENA_M  (MCPWM_FAULT0_INT_ENA_V << MCPWM_FAULT0_INT_ENA_S)
#define MCPWM_FAULT0_INT_ENA_V  0x00000001U
#define MCPWM_FAULT0_INT_ENA_S  9
/** MCPWM_FAULT1_INT_ENA:R/W；位位置：[10]；默认值：0；fault_event1启动时触发的中断的启用位。
 */
#define MCPWM_FAULT1_INT_ENA    (BIT(10))
#define MCPWM_FAULT1_INT_ENA_M  (MCPWM_FAULT1_INT_ENA_V << MCPWM_FAULT1_INT_ENA_S)
#define MCPWM_FAULT1_INT_ENA_V  0x00000001U
#define MCPWM_FAULT1_INT_ENA_S  10
/** MCPWM_FAULT2_INT_ENA:R/W；位位置：[11]；默认值：0；fault_event2启动时触发的中断的启用位。
 */
#define MCPWM_FAULT2_INT_ENA    (BIT(11))
#define MCPWM_FAULT2_INT_ENA_M  (MCPWM_FAULT2_INT_ENA_V << MCPWM_FAULT2_INT_ENA_S)
#define MCPWM_FAULT2_INT_ENA_V  0x00000001U
#define MCPWM_FAULT2_INT_ENA_S  11
/** MCPWM_FAULT0_CLR_INT_ENA:R/W；位位置：[12]；默认值：0；fault_event0结束时触发的中断的启用位。
 */
#define MCPWM_FAULT0_CLR_INT_ENA    (BIT(12))
#define MCPWM_FAULT0_CLR_INT_ENA_M  (MCPWM_FAULT0_CLR_INT_ENA_V << MCPWM_FAULT0_CLR_INT_ENA_S)
#define MCPWM_FAULT0_CLR_INT_ENA_V  0x00000001U
#define MCPWM_FAULT0_CLR_INT_ENA_S  12
/** MCPWM_FAULT1_CLR_INT_ENA:R/W；位位置：[13]；默认值：0；fault_event1结束时触发的中断的启用位。
 */
#define MCPWM_FAULT1_CLR_INT_ENA    (BIT(13))
#define MCPWM_FAULT1_CLR_INT_ENA_M  (MCPWM_FAULT1_CLR_INT_ENA_V << MCPWM_FAULT1_CLR_INT_ENA_S)
#define MCPWM_FAULT1_CLR_INT_ENA_V  0x00000001U
#define MCPWM_FAULT1_CLR_INT_ENA_S  13
/** MCPWM_FAULT2_CLR_INT_ENA:R/W；位位置：[14]；默认值：0；fault_event2结束时触发的中断的启用位。
 */
#define MCPWM_FAULT2_CLR_INT_ENA    (BIT(14))
#define MCPWM_FAULT2_CLR_INT_ENA_M  (MCPWM_FAULT2_CLR_INT_ENA_V << MCPWM_FAULT2_CLR_INT_ENA_S)
#define MCPWM_FAULT2_CLR_INT_ENA_V  0x00000001U
#define MCPWM_FAULT2_CLR_INT_ENA_S  14
/** MCPWM_OP0_TEA_INT_ENA:R/W；位位置：[15]；默认值：0；PWM运算符0 TEA事件触发的中断的启用位
 */
#define MCPWM_OP0_TEA_INT_ENA    (BIT(15))
#define MCPWM_OP0_TEA_INT_ENA_M  (MCPWM_OP0_TEA_INT_ENA_V << MCPWM_OP0_TEA_INT_ENA_S)
#define MCPWM_OP0_TEA_INT_ENA_V  0x00000001U
#define MCPWM_OP0_TEA_INT_ENA_S  15
/** MCPWM_OP1_TEA_INT_ENA:R/W；位位置：[16]；默认值：0；PWM运算符1 TEA事件触发的中断的启用位
 */
#define MCPWM_OP1_TEA_INT_ENA    (BIT(16))
#define MCPWM_OP1_TEA_INT_ENA_M  (MCPWM_OP1_TEA_INT_ENA_V << MCPWM_OP1_TEA_INT_ENA_S)
#define MCPWM_OP1_TEA_INT_ENA_V  0x00000001U
#define MCPWM_OP1_TEA_INT_ENA_S  16
/** MCPWM_OP2_TEA_INT_ENA:R/W；位位置：[17]；默认值：0；PWM运算符2 TEA事件触发的中断的启用位
 */
#define MCPWM_OP2_TEA_INT_ENA    (BIT(17))
#define MCPWM_OP2_TEA_INT_ENA_M  (MCPWM_OP2_TEA_INT_ENA_V << MCPWM_OP2_TEA_INT_ENA_S)
#define MCPWM_OP2_TEA_INT_ENA_V  0x00000001U
#define MCPWM_OP2_TEA_INT_ENA_S  17
/** MCPWM_OP0_TEB_INT_ENA:R/W；位位置：[18]；默认值：0；PWM运算符0 TEB事件触发的中断的启用位
 */
#define MCPWM_OP0_TEB_INT_ENA    (BIT(18))
#define MCPWM_OP0_TEB_INT_ENA_M  (MCPWM_OP0_TEB_INT_ENA_V << MCPWM_OP0_TEB_INT_ENA_S)
#define MCPWM_OP0_TEB_INT_ENA_V  0x00000001U
#define MCPWM_OP0_TEB_INT_ENA_S  18
/** MCPWM_OP1_TEB_INT_ENA:R/W；位位置：[19]；默认值：0；PWM运算符1 TEB事件触发的中断的启用位
 */
#define MCPWM_OP1_TEB_INT_ENA    (BIT(19))
#define MCPWM_OP1_TEB_INT_ENA_M  (MCPWM_OP1_TEB_INT_ENA_V << MCPWM_OP1_TEB_INT_ENA_S)
#define MCPWM_OP1_TEB_INT_ENA_V  0x00000001U
#define MCPWM_OP1_TEB_INT_ENA_S  19
/** MCPWM_OP2_TEB_INT_ENA:R/W；位位置：[20]；默认值：0；PWM运算符2 TEB事件触发的中断的启用位
 */
#define MCPWM_OP2_TEB_INT_ENA    (BIT(20))
#define MCPWM_OP2_TEB_INT_ENA_M  (MCPWM_OP2_TEB_INT_ENA_V << MCPWM_OP2_TEB_INT_ENA_S)
#define MCPWM_OP2_TEB_INT_ENA_V  0x00000001U
#define MCPWM_OP2_TEB_INT_ENA_S  20
/** MCPWM_FH0_CBC_INT_ENA:R/W；位位置：[21]；默认值：0；由PWM0上的逐周期模式动作触发的中断的启用位。
 */
#define MCPWM_FH0_CBC_INT_ENA    (BIT(21))
#define MCPWM_FH0_CBC_INT_ENA_M  (MCPWM_FH0_CBC_INT_ENA_V << MCPWM_FH0_CBC_INT_ENA_S)
#define MCPWM_FH0_CBC_INT_ENA_V  0x00000001U
#define MCPWM_FH0_CBC_INT_ENA_S  21
/** MCPWM_FH1_CBC_INT_ENA:R/W；位位置：[22]；默认值：0；由PWM1上的逐周期模式动作触发的中断的启用位。
 */
#define MCPWM_FH1_CBC_INT_ENA    (BIT(22))
#define MCPWM_FH1_CBC_INT_ENA_M  (MCPWM_FH1_CBC_INT_ENA_V << MCPWM_FH1_CBC_INT_ENA_S)
#define MCPWM_FH1_CBC_INT_ENA_V  0x00000001U
#define MCPWM_FH1_CBC_INT_ENA_S  22
/** MCPWM_FH2_CBC_INT_ENA:R/W；位位置：[23]；默认值：0；由PWM2上的逐周期模式动作触发的中断的启用位。
 */
#define MCPWM_FH2_CBC_INT_ENA    (BIT(23))
#define MCPWM_FH2_CBC_INT_ENA_M  (MCPWM_FH2_CBC_INT_ENA_V << MCPWM_FH2_CBC_INT_ENA_S)
#define MCPWM_FH2_CBC_INT_ENA_V  0x00000001U
#define MCPWM_FH2_CBC_INT_ENA_S  23
/** MCPWM_FH0_OST_INT_ENA:R/W；位位置：[24]；默认值：0；由PWM0上的单触发模式动作触发的中断的启用位。
 */
#define MCPWM_FH0_OST_INT_ENA    (BIT(24))
#define MCPWM_FH0_OST_INT_ENA_M  (MCPWM_FH0_OST_INT_ENA_V << MCPWM_FH0_OST_INT_ENA_S)
#define MCPWM_FH0_OST_INT_ENA_V  0x00000001U
#define MCPWM_FH0_OST_INT_ENA_S  24
/** MCPWM_FH1_OST_INT_ENA：R/W；位位置：[25]；默认值：0；由PWM1上的单触发模式动作触发的中断的启用位。
 */
#define MCPWM_FH1_OST_INT_ENA    (BIT(25))
#define MCPWM_FH1_OST_INT_ENA_M  (MCPWM_FH1_OST_INT_ENA_V << MCPWM_FH1_OST_INT_ENA_S)
#define MCPWM_FH1_OST_INT_ENA_V  0x00000001U
#define MCPWM_FH1_OST_INT_ENA_S  25
/** MCPWM_FH2_OST_INT_ENA:R/W；位位置：[26]；默认值：0；由PWM2上的单触发模式动作触发的中断的启用位。
 */
#define MCPWM_FH2_OST_INT_ENA    (BIT(26))
#define MCPWM_FH2_OST_INT_ENA_M  (MCPWM_FH2_OST_INT_ENA_V << MCPWM_FH2_OST_INT_ENA_S)
#define MCPWM_FH2_OST_INT_ENA_V  0x00000001U
#define MCPWM_FH2_OST_INT_ENA_S  26
/** MCPWM_CAP0_INT_ENA:R/W；位位置：[27]；默认值：0；通道0上捕获触发的中断的启用位。
 */
#define MCPWM_CAP0_INT_ENA    (BIT(27))
#define MCPWM_CAP0_INT_ENA_M  (MCPWM_CAP0_INT_ENA_V << MCPWM_CAP0_INT_ENA_S)
#define MCPWM_CAP0_INT_ENA_V  0x00000001U
#define MCPWM_CAP0_INT_ENA_S  27
/** MCPWM_CAP1_INT_ENA:R/W；位位置：[28]；默认值：0；通道1上捕获触发的中断的启用位。
 */
#define MCPWM_CAP1_INT_ENA    (BIT(28))
#define MCPWM_CAP1_INT_ENA_M  (MCPWM_CAP1_INT_ENA_V << MCPWM_CAP1_INT_ENA_S)
#define MCPWM_CAP1_INT_ENA_V  0x00000001U
#define MCPWM_CAP1_INT_ENA_S  28
/** MCPWM_CAP2_INT_ENA:R/W；位位置：[29]；默认值：0；通道2上捕获触发的中断的启用位。
 */
#define MCPWM_CAP2_INT_ENA    (BIT(29))
#define MCPWM_CAP2_INT_ENA_M  (MCPWM_CAP2_INT_ENA_V << MCPWM_CAP2_INT_ENA_S)
#define MCPWM_CAP2_INT_ENA_V  0x00000001U
#define MCPWM_CAP2_INT_ENA_S  29

/** MCPWM_INT_RAW_REG寄存器原始中断状态
 */
#define MCPWM_INT_RAW_REG(i) (DR_REG_MCPWM_BASE(i) + 0x114)
/** MCPWM_TIMER0_STOP_INT_RAW:R/WTC/SS；位位置：[0]；默认值：0；计时器0停止时触发的中断的原始状态位。
 */
#define MCPWM_TIMER0_STOP_INT_RAW    (BIT(0))
#define MCPWM_TIMER0_STOP_INT_RAW_M  (MCPWM_TIMER0_STOP_INT_RAW_V << MCPWM_TIMER0_STOP_INT_RAW_S)
#define MCPWM_TIMER0_STOP_INT_RAW_V  0x00000001U
#define MCPWM_TIMER0_STOP_INT_RAW_S  0
/** MCPWM_TIMER1_STOP_INT_RAW:R/WTC/SS；位位置：[1]；默认值：0；计时器1停止时触发的中断的原始状态位。
 */
#define MCPWM_TIMER1_STOP_INT_RAW    (BIT(1))
#define MCPWM_TIMER1_STOP_INT_RAW_M  (MCPWM_TIMER1_STOP_INT_RAW_V << MCPWM_TIMER1_STOP_INT_RAW_S)
#define MCPWM_TIMER1_STOP_INT_RAW_V  0x00000001U
#define MCPWM_TIMER1_STOP_INT_RAW_S  1
/** MCPWM_TIMER2_STOP_INT_RAW:R/WTC/SS；位位置：[2]；默认值：0；计时器2停止时触发的中断的原始状态位。
 */
#define MCPWM_TIMER2_STOP_INT_RAW    (BIT(2))
#define MCPWM_TIMER2_STOP_INT_RAW_M  (MCPWM_TIMER2_STOP_INT_RAW_V << MCPWM_TIMER2_STOP_INT_RAW_S)
#define MCPWM_TIMER2_STOP_INT_RAW_V  0x00000001U
#define MCPWM_TIMER2_STOP_INT_RAW_S  2
/** MCPWM_TIMER0_TEZ_INT_RAW:R/WTC/SS；位位置：[3]；默认值：0；PWM定时器0 TEZ事件触发的中断的原始状态位。
 */
#define MCPWM_TIMER0_TEZ_INT_RAW    (BIT(3))
#define MCPWM_TIMER0_TEZ_INT_RAW_M  (MCPWM_TIMER0_TEZ_INT_RAW_V << MCPWM_TIMER0_TEZ_INT_RAW_S)
#define MCPWM_TIMER0_TEZ_INT_RAW_V  0x00000001U
#define MCPWM_TIMER0_TEZ_INT_RAW_S  3
/** MCPWM_TIMER1_TEZ_INT_RAW:R/WTC/SS；位位置：[4]；默认值：0；PWM计时器1 TEZ事件触发的中断的原始状态位。
 */
#define MCPWM_TIMER1_TEZ_INT_RAW    (BIT(4))
#define MCPWM_TIMER1_TEZ_INT_RAW_M  (MCPWM_TIMER1_TEZ_INT_RAW_V << MCPWM_TIMER1_TEZ_INT_RAW_S)
#define MCPWM_TIMER1_TEZ_INT_RAW_V  0x00000001U
#define MCPWM_TIMER1_TEZ_INT_RAW_S  4
/** MCPWM_TIMER2_TEZ_INT_RAW:R/WTC/SS；位位置：[5]；默认值：0；PWM定时器2 TEZ事件触发的中断的原始状态位。
 */
#define MCPWM_TIMER2_TEZ_INT_RAW    (BIT(5))
#define MCPWM_TIMER2_TEZ_INT_RAW_M  (MCPWM_TIMER2_TEZ_INT_RAW_V << MCPWM_TIMER2_TEZ_INT_RAW_S)
#define MCPWM_TIMER2_TEZ_INT_RAW_V  0x00000001U
#define MCPWM_TIMER2_TEZ_INT_RAW_S  5
/** MCPWM_TIMER0_TEP_INT_RAW:R/WTC/SS；位位置：[6]；默认值：0；PWM定时器0 TEP事件触发的中断的原始状态位。
 */
#define MCPWM_TIMER0_TEP_INT_RAW    (BIT(6))
#define MCPWM_TIMER0_TEP_INT_RAW_M  (MCPWM_TIMER0_TEP_INT_RAW_V << MCPWM_TIMER0_TEP_INT_RAW_S)
#define MCPWM_TIMER0_TEP_INT_RAW_V  0x00000001U
#define MCPWM_TIMER0_TEP_INT_RAW_S  6
/** MCPWM_TIMER1_TEP_INT_RAW:R/WTC/SS；位位置：[7]；默认值：0；PWM计时器1 TEP事件触发的中断的原始状态位。
 */
#define MCPWM_TIMER1_TEP_INT_RAW    (BIT(7))
#define MCPWM_TIMER1_TEP_INT_RAW_M  (MCPWM_TIMER1_TEP_INT_RAW_V << MCPWM_TIMER1_TEP_INT_RAW_S)
#define MCPWM_TIMER1_TEP_INT_RAW_V  0x00000001U
#define MCPWM_TIMER1_TEP_INT_RAW_S  7
/** MCPWM_TIMER2_TEP_INT_RAW:R/WTC/SS；位位置：[8]；默认值：0；PWM定时器2 TEP事件触发的中断的原始状态位。
 */
#define MCPWM_TIMER2_TEP_INT_RAW    (BIT(8))
#define MCPWM_TIMER2_TEP_INT_RAW_M  (MCPWM_TIMER2_TEP_INT_RAW_V << MCPWM_TIMER2_TEP_INT_RAW_S)
#define MCPWM_TIMER2_TEP_INT_RAW_V  0x00000001U
#define MCPWM_TIMER2_TEP_INT_RAW_S  8
/** MCPWM_FAULT0_INT_RAW:R/WTC/SS；位位置：[9]；默认值：0；fault_event0启动时触发的中断的原始状态位。
 */
#define MCPWM_FAULT0_INT_RAW    (BIT(9))
#define MCPWM_FAULT0_INT_RAW_M  (MCPWM_FAULT0_INT_RAW_V << MCPWM_FAULT0_INT_RAW_S)
#define MCPWM_FAULT0_INT_RAW_V  0x00000001U
#define MCPWM_FAULT0_INT_RAW_S  9
/** MCPWM_FAULT1_INT_RAW:R/WTC/SS；位位置：[10]；默认值：0；fault_event1启动时触发的中断的原始状态位。
 */
#define MCPWM_FAULT1_INT_RAW    (BIT(10))
#define MCPWM_FAULT1_INT_RAW_M  (MCPWM_FAULT1_INT_RAW_V << MCPWM_FAULT1_INT_RAW_S)
#define MCPWM_FAULT1_INT_RAW_V  0x00000001U
#define MCPWM_FAULT1_INT_RAW_S  10
/** MCPWM_FAULT2_INT_RAW:R/WTC/SS；位位置：[11]；默认值：0；fault_event2启动时触发的中断的原始状态位。
 */
#define MCPWM_FAULT2_INT_RAW    (BIT(11))
#define MCPWM_FAULT2_INT_RAW_M  (MCPWM_FAULT2_INT_RAW_V << MCPWM_FAULT2_INT_RAW_S)
#define MCPWM_FAULT2_INT_RAW_V  0x00000001U
#define MCPWM_FAULT2_INT_RAW_S  11
/** MCPWM_FAULT0_CLR_INT_RAW:R/WTC/SS；位位置：[12]；默认值：0；fault_event0结束时触发的中断的原始状态位。
 */
#define MCPWM_FAULT0_CLR_INT_RAW    (BIT(12))
#define MCPWM_FAULT0_CLR_INT_RAW_M  (MCPWM_FAULT0_CLR_INT_RAW_V << MCPWM_FAULT0_CLR_INT_RAW_S)
#define MCPWM_FAULT0_CLR_INT_RAW_V  0x00000001U
#define MCPWM_FAULT0_CLR_INT_RAW_S  12
/** MCPWM_FAULT1_CLR_INT_RAW:R/WTC/SS；位位置：[13]；默认值：0；fault_event1结束时触发的中断的原始状态位。
 */
#define MCPWM_FAULT1_CLR_INT_RAW    (BIT(13))
#define MCPWM_FAULT1_CLR_INT_RAW_M  (MCPWM_FAULT1_CLR_INT_RAW_V << MCPWM_FAULT1_CLR_INT_RAW_S)
#define MCPWM_FAULT1_CLR_INT_RAW_V  0x00000001U
#define MCPWM_FAULT1_CLR_INT_RAW_S  13
/** MCPWM_FAULT2_CLR_INT_RAW:R/WTC/SS；位位置：[14]；默认值：0；fault_event2结束时触发的中断的原始状态位。
 */
#define MCPWM_FAULT2_CLR_INT_RAW    (BIT(14))
#define MCPWM_FAULT2_CLR_INT_RAW_M  (MCPWM_FAULT2_CLR_INT_RAW_V << MCPWM_FAULT2_CLR_INT_RAW_S)
#define MCPWM_FAULT2_CLR_INT_RAW_V  0x00000001U
#define MCPWM_FAULT2_CLR_INT_RAW_S  14
/** MCPWM_OP0_TEA_INT_RAW:R/WTC/SS；位位置：[15]；默认值：0；PWM运算符0 TEA事件触发的中断的原始状态位
 */
#define MCPWM_OP0_TEA_INT_RAW    (BIT(15))
#define MCPWM_OP0_TEA_INT_RAW_M  (MCPWM_OP0_TEA_INT_RAW_V << MCPWM_OP0_TEA_INT_RAW_S)
#define MCPWM_OP0_TEA_INT_RAW_V  0x00000001U
#define MCPWM_OP0_TEA_INT_RAW_S  15
/** MCPWM_OP1_TEA_INT_RAW:R/WTC/SS；位位置：[16]；默认值：0；PWM运算符1 TEA事件触发的中断的原始状态位
 */
#define MCPWM_OP1_TEA_INT_RAW    (BIT(16))
#define MCPWM_OP1_TEA_INT_RAW_M  (MCPWM_OP1_TEA_INT_RAW_V << MCPWM_OP1_TEA_INT_RAW_S)
#define MCPWM_OP1_TEA_INT_RAW_V  0x00000001U
#define MCPWM_OP1_TEA_INT_RAW_S  16
/** MCPWM_OP2_TEA_INT_RAW:R/WTC/SS；位位置：[17]；默认值：0；PWM运算符2 TEA事件触发的中断的原始状态位
 */
#define MCPWM_OP2_TEA_INT_RAW    (BIT(17))
#define MCPWM_OP2_TEA_INT_RAW_M  (MCPWM_OP2_TEA_INT_RAW_V << MCPWM_OP2_TEA_INT_RAW_S)
#define MCPWM_OP2_TEA_INT_RAW_V  0x00000001U
#define MCPWM_OP2_TEA_INT_RAW_S  17
/** MCPWM_OP0_TEB_INT_RAW:R/WTC/SS；位位置：[18]；默认值：0；PWM运算符0 TEB事件触发的中断的原始状态位
 */
#define MCPWM_OP0_TEB_INT_RAW    (BIT(18))
#define MCPWM_OP0_TEB_INT_RAW_M  (MCPWM_OP0_TEB_INT_RAW_V << MCPWM_OP0_TEB_INT_RAW_S)
#define MCPWM_OP0_TEB_INT_RAW_V  0x00000001U
#define MCPWM_OP0_TEB_INT_RAW_S  18
/** MCPWM_OP1_TEB_INT_RAW:R/WTC/SS；位位置：[19]；默认值：0；PWM运算符1 TEB事件触发的中断的原始状态位
 */
#define MCPWM_OP1_TEB_INT_RAW    (BIT(19))
#define MCPWM_OP1_TEB_INT_RAW_M  (MCPWM_OP1_TEB_INT_RAW_V << MCPWM_OP1_TEB_INT_RAW_S)
#define MCPWM_OP1_TEB_INT_RAW_V  0x00000001U
#define MCPWM_OP1_TEB_INT_RAW_S  19
/** MCPWM_OP2_TEB_INT_RAW:R/WTC/SS；位位置：[20]；默认值：0；PWM运算符2 TEB事件触发的中断的原始状态位
 */
#define MCPWM_OP2_TEB_INT_RAW    (BIT(20))
#define MCPWM_OP2_TEB_INT_RAW_M  (MCPWM_OP2_TEB_INT_RAW_V << MCPWM_OP2_TEB_INT_RAW_S)
#define MCPWM_OP2_TEB_INT_RAW_V  0x00000001U
#define MCPWM_OP2_TEB_INT_RAW_S  20
/** MCPWM_FH0_CBC_INT_RAW:R/WTC/SS；位位置：[21]；默认值：0；由PWM0上的逐周期模式动作触发的中断的原始状态位。
 */
#define MCPWM_FH0_CBC_INT_RAW    (BIT(21))
#define MCPWM_FH0_CBC_INT_RAW_M  (MCPWM_FH0_CBC_INT_RAW_V << MCPWM_FH0_CBC_INT_RAW_S)
#define MCPWM_FH0_CBC_INT_RAW_V  0x00000001U
#define MCPWM_FH0_CBC_INT_RAW_S  21
/** MCPWM_FH1_CBC_INT_RAW:R/WTC/SS；位位置：[22]；默认值：0；由PWM1上的逐周期模式动作触发的中断的原始状态位。
 */
#define MCPWM_FH1_CBC_INT_RAW    (BIT(22))
#define MCPWM_FH1_CBC_INT_RAW_M  (MCPWM_FH1_CBC_INT_RAW_V << MCPWM_FH1_CBC_INT_RAW_S)
#define MCPWM_FH1_CBC_INT_RAW_V  0x00000001U
#define MCPWM_FH1_CBC_INT_RAW_S  22
/** MCPWM_FH2_CBC_INT_RAW:R/WTC/SS；位位置：[23]；默认值：0；由PWM2上的逐周期模式动作触发的中断的原始状态位。
 */
#define MCPWM_FH2_CBC_INT_RAW    (BIT(23))
#define MCPWM_FH2_CBC_INT_RAW_M  (MCPWM_FH2_CBC_INT_RAW_V << MCPWM_FH2_CBC_INT_RAW_S)
#define MCPWM_FH2_CBC_INT_RAW_V  0x00000001U
#define MCPWM_FH2_CBC_INT_RAW_S  23
/** MCPWM_FH0_OST_INT_RAW:R/WTC/SS；位位置：[24]；默认值：0；由PWM0上的单触发模式动作触发的中断的原始状态位。
 */
#define MCPWM_FH0_OST_INT_RAW    (BIT(24))
#define MCPWM_FH0_OST_INT_RAW_M  (MCPWM_FH0_OST_INT_RAW_V << MCPWM_FH0_OST_INT_RAW_S)
#define MCPWM_FH0_OST_INT_RAW_V  0x00000001U
#define MCPWM_FH0_OST_INT_RAW_S  24
/** MCPWM_FH1_OST_INT_RAW:R/WTC/SS；位位置：[25]；默认值：0；由PWM1上的单触发模式动作触发的中断的原始状态位。
 */
#define MCPWM_FH1_OST_INT_RAW    (BIT(25))
#define MCPWM_FH1_OST_INT_RAW_M  (MCPWM_FH1_OST_INT_RAW_V << MCPWM_FH1_OST_INT_RAW_S)
#define MCPWM_FH1_OST_INT_RAW_V  0x00000001U
#define MCPWM_FH1_OST_INT_RAW_S  25
/** MCPWM_FH2_OST_INT_RAW:R/WTC/SS；位位置：[26]；默认值：0；由PWM2上的单触发模式动作触发的中断的原始状态位。
 */
#define MCPWM_FH2_OST_INT_RAW    (BIT(26))
#define MCPWM_FH2_OST_INT_RAW_M  (MCPWM_FH2_OST_INT_RAW_V << MCPWM_FH2_OST_INT_RAW_S)
#define MCPWM_FH2_OST_INT_RAW_V  0x00000001U
#define MCPWM_FH2_OST_INT_RAW_S  26
/** MCPWM_CAP0_INT_RAW:R/WTC/SS；位位置：[27]；默认值：0；通道0上捕获触发的中断的原始状态位。
 */
#define MCPWM_CAP0_INT_RAW    (BIT(27))
#define MCPWM_CAP0_INT_RAW_M  (MCPWM_CAP0_INT_RAW_V << MCPWM_CAP0_INT_RAW_S)
#define MCPWM_CAP0_INT_RAW_V  0x00000001U
#define MCPWM_CAP0_INT_RAW_S  27
/** MCPWM_CAP1_INT_RAW:R/WTC/SS；位位置：[28]；默认值：0；通道1上捕获触发的中断的原始状态位。
 */
#define MCPWM_CAP1_INT_RAW    (BIT(28))
#define MCPWM_CAP1_INT_RAW_M  (MCPWM_CAP1_INT_RAW_V << MCPWM_CAP1_INT_RAW_S)
#define MCPWM_CAP1_INT_RAW_V  0x00000001U
#define MCPWM_CAP1_INT_RAW_S  28
/** MCPWM_CAP2_INT_RAW:R/WTC/SS；位位置：[29]；默认值：0；通道2上捕获触发的中断的原始状态位。
 */
#define MCPWM_CAP2_INT_RAW    (BIT(29))
#define MCPWM_CAP2_INT_RAW_M  (MCPWM_CAP2_INT_RAW_V << MCPWM_CAP2_INT_RAW_S)
#define MCPWM_CAP2_INT_RAW_V  0x00000001U
#define MCPWM_CAP2_INT_RAW_S  29

/** MCPWM_INT_ST_REG寄存器屏蔽中断状态
 */
#define MCPWM_INT_ST_REG(i) (DR_REG_MCPWM_BASE(i) + 0x118)
/** MCPWM_TIMER0_STOP_INT_ST:RO；位位置：[0]；默认值：0；计时器0停止时触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER0_STOP_INT_ST    (BIT(0))
#define MCPWM_TIMER0_STOP_INT_ST_M  (MCPWM_TIMER0_STOP_INT_ST_V << MCPWM_TIMER0_STOP_INT_ST_S)
#define MCPWM_TIMER0_STOP_INT_ST_V  0x00000001U
#define MCPWM_TIMER0_STOP_INT_ST_S  0
/** MCPWM_TIMER1_STOP_INT_ST:RO；位位置：[1]；默认值：0；计时器1停止时触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER1_STOP_INT_ST    (BIT(1))
#define MCPWM_TIMER1_STOP_INT_ST_M  (MCPWM_TIMER1_STOP_INT_ST_V << MCPWM_TIMER1_STOP_INT_ST_S)
#define MCPWM_TIMER1_STOP_INT_ST_V  0x00000001U
#define MCPWM_TIMER1_STOP_INT_ST_S  1
/** MCPWM_TIMER2_STOP_INT_ST:RO；位位置：[2]；默认值：0；计时器2停止时触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER2_STOP_INT_ST    (BIT(2))
#define MCPWM_TIMER2_STOP_INT_ST_M  (MCPWM_TIMER2_STOP_INT_ST_V << MCPWM_TIMER2_STOP_INT_ST_S)
#define MCPWM_TIMER2_STOP_INT_ST_V  0x00000001U
#define MCPWM_TIMER2_STOP_INT_ST_S  2
/** MCPWM_TIMER0_TEZ_INT_ST:RO；位位置：[3]；默认值：0；PWM定时器0 TEZ事件触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER0_TEZ_INT_ST    (BIT(3))
#define MCPWM_TIMER0_TEZ_INT_ST_M  (MCPWM_TIMER0_TEZ_INT_ST_V << MCPWM_TIMER0_TEZ_INT_ST_S)
#define MCPWM_TIMER0_TEZ_INT_ST_V  0x00000001U
#define MCPWM_TIMER0_TEZ_INT_ST_S  3
/** MCPWM_TIMER1_TEZ_INT_ST:RO；位位置：[4]；默认值：0；PWM定时器1 TEZ事件触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER1_TEZ_INT_ST    (BIT(4))
#define MCPWM_TIMER1_TEZ_INT_ST_M  (MCPWM_TIMER1_TEZ_INT_ST_V << MCPWM_TIMER1_TEZ_INT_ST_S)
#define MCPWM_TIMER1_TEZ_INT_ST_V  0x00000001U
#define MCPWM_TIMER1_TEZ_INT_ST_S  4
/** MCPWM_TIMER2_TEZ_INT_ST:RO；位位置：[5]；默认值：0；PWM定时器2 TEZ事件触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER2_TEZ_INT_ST    (BIT(5))
#define MCPWM_TIMER2_TEZ_INT_ST_M  (MCPWM_TIMER2_TEZ_INT_ST_V << MCPWM_TIMER2_TEZ_INT_ST_S)
#define MCPWM_TIMER2_TEZ_INT_ST_V  0x00000001U
#define MCPWM_TIMER2_TEZ_INT_ST_S  5
/** MCPWM_TIMER0_TEP_INT_ST:RO；位位置：[6]；默认值：0；PWM定时器0 TEP事件触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER0_TEP_INT_ST    (BIT(6))
#define MCPWM_TIMER0_TEP_INT_ST_M  (MCPWM_TIMER0_TEP_INT_ST_V << MCPWM_TIMER0_TEP_INT_ST_S)
#define MCPWM_TIMER0_TEP_INT_ST_V  0x00000001U
#define MCPWM_TIMER0_TEP_INT_ST_S  6
/** MCPWM_TIMER1_TEP_INT_ST:RO；位位置：[7]；默认值：0；PWM定时器1 TEP事件触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER1_TEP_INT_ST    (BIT(7))
#define MCPWM_TIMER1_TEP_INT_ST_M  (MCPWM_TIMER1_TEP_INT_ST_V << MCPWM_TIMER1_TEP_INT_ST_S)
#define MCPWM_TIMER1_TEP_INT_ST_V  0x00000001U
#define MCPWM_TIMER1_TEP_INT_ST_S  7
/** MCPWM_TIMER2_TEP_INT_ST:RO；位位置：[8]；默认值：0；PWM定时器2 TEP事件触发的中断的屏蔽状态位。
 */
#define MCPWM_TIMER2_TEP_INT_ST    (BIT(8))
#define MCPWM_TIMER2_TEP_INT_ST_M  (MCPWM_TIMER2_TEP_INT_ST_V << MCPWM_TIMER2_TEP_INT_ST_S)
#define MCPWM_TIMER2_TEP_INT_ST_V  0x00000001U
#define MCPWM_TIMER2_TEP_INT_ST_S  8
/** MCPWM_FAULT0_INT_ST:RO；位位置：[9]；默认值：0；fault_event0启动时触发的中断的屏蔽状态位。
 */
#define MCPWM_FAULT0_INT_ST    (BIT(9))
#define MCPWM_FAULT0_INT_ST_M  (MCPWM_FAULT0_INT_ST_V << MCPWM_FAULT0_INT_ST_S)
#define MCPWM_FAULT0_INT_ST_V  0x00000001U
#define MCPWM_FAULT0_INT_ST_S  9
/** MCPWM_FAULT1_INT_ST:RO；位位置：[10]；默认值：0；fault_event1启动时触发的中断的屏蔽状态位。
 */
#define MCPWM_FAULT1_INT_ST    (BIT(10))
#define MCPWM_FAULT1_INT_ST_M  (MCPWM_FAULT1_INT_ST_V << MCPWM_FAULT1_INT_ST_S)
#define MCPWM_FAULT1_INT_ST_V  0x00000001U
#define MCPWM_FAULT1_INT_ST_S  10
/** MCPWM_FAULT2_INT_ST:RO；位位置：[11]；默认值：0；fault_event2启动时触发的中断的屏蔽状态位。
 */
#define MCPWM_FAULT2_INT_ST    (BIT(11))
#define MCPWM_FAULT2_INT_ST_M  (MCPWM_FAULT2_INT_ST_V << MCPWM_FAULT2_INT_ST_S)
#define MCPWM_FAULT2_INT_ST_V  0x00000001U
#define MCPWM_FAULT2_INT_ST_S  11
/** MCPWM_FAULT0_CLR_INT_ST:RO；位位置：[12]；默认值：0；fault_event0结束时触发的中断的屏蔽状态位。
 */
#define MCPWM_FAULT0_CLR_INT_ST    (BIT(12))
#define MCPWM_FAULT0_CLR_INT_ST_M  (MCPWM_FAULT0_CLR_INT_ST_V << MCPWM_FAULT0_CLR_INT_ST_S)
#define MCPWM_FAULT0_CLR_INT_ST_V  0x00000001U
#define MCPWM_FAULT0_CLR_INT_ST_S  12
/** MCPWM_FAULT1_CLR_INT_ST:RO；位位置：[13]；默认值：0；fault_event1结束时触发的中断的屏蔽状态位。
 */
#define MCPWM_FAULT1_CLR_INT_ST    (BIT(13))
#define MCPWM_FAULT1_CLR_INT_ST_M  (MCPWM_FAULT1_CLR_INT_ST_V << MCPWM_FAULT1_CLR_INT_ST_S)
#define MCPWM_FAULT1_CLR_INT_ST_V  0x00000001U
#define MCPWM_FAULT1_CLR_INT_ST_S  13
/** MCPWM_FAULT2_CLR_INT_ST:RO；位位置：[14]；默认值：0；fault_event2结束时触发的中断的屏蔽状态位。
 */
#define MCPWM_FAULT2_CLR_INT_ST    (BIT(14))
#define MCPWM_FAULT2_CLR_INT_ST_M  (MCPWM_FAULT2_CLR_INT_ST_V << MCPWM_FAULT2_CLR_INT_ST_S)
#define MCPWM_FAULT2_CLR_INT_ST_V  0x00000001U
#define MCPWM_FAULT2_CLR_INT_ST_S  14
/** MCPWM_OP0_TEA_INT_ST:RO；位位置：[15]；默认值：0；PWM运算符0 TEA事件触发的中断的屏蔽状态位
 */
#define MCPWM_OP0_TEA_INT_ST    (BIT(15))
#define MCPWM_OP0_TEA_INT_ST_M  (MCPWM_OP0_TEA_INT_ST_V << MCPWM_OP0_TEA_INT_ST_S)
#define MCPWM_OP0_TEA_INT_ST_V  0x00000001U
#define MCPWM_OP0_TEA_INT_ST_S  15
/** MCPWM_OP1_TEA_INT_ST:RO；位位置：[16]；默认值：0；PWM运算符1 TEA事件触发的中断的屏蔽状态位
 */
#define MCPWM_OP1_TEA_INT_ST    (BIT(16))
#define MCPWM_OP1_TEA_INT_ST_M  (MCPWM_OP1_TEA_INT_ST_V << MCPWM_OP1_TEA_INT_ST_S)
#define MCPWM_OP1_TEA_INT_ST_V  0x00000001U
#define MCPWM_OP1_TEA_INT_ST_S  16
/** MCPWM_OP2_TEA_INT_ST:RO；位位置：[17]；默认值：0；PWM运算符2 TEA事件触发的中断的屏蔽状态位
 */
#define MCPWM_OP2_TEA_INT_ST    (BIT(17))
#define MCPWM_OP2_TEA_INT_ST_M  (MCPWM_OP2_TEA_INT_ST_V << MCPWM_OP2_TEA_INT_ST_S)
#define MCPWM_OP2_TEA_INT_ST_V  0x00000001U
#define MCPWM_OP2_TEA_INT_ST_S  17
/** MCPWM_OP0_TEB_INT_ST:RO；位位置：[18]；默认值：0；PWM运算符0 TEB事件触发的中断的屏蔽状态位
 */
#define MCPWM_OP0_TEB_INT_ST    (BIT(18))
#define MCPWM_OP0_TEB_INT_ST_M  (MCPWM_OP0_TEB_INT_ST_V << MCPWM_OP0_TEB_INT_ST_S)
#define MCPWM_OP0_TEB_INT_ST_V  0x00000001U
#define MCPWM_OP0_TEB_INT_ST_S  18
/** MCPWM_OP1_TEB_INT_ST:RO；位位置：[19]；默认值：0；PWM运算符1 TEB事件触发的中断的屏蔽状态位
 */
#define MCPWM_OP1_TEB_INT_ST    (BIT(19))
#define MCPWM_OP1_TEB_INT_ST_M  (MCPWM_OP1_TEB_INT_ST_V << MCPWM_OP1_TEB_INT_ST_S)
#define MCPWM_OP1_TEB_INT_ST_V  0x00000001U
#define MCPWM_OP1_TEB_INT_ST_S  19
/** MCPWM_OP2_TEB_INT_ST:RO；位位置：[20]；默认值：0；PWM运算符2 TEB事件触发的中断的屏蔽状态位
 */
#define MCPWM_OP2_TEB_INT_ST    (BIT(20))
#define MCPWM_OP2_TEB_INT_ST_M  (MCPWM_OP2_TEB_INT_ST_V << MCPWM_OP2_TEB_INT_ST_S)
#define MCPWM_OP2_TEB_INT_ST_V  0x00000001U
#define MCPWM_OP2_TEB_INT_ST_S  20
/** MCPWM_FH0_CBC_INT_ST:RO；位位置：[21]；默认值：0；由PWM0上的逐周期模式动作触发的中断的屏蔽状态位。
 */
#define MCPWM_FH0_CBC_INT_ST    (BIT(21))
#define MCPWM_FH0_CBC_INT_ST_M  (MCPWM_FH0_CBC_INT_ST_V << MCPWM_FH0_CBC_INT_ST_S)
#define MCPWM_FH0_CBC_INT_ST_V  0x00000001U
#define MCPWM_FH0_CBC_INT_ST_S  21
/** MCPWM_FH1_CBC_INT_ST:RO；位位置：[22]；默认值：0；由PWM1上的逐周期模式动作触发的中断的屏蔽状态位。
 */
#define MCPWM_FH1_CBC_INT_ST    (BIT(22))
#define MCPWM_FH1_CBC_INT_ST_M  (MCPWM_FH1_CBC_INT_ST_V << MCPWM_FH1_CBC_INT_ST_S)
#define MCPWM_FH1_CBC_INT_ST_V  0x00000001U
#define MCPWM_FH1_CBC_INT_ST_S  22
/** MCPWM_FH2_CBC_INT_ST:RO；位位置：[23]；默认值：0；由PWM2上的逐周期模式动作触发的中断的屏蔽状态位。
 */
#define MCPWM_FH2_CBC_INT_ST    (BIT(23))
#define MCPWM_FH2_CBC_INT_ST_M  (MCPWM_FH2_CBC_INT_ST_V << MCPWM_FH2_CBC_INT_ST_S)
#define MCPWM_FH2_CBC_INT_ST_V  0x00000001U
#define MCPWM_FH2_CBC_INT_ST_S  23
/** MCPWM_FH0_OST_INT_ST:RO；位位置：[24]；默认值：0；由PWM0上的单触发模式动作触发的中断的屏蔽状态位。
 */
#define MCPWM_FH0_OST_INT_ST    (BIT(24))
#define MCPWM_FH0_OST_INT_ST_M  (MCPWM_FH0_OST_INT_ST_V << MCPWM_FH0_OST_INT_ST_S)
#define MCPWM_FH0_OST_INT_ST_V  0x00000001U
#define MCPWM_FH0_OST_INT_ST_S  24
/** MCPWM_FH1_OST_INT_ST:RO；位位置：[25]；默认值：0；由PWM1上的单触发模式动作触发的中断的屏蔽状态位。
 */
#define MCPWM_FH1_OST_INT_ST    (BIT(25))
#define MCPWM_FH1_OST_INT_ST_M  (MCPWM_FH1_OST_INT_ST_V << MCPWM_FH1_OST_INT_ST_S)
#define MCPWM_FH1_OST_INT_ST_V  0x00000001U
#define MCPWM_FH1_OST_INT_ST_S  25
/** MCPWM_FH2_OST_INT_ST:RO；位位置：[26]；默认值：0；PWM2上的单触发模式动作触发的中断的屏蔽状态位。
 */
#define MCPWM_FH2_OST_INT_ST    (BIT(26))
#define MCPWM_FH2_OST_INT_ST_M  (MCPWM_FH2_OST_INT_ST_V << MCPWM_FH2_OST_INT_ST_S)
#define MCPWM_FH2_OST_INT_ST_V  0x00000001U
#define MCPWM_FH2_OST_INT_ST_S  26
/** MCPWM_CAP0_INT_ST:RO；位位置：[27]；默认值：0；通道0上捕获触发的中断的屏蔽状态位。
 */
#define MCPWM_CAP0_INT_ST    (BIT(27))
#define MCPWM_CAP0_INT_ST_M  (MCPWM_CAP0_INT_ST_V << MCPWM_CAP0_INT_ST_S)
#define MCPWM_CAP0_INT_ST_V  0x00000001U
#define MCPWM_CAP0_INT_ST_S  27
/** MCPWM_CAP1_INT_ST:RO；位位置：[28]；默认值：0；通道1上捕获触发的中断的屏蔽状态位。
 */
#define MCPWM_CAP1_INT_ST    (BIT(28))
#define MCPWM_CAP1_INT_ST_M  (MCPWM_CAP1_INT_ST_V << MCPWM_CAP1_INT_ST_S)
#define MCPWM_CAP1_INT_ST_V  0x00000001U
#define MCPWM_CAP1_INT_ST_S  28
/** MCPWM_CAP2_INT_ST:RO；位位置：[29]；默认值：0；通道2上捕获触发的中断的屏蔽状态位。
 */
#define MCPWM_CAP2_INT_ST    (BIT(29))
#define MCPWM_CAP2_INT_ST_M  (MCPWM_CAP2_INT_ST_V << MCPWM_CAP2_INT_ST_S)
#define MCPWM_CAP2_INT_ST_V  0x00000001U
#define MCPWM_CAP2_INT_ST_S  29

/** MCPWM_INT_CLR_REG寄存器中断清除位
 */
#define MCPWM_INT_CLR_REG(i) (DR_REG_MCPWM_BASE(i) + 0x11c)
/** MCPWM_TIMER0_STOP_INT_CLR:WT；位位置：[0]；默认值：0；设置此位以清除计时器0停止时触发的中断。
 */
#define MCPWM_TIMER0_STOP_INT_CLR    (BIT(0))
#define MCPWM_TIMER0_STOP_INT_CLR_M  (MCPWM_TIMER0_STOP_INT_CLR_V << MCPWM_TIMER0_STOP_INT_CLR_S)
#define MCPWM_TIMER0_STOP_INT_CLR_V  0x00000001U
#define MCPWM_TIMER0_STOP_INT_CLR_S  0
/** MCPWM_TIMER1_STOP_INT_CLR:WT；位位置：[1]；默认值：0；设置此位以清除计时器1停止时触发的中断。
 */
#define MCPWM_TIMER1_STOP_INT_CLR    (BIT(1))
#define MCPWM_TIMER1_STOP_INT_CLR_M  (MCPWM_TIMER1_STOP_INT_CLR_V << MCPWM_TIMER1_STOP_INT_CLR_S)
#define MCPWM_TIMER1_STOP_INT_CLR_V  0x00000001U
#define MCPWM_TIMER1_STOP_INT_CLR_S  1
/** MCPWM_TIMER2_STOP_INT_CLR:WT；位位置：[2]；默认值：0；设置此位以清除计时器2停止时触发的中断。
 */
#define MCPWM_TIMER2_STOP_INT_CLR    (BIT(2))
#define MCPWM_TIMER2_STOP_INT_CLR_M  (MCPWM_TIMER2_STOP_INT_CLR_V << MCPWM_TIMER2_STOP_INT_CLR_S)
#define MCPWM_TIMER2_STOP_INT_CLR_V  0x00000001U
#define MCPWM_TIMER2_STOP_INT_CLR_S  2
/** MCPWM_TIMER0_TEZ_INT_CLR:WT；位位置：[3]；默认值：0；设置此位以清除PWM定时器0 TEZ事件触发的中断。
 */
#define MCPWM_TIMER0_TEZ_INT_CLR    (BIT(3))
#define MCPWM_TIMER0_TEZ_INT_CLR_M  (MCPWM_TIMER0_TEZ_INT_CLR_V << MCPWM_TIMER0_TEZ_INT_CLR_S)
#define MCPWM_TIMER0_TEZ_INT_CLR_V  0x00000001U
#define MCPWM_TIMER0_TEZ_INT_CLR_S  3
/** MCPWM_TIMER1_TEZ_INT_CLR:WT；位位置：[4]；默认值：0；设置此位以清除PWM定时器1 TEZ事件触发的中断。
 */
#define MCPWM_TIMER1_TEZ_INT_CLR    (BIT(4))
#define MCPWM_TIMER1_TEZ_INT_CLR_M  (MCPWM_TIMER1_TEZ_INT_CLR_V << MCPWM_TIMER1_TEZ_INT_CLR_S)
#define MCPWM_TIMER1_TEZ_INT_CLR_V  0x00000001U
#define MCPWM_TIMER1_TEZ_INT_CLR_S  4
/** MCPWM_TIMER2_TEZ_INT_CLR:WT；位位置：[5]；默认值：0；设置此位以清除PWM定时器2 TEZ事件触发的中断。
 */
#define MCPWM_TIMER2_TEZ_INT_CLR    (BIT(5))
#define MCPWM_TIMER2_TEZ_INT_CLR_M  (MCPWM_TIMER2_TEZ_INT_CLR_V << MCPWM_TIMER2_TEZ_INT_CLR_S)
#define MCPWM_TIMER2_TEZ_INT_CLR_V  0x00000001U
#define MCPWM_TIMER2_TEZ_INT_CLR_S  5
/** MCPWM_TIMER0_TEP_INT_CLR:WT；位位置：[6]；默认值：0；设置此位以清除PWM定时器0 TEP事件触发的中断。
 */
#define MCPWM_TIMER0_TEP_INT_CLR    (BIT(6))
#define MCPWM_TIMER0_TEP_INT_CLR_M  (MCPWM_TIMER0_TEP_INT_CLR_V << MCPWM_TIMER0_TEP_INT_CLR_S)
#define MCPWM_TIMER0_TEP_INT_CLR_V  0x00000001U
#define MCPWM_TIMER0_TEP_INT_CLR_S  6
/** MCPWM_TIMER1_TEP_INT_CLR:WT；位位置：[7]；默认值：0；设置此位以清除PWM定时器1 TEP事件触发的中断。
 */
#define MCPWM_TIMER1_TEP_INT_CLR    (BIT(7))
#define MCPWM_TIMER1_TEP_INT_CLR_M  (MCPWM_TIMER1_TEP_INT_CLR_V << MCPWM_TIMER1_TEP_INT_CLR_S)
#define MCPWM_TIMER1_TEP_INT_CLR_V  0x00000001U
#define MCPWM_TIMER1_TEP_INT_CLR_S  7
/** MCPWM_TIMER2_TEP_INT_CLR:WT；位位置：[8]；默认值：0；设置此位以清除PWM定时器2 TEP事件触发的中断。
 */
#define MCPWM_TIMER2_TEP_INT_CLR    (BIT(8))
#define MCPWM_TIMER2_TEP_INT_CLR_M  (MCPWM_TIMER2_TEP_INT_CLR_V << MCPWM_TIMER2_TEP_INT_CLR_S)
#define MCPWM_TIMER2_TEP_INT_CLR_V  0x00000001U
#define MCPWM_TIMER2_TEP_INT_CLR_S  8
/** MCPWM_FAULT0_INT_CLR:WT；位位置：[9]；默认值：0；设置此位以清除fault_event0启动时触发的中断。
 */
#define MCPWM_FAULT0_INT_CLR    (BIT(9))
#define MCPWM_FAULT0_INT_CLR_M  (MCPWM_FAULT0_INT_CLR_V << MCPWM_FAULT0_INT_CLR_S)
#define MCPWM_FAULT0_INT_CLR_V  0x00000001U
#define MCPWM_FAULT0_INT_CLR_S  9
/** MCPWM_FAULT1_INT_CLR:WT；位位置：[10]；默认值：0；设置此位以清除fault_event1启动时触发的中断。
 */
#define MCPWM_FAULT1_INT_CLR    (BIT(10))
#define MCPWM_FAULT1_INT_CLR_M  (MCPWM_FAULT1_INT_CLR_V << MCPWM_FAULT1_INT_CLR_S)
#define MCPWM_FAULT1_INT_CLR_V  0x00000001U
#define MCPWM_FAULT1_INT_CLR_S  10
/** MCPWM_FAULT2_INT_CLR:WT；位位置：[11]；默认值：0；设置此位以清除fault_event2启动时触发的中断。
 */
#define MCPWM_FAULT2_INT_CLR    (BIT(11))
#define MCPWM_FAULT2_INT_CLR_M  (MCPWM_FAULT2_INT_CLR_V << MCPWM_FAULT2_INT_CLR_S)
#define MCPWM_FAULT2_INT_CLR_V  0x00000001U
#define MCPWM_FAULT2_INT_CLR_S  11
/** MCPWM_FAULT0_CLR_INT_CLR:WT；位位置：[12]；默认值：0；设置此位以清除fault_event0结束时触发的中断。
 */
#define MCPWM_FAULT0_CLR_INT_CLR    (BIT(12))
#define MCPWM_FAULT0_CLR_INT_CLR_M  (MCPWM_FAULT0_CLR_INT_CLR_V << MCPWM_FAULT0_CLR_INT_CLR_S)
#define MCPWM_FAULT0_CLR_INT_CLR_V  0x00000001U
#define MCPWM_FAULT0_CLR_INT_CLR_S  12
/** MCPWM_FAULT1_CLR_INT_CLR:WT；位位置：[13]；默认值：0；设置此位以清除fault_event1结束时触发的中断。
 */
#define MCPWM_FAULT1_CLR_INT_CLR    (BIT(13))
#define MCPWM_FAULT1_CLR_INT_CLR_M  (MCPWM_FAULT1_CLR_INT_CLR_V << MCPWM_FAULT1_CLR_INT_CLR_S)
#define MCPWM_FAULT1_CLR_INT_CLR_V  0x00000001U
#define MCPWM_FAULT1_CLR_INT_CLR_S  13
/** MCPWM_FAULT2_CLR_INT_CLR:WT；位位置：[14]；默认值：0；设置此位以清除fault_event2结束时触发的中断。
 */
#define MCPWM_FAULT2_CLR_INT_CLR    (BIT(14))
#define MCPWM_FAULT2_CLR_INT_CLR_M  (MCPWM_FAULT2_CLR_INT_CLR_V << MCPWM_FAULT2_CLR_INT_CLR_S)
#define MCPWM_FAULT2_CLR_INT_CLR_V  0x00000001U
#define MCPWM_FAULT2_CLR_INT_CLR_S  14
/** MCPWM_OP0_TEA_INT_CLR:WT；位位置：[15]；默认值：0；设置此位以清除PWM操作员0 TEA事件触发的中断
 */
#define MCPWM_OP0_TEA_INT_CLR    (BIT(15))
#define MCPWM_OP0_TEA_INT_CLR_M  (MCPWM_OP0_TEA_INT_CLR_V << MCPWM_OP0_TEA_INT_CLR_S)
#define MCPWM_OP0_TEA_INT_CLR_V  0x00000001U
#define MCPWM_OP0_TEA_INT_CLR_S  15
/** MCPWM_OP1_TEA_INT_CLR:WT；位位置：[16]；默认值：0；设置此位以清除PWM操作员1 TEA事件触发的中断
 */
#define MCPWM_OP1_TEA_INT_CLR    (BIT(16))
#define MCPWM_OP1_TEA_INT_CLR_M  (MCPWM_OP1_TEA_INT_CLR_V << MCPWM_OP1_TEA_INT_CLR_S)
#define MCPWM_OP1_TEA_INT_CLR_V  0x00000001U
#define MCPWM_OP1_TEA_INT_CLR_S  16
/** MCPWM_OP2_TEA_INT_CLR:WT；位位置：[17]；默认值：0；设置此位以清除PWM操作员2 TEA事件触发的中断
 */
#define MCPWM_OP2_TEA_INT_CLR    (BIT(17))
#define MCPWM_OP2_TEA_INT_CLR_M  (MCPWM_OP2_TEA_INT_CLR_V << MCPWM_OP2_TEA_INT_CLR_S)
#define MCPWM_OP2_TEA_INT_CLR_V  0x00000001U
#define MCPWM_OP2_TEA_INT_CLR_S  17
/** MCPWM_OP0_TEB_INT_CLR:WT；位位置：[18]；默认值：0；设置此位以清除PWM操作员0 TEB事件触发的中断
 */
#define MCPWM_OP0_TEB_INT_CLR    (BIT(18))
#define MCPWM_OP0_TEB_INT_CLR_M  (MCPWM_OP0_TEB_INT_CLR_V << MCPWM_OP0_TEB_INT_CLR_S)
#define MCPWM_OP0_TEB_INT_CLR_V  0x00000001U
#define MCPWM_OP0_TEB_INT_CLR_S  18
/** MCPWM_OP1_TEB_INT_CLR:WT；位位置：[19]；默认值：0；设置此位以清除PWM操作员1 TEB事件触发的中断
 */
#define MCPWM_OP1_TEB_INT_CLR    (BIT(19))
#define MCPWM_OP1_TEB_INT_CLR_M  (MCPWM_OP1_TEB_INT_CLR_V << MCPWM_OP1_TEB_INT_CLR_S)
#define MCPWM_OP1_TEB_INT_CLR_V  0x00000001U
#define MCPWM_OP1_TEB_INT_CLR_S  19
/** MCPWM_OP2_TEB_INT_CLR:WT；位位置：[20]；默认值：0；设置此位以清除PWM操作员2 TEB事件触发的中断
 */
#define MCPWM_OP2_TEB_INT_CLR    (BIT(20))
#define MCPWM_OP2_TEB_INT_CLR_M  (MCPWM_OP2_TEB_INT_CLR_V << MCPWM_OP2_TEB_INT_CLR_S)
#define MCPWM_OP2_TEB_INT_CLR_V  0x00000001U
#define MCPWM_OP2_TEB_INT_CLR_S  20
/** MCPWM_FH0_CBC_INT_CLR:WT；位位置：[21]；默认值：0；设置此位以清除由PWM0上的逐周期模式动作触发的中断。
 */
#define MCPWM_FH0_CBC_INT_CLR    (BIT(21))
#define MCPWM_FH0_CBC_INT_CLR_M  (MCPWM_FH0_CBC_INT_CLR_V << MCPWM_FH0_CBC_INT_CLR_S)
#define MCPWM_FH0_CBC_INT_CLR_V  0x00000001U
#define MCPWM_FH0_CBC_INT_CLR_S  21
/** MCPWM_FH1_CBC_INT_CLR:WT；位位置：[22]；默认值：0；设置该位以清除由PWM1上的逐周期模式动作触发的中断。
 */
#define MCPWM_FH1_CBC_INT_CLR    (BIT(22))
#define MCPWM_FH1_CBC_INT_CLR_M  (MCPWM_FH1_CBC_INT_CLR_V << MCPWM_FH1_CBC_INT_CLR_S)
#define MCPWM_FH1_CBC_INT_CLR_V  0x00000001U
#define MCPWM_FH1_CBC_INT_CLR_S  22
/** MCPWM_FH2_CBC_INT_CLR:WT；位位置：[23]；默认值：0；设置此位以清除由PWM2上的逐周期模式动作触发的中断。
 */
#define MCPWM_FH2_CBC_INT_CLR    (BIT(23))
#define MCPWM_FH2_CBC_INT_CLR_M  (MCPWM_FH2_CBC_INT_CLR_V << MCPWM_FH2_CBC_INT_CLR_S)
#define MCPWM_FH2_CBC_INT_CLR_V  0x00000001U
#define MCPWM_FH2_CBC_INT_CLR_S  23
/** MCPWM_FH0_OST_INT_CLR:WT；位位置：[24]；默认值：0；设置此位以清除由PWM0上的单次模式动作触发的中断。
 */
#define MCPWM_FH0_OST_INT_CLR    (BIT(24))
#define MCPWM_FH0_OST_INT_CLR_M  (MCPWM_FH0_OST_INT_CLR_V << MCPWM_FH0_OST_INT_CLR_S)
#define MCPWM_FH0_OST_INT_CLR_V  0x00000001U
#define MCPWM_FH0_OST_INT_CLR_S  24
/** MCPWM_FH1_OST_INT_CLR:WT；位位置：[25]；默认值：0；设置该位以清除由PWM1上的单触发模式动作触发的中断。
 */
#define MCPWM_FH1_OST_INT_CLR    (BIT(25))
#define MCPWM_FH1_OST_INT_CLR_M  (MCPWM_FH1_OST_INT_CLR_V << MCPWM_FH1_OST_INT_CLR_S)
#define MCPWM_FH1_OST_INT_CLR_V  0x00000001U
#define MCPWM_FH1_OST_INT_CLR_S  25
/** MCPWM_FH2_OST_INT_CLR:WT；位位置：[26]；默认值：0；设置该位以清除由PWM2上的单触发模式动作触发的中断。
 */
#define MCPWM_FH2_OST_INT_CLR    (BIT(26))
#define MCPWM_FH2_OST_INT_CLR_M  (MCPWM_FH2_OST_INT_CLR_V << MCPWM_FH2_OST_INT_CLR_S)
#define MCPWM_FH2_OST_INT_CLR_V  0x00000001U
#define MCPWM_FH2_OST_INT_CLR_S  26
/** MCPWM_CAP0_INT_CLR:WT；位位置：[27]；默认值：0；设置此位以清除通道0上捕获触发的中断。
 */
#define MCPWM_CAP0_INT_CLR    (BIT(27))
#define MCPWM_CAP0_INT_CLR_M  (MCPWM_CAP0_INT_CLR_V << MCPWM_CAP0_INT_CLR_S)
#define MCPWM_CAP0_INT_CLR_V  0x00000001U
#define MCPWM_CAP0_INT_CLR_S  27
/** MCPWM_CAP1_INT_CLR:WT；位位置：[28]；默认值：0；设置此位以清除通道1上捕获触发的中断。
 */
#define MCPWM_CAP1_INT_CLR    (BIT(28))
#define MCPWM_CAP1_INT_CLR_M  (MCPWM_CAP1_INT_CLR_V << MCPWM_CAP1_INT_CLR_S)
#define MCPWM_CAP1_INT_CLR_V  0x00000001U
#define MCPWM_CAP1_INT_CLR_S  28
/** MCPWM_CAP2_INT_CLR:WT；位位置：[29]；默认值：0；设置此位以清除通道2上捕获触发的中断。
 */
#define MCPWM_CAP2_INT_CLR    (BIT(29))
#define MCPWM_CAP2_INT_CLR_M  (MCPWM_CAP2_INT_CLR_V << MCPWM_CAP2_INT_CLR_S)
#define MCPWM_CAP2_INT_CLR_V  0x00000001U
#define MCPWM_CAP2_INT_CLR_S  29

/** MCPWM_CLK_REG寄存器MCPWM APB配置寄存器
 */
#define MCPWM_CLK_REG(i) (DR_REG_MCPWM_BASE(i) + 0x120)
/** MCPWM_CLK_EN:R/W；位位置：[0]；默认值：0；强制打开此寄存器文件的时钟
 */
#define MCPWM_CLK_EN    (BIT(0))
#define MCPWM_CLK_EN_M  (MCPWM_CLK_EN_V << MCPWM_CLK_EN_S)
#define MCPWM_CLK_EN_V  0x00000001U
#define MCPWM_CLK_EN_S  0

/** MCPWM_VERSION_REG寄存器版本寄存器。
 */
#define MCPWM_VERSION_REG(i) (DR_REG_MCPWM_BASE(i) + 0x124)
/** MCPWM_DATE:R/W；位位置：[27:0]；默认值：34632240；此注册文件的版本
 */
#define MCPWM_DATE    0x0FFFFFFFU
#define MCPWM_DATE_M  (MCPWM_DATE_V << MCPWM_DATE_S)
#define MCPWM_DATE_V  0x0FFFFFFFU
#define MCPWM_DATE_S  0

#ifdef __cplusplus
}
#endif

