/*
 * SPDX文件版权文本：2021浓缩咖啡系统（上海）有限公司
 *
 * SPDX许可证标识符：Apache-2.0
 */
#pragma once

#include <stdint.h>
#include "soc/soc.h"
#ifdef __cplusplus
extern "C" {
#endif

/** LCD_CAM_LCD_CLOCK_REG寄存器LCD时钟寄存器
 */
#define LCD_CAM_LCD_CLOCK_REG (DR_REG_LCD_CAM_BASE + 0x0)
/** LCD_CAM_LCD_CLKCNT_N:R/W；比特位置：[5:0]；默认值：3；当reg_CLK_equ_sysclk为0时，f_LCD_PCLK=f_LCD_CLK/（reg_clkcnt_N+1）。
 */
#define LCD_CAM_LCD_CLKCNT_N    0x0000003FU
#define LCD_CAM_LCD_CLKCNT_N_M  (LCD_CAM_LCD_CLKCNT_N_V << LCD_CAM_LCD_CLKCNT_N_S)
#define LCD_CAM_LCD_CLKCNT_N_V  0x0000003FU
#define LCD_CAM_LCD_CLKCNT_N_S  0
/** LCD_CAM_LCD_CLK_EQU_SYSCLK:R/W；位位置：[6]；默认值：1；1： f_LCD_PCLK＝f_LCD_CLK。0:f_LCD_PCLK=f_LCD_CLK/（reg_clkcnt_N+1）。
 */
#define LCD_CAM_LCD_CLK_EQU_SYSCLK    (BIT(6))
#define LCD_CAM_LCD_CLK_EQU_SYSCLK_M  (LCD_CAM_LCD_CLK_EQU_SYSCLK_V << LCD_CAM_LCD_CLK_EQU_SYSCLK_S)
#define LCD_CAM_LCD_CLK_EQU_SYSCLK_V  0x00000001U
#define LCD_CAM_LCD_CLK_EQU_SYSCLK_S  6
/** LCD_CAM_LCD_CK_inidle_EDGE：R/W；位位置：[7]；默认值：0；1： LCD_PCLK线在空闲0时为高电平：LCD_PCLK线在闲置时为低电平。
 */
#define LCD_CAM_LCD_CK_IDLE_EDGE    (BIT(7))
#define LCD_CAM_LCD_CK_IDLE_EDGE_M  (LCD_CAM_LCD_CK_IDLE_EDGE_V << LCD_CAM_LCD_CK_IDLE_EDGE_S)
#define LCD_CAM_LCD_CK_IDLE_EDGE_V  0x00000001U
#define LCD_CAM_LCD_CK_IDLE_EDGE_S  7
/** LCD_CAM_LCD_CK_OUT_EDGE:R/W；位位置：[8]；默认值：0；1： LCD_PCLK在前半个时钟周期中为高电平。0:LCD_PCLK在前半个时钟周期低。
 */
#define LCD_CAM_LCD_CK_OUT_EDGE    (BIT(8))
#define LCD_CAM_LCD_CK_OUT_EDGE_M  (LCD_CAM_LCD_CK_OUT_EDGE_V << LCD_CAM_LCD_CK_OUT_EDGE_S)
#define LCD_CAM_LCD_CK_OUT_EDGE_V  0x00000001U
#define LCD_CAM_LCD_CK_OUT_EDGE_S  8
/** LCD_CAM_LCD_CLKM_DIV_NUM:R/W；比特位置：[16:9]；默认值：4；积分LCD时钟分频器值
 */
#define LCD_CAM_LCD_CLKM_DIV_NUM    0x000000FFU
#define LCD_CAM_LCD_CLKM_DIV_NUM_M  (LCD_CAM_LCD_CLKM_DIV_NUM_V << LCD_CAM_LCD_CLKM_DIV_NUM_S)
#define LCD_CAM_LCD_CLKM_DIV_NUM_V  0x000000FFU
#define LCD_CAM_LCD_CLKM_DIV_NUM_S  9
/** LCD_CAM_LCD_CLKM_DIV_B:R/W；比特位置：[22:17]；默认值：0；分数分频器分子值
 */
#define LCD_CAM_LCD_CLKM_DIV_B    0x0000003FU
#define LCD_CAM_LCD_CLKM_DIV_B_M  (LCD_CAM_LCD_CLKM_DIV_B_V << LCD_CAM_LCD_CLKM_DIV_B_S)
#define LCD_CAM_LCD_CLKM_DIV_B_V  0x0000003FU
#define LCD_CAM_LCD_CLKM_DIV_B_S  17
/** LCD_CAM_LCD_CLKM_DIV_A:R/W；位位置：[28:23]；默认值：0；分数分频器分母值
 */
#define LCD_CAM_LCD_CLKM_DIV_A    0x0000003FU
#define LCD_CAM_LCD_CLKM_DIV_A_M  (LCD_CAM_LCD_CLKM_DIV_A_V << LCD_CAM_LCD_CLKM_DIV_A_S)
#define LCD_CAM_LCD_CLKM_DIV_A_V  0x0000003FU
#define LCD_CAM_LCD_CLKM_DIV_A_S  23
/** LCD_CAM_LCD_CLK_SEL:R/W；位位置：[30:29]；默认值：0；选择LCD模块源时钟。0：无时钟。1： 应用程序。2： CLK160.3：无时钟。
 */
#define LCD_CAM_LCD_CLK_SEL    0x00000003U
#define LCD_CAM_LCD_CLK_SEL_M  (LCD_CAM_LCD_CLK_SEL_V << LCD_CAM_LCD_CLK_SEL_S)
#define LCD_CAM_LCD_CLK_SEL_V  0x00000003U
#define LCD_CAM_LCD_CLK_SEL_S  29
/** LCD_CAM_CLK_EN:R/W；位位置：[31]；默认值：0；设置此位以启用clk门
 */
#define LCD_CAM_CLK_EN    (BIT(31))
#define LCD_CAM_CLK_EN_M  (LCD_CAM_CLK_EN_V << LCD_CAM_CLK_EN_S)
#define LCD_CAM_CLK_EN_V  0x00000001U
#define LCD_CAM_CLK_EN_S  31

/** LCD_CAM_CAM_CTRL_REG寄存器相机配置寄存器
 */
#define LCD_CAM_CAM_CTRL_REG (DR_REG_LCD_CAM_BASE + 0x4)
/** LCD_CAM_CAM_STOP_EN:R/W；位位置：[0]；默认值：0；相机停止启用信号，1：DMA Rx FIFO满时相机停止。0：不停止。
 */
#define LCD_CAM_CAM_STOP_EN    (BIT(0))
#define LCD_CAM_CAM_STOP_EN_M  (LCD_CAM_CAM_STOP_EN_V << LCD_CAM_CAM_STOP_EN_S)
#define LCD_CAM_CAM_STOP_EN_V  0x00000001U
#define LCD_CAM_CAM_STOP_EN_S  0
/** LCD_CAM_CAM_VSYNC_FILTER_threes:R/W；位位置：[3:1]；默认值：0；CAM_VSYNC信号的滤波器阈值。
 */
#define LCD_CAM_CAM_VSYNC_FILTER_THRES    0x00000007U
#define LCD_CAM_CAM_VSYNC_FILTER_THRES_M  (LCD_CAM_CAM_VSYNC_FILTER_THRES_V << LCD_CAM_CAM_VSYNC_FILTER_THRES_S)
#define LCD_CAM_CAM_VSYNC_FILTER_THRES_V  0x00000007U
#define LCD_CAM_CAM_VSYNC_FILTER_THRES_S  1
/** LCD_CAM_CAM_UPDATE_REG:R/W；位位置：[4]；默认值：0；1： 更新摄像头寄存器，将由硬件清除。0：没关系。
 */
#define LCD_CAM_CAM_UPDATE_REG    (BIT(4))
#define LCD_CAM_CAM_UPDATE_REG_M  (LCD_CAM_CAM_UPDATE_REG_V << LCD_CAM_CAM_UPDATE_REG_S)
#define LCD_CAM_CAM_UPDATE_REG_V  0x00000001U
#define LCD_CAM_CAM_UPDATE_REG_S  4
/** LCD_CAM_CAM_BYTE_ORDER:R/W；位位置：[5]；默认值：0；1： 更改数据位顺序，在单字节模式中将CAM_data_in[7:0]更改为CAM_data.in[0:7]，在双字节模式中将位[15:0]更改为位[0:15]。0：没有变化。
 */
#define LCD_CAM_CAM_BYTE_ORDER    (BIT(5))
#define LCD_CAM_CAM_BYTE_ORDER_M  (LCD_CAM_CAM_BYTE_ORDER_V << LCD_CAM_CAM_BYTE_ORDER_S)
#define LCD_CAM_CAM_BYTE_ORDER_V  0x00000001U
#define LCD_CAM_CAM_BYTE_ORDER_S  5
/** LCD_CAM_CAM_BIT_ORDER:R/W；位位置：[6]；默认值：0；1： 反转数据字节顺序，仅在2字节模式下有效。0：没有变化。
 */
#define LCD_CAM_CAM_BIT_ORDER    (BIT(6))
#define LCD_CAM_CAM_BIT_ORDER_M  (LCD_CAM_CAM_BIT_ORDER_V << LCD_CAM_CAM_BIT_ORDER_S)
#define LCD_CAM_CAM_BIT_ORDER_V  0x00000001U
#define LCD_CAM_CAM_BIT_ORDER_S  6
/** LCD_CAM_CAM-LINE_INT_EN:R/W；位位置：[7]；默认值：0；1： 启用以生成CAM_HS_INT。0：禁用。
 */
#define LCD_CAM_CAM_LINE_INT_EN    (BIT(7))
#define LCD_CAM_CAM_LINE_INT_EN_M  (LCD_CAM_CAM_LINE_INT_EN_V << LCD_CAM_CAM_LINE_INT_EN_S)
#define LCD_CAM_CAM_LINE_INT_EN_V  0x00000001U
#define LCD_CAM_CAM_LINE_INT_EN_S  7
/** LCD_CAM_CAM_VS_EOF_EN:R/W；位位置：[8]；默认值：0；1： CAM_VSYNC生成in_suc_eof。0:in_suc_eof由reg_cam_rec_data_cyclelen控制。
 */
#define LCD_CAM_CAM_VS_EOF_EN    (BIT(8))
#define LCD_CAM_CAM_VS_EOF_EN_M  (LCD_CAM_CAM_VS_EOF_EN_V << LCD_CAM_CAM_VS_EOF_EN_S)
#define LCD_CAM_CAM_VS_EOF_EN_V  0x00000001U
#define LCD_CAM_CAM_VS_EOF_EN_S  8
/** LCD_CAM_CAM_CLKM_DIV_NUM:R/W；比特位置：[16:9]；默认值：4；积分相机时钟分频器值
 */
#define LCD_CAM_CAM_CLKM_DIV_NUM    0x000000FFU
#define LCD_CAM_CAM_CLKM_DIV_NUM_M  (LCD_CAM_CAM_CLKM_DIV_NUM_V << LCD_CAM_CAM_CLKM_DIV_NUM_S)
#define LCD_CAM_CAM_CLKM_DIV_NUM_V  0x000000FFU
#define LCD_CAM_CAM_CLKM_DIV_NUM_S  9
/** LCD_CAM_CAM_CLKM_DIV_B:R/W；比特位置：[22:17]；默认值：0；分数分频器分子值
 */
#define LCD_CAM_CAM_CLKM_DIV_B    0x0000003FU
#define LCD_CAM_CAM_CLKM_DIV_B_M  (LCD_CAM_CAM_CLKM_DIV_B_V << LCD_CAM_CAM_CLKM_DIV_B_S)
#define LCD_CAM_CAM_CLKM_DIV_B_V  0x0000003FU
#define LCD_CAM_CAM_CLKM_DIV_B_S  17
/** LCD_CAM_CAM_CLKM_DIV_A:R/W；位位置：[28:23]；默认值：0；分数分频器分母值
 */
#define LCD_CAM_CAM_CLKM_DIV_A    0x0000003FU
#define LCD_CAM_CAM_CLKM_DIV_A_M  (LCD_CAM_CAM_CLKM_DIV_A_V << LCD_CAM_CAM_CLKM_DIV_A_S)
#define LCD_CAM_CAM_CLKM_DIV_A_V  0x0000003FU
#define LCD_CAM_CAM_CLKM_DIV_A_S  23
/** LCD_CAM_CAM_CLK_SEL:R/W；位位置：[30:29]；默认值：0；选择相机模块源时钟。0：无时钟。1： 应用程序。2： CLK160.3：无时钟。
 */
#define LCD_CAM_CAM_CLK_SEL    0x00000003U
#define LCD_CAM_CAM_CLK_SEL_M  (LCD_CAM_CAM_CLK_SEL_V << LCD_CAM_CAM_CLK_SEL_S)
#define LCD_CAM_CAM_CLK_SEL_V  0x00000003U
#define LCD_CAM_CAM_CLK_SEL_S  29

/** LCD_CAM_CAM_CTRL1_REG寄存器相机配置寄存器
 */
#define LCD_CAM_CAM_CTRL1_REG (DR_REG_LCD_CAM_BASE + 0x8)
/** LCD_CAM_CAM_REC_DATA_BYTELEN:R/W；比特位置：[15:0]；默认值：0；摄像机接收数据字节长度减1以设置DMA in_suc_eof_int。
 */
#define LCD_CAM_CAM_REC_DATA_BYTELEN    0x0000FFFFU
#define LCD_CAM_CAM_REC_DATA_BYTELEN_M  (LCD_CAM_CAM_REC_DATA_BYTELEN_V << LCD_CAM_CAM_REC_DATA_BYTELEN_S)
#define LCD_CAM_CAM_REC_DATA_BYTELEN_V  0x0000FFFFU
#define LCD_CAM_CAM_REC_DATA_BYTELEN_S  0
/** LCD_CAM_CAM-LINE_INT_NUM:R/W；比特位置：[21:16]；默认值：0；行号减1以生成cam_hs_int。
 */
#define LCD_CAM_CAM_LINE_INT_NUM    0x0000003FU
#define LCD_CAM_CAM_LINE_INT_NUM_M  (LCD_CAM_CAM_LINE_INT_NUM_V << LCD_CAM_CAM_LINE_INT_NUM_S)
#define LCD_CAM_CAM_LINE_INT_NUM_V  0x0000003FU
#define LCD_CAM_CAM_LINE_INT_NUM_S  16
/** LCD_CAM_CAM_CLK_INV：R/W；位位置：[22]；默认值：0；1： 反转输入信号CAM_PCLK。0：不反转。
 */
#define LCD_CAM_CAM_CLK_INV    (BIT(22))
#define LCD_CAM_CAM_CLK_INV_M  (LCD_CAM_CAM_CLK_INV_V << LCD_CAM_CAM_CLK_INV_S)
#define LCD_CAM_CAM_CLK_INV_V  0x00000001U
#define LCD_CAM_CAM_CLK_INV_S  22
/** LCD_CAM_CAM_VSYNC_FILTER_EN:R/W；位位置：[23]；默认值：0；1： 启用CAM_VSYNC过滤器功能。0：旁路。
 */
#define LCD_CAM_CAM_VSYNC_FILTER_EN    (BIT(23))
#define LCD_CAM_CAM_VSYNC_FILTER_EN_M  (LCD_CAM_CAM_VSYNC_FILTER_EN_V << LCD_CAM_CAM_VSYNC_FILTER_EN_S)
#define LCD_CAM_CAM_VSYNC_FILTER_EN_V  0x00000001U
#define LCD_CAM_CAM_VSYNC_FILTER_EN_S  23
/** LCD_CAM_CAM_2BYTE_EN:R/W；位位置：[24]；默认值：0；1： 输入数据的位数为9～16。0：输入数据的位位数为0～8。
 */
#define LCD_CAM_CAM_2BYTE_EN    (BIT(24))
#define LCD_CAM_CAM_2BYTE_EN_M  (LCD_CAM_CAM_2BYTE_EN_V << LCD_CAM_CAM_2BYTE_EN_S)
#define LCD_CAM_CAM_2BYTE_EN_V  0x00000001U
#define LCD_CAM_CAM_2BYTE_EN_S  24
/** LCD_CAM_CAM_DE_INV:R/W；位位置：[25]；默认值：0；CAM_DE反相启用信号，高电平有效。
 */
#define LCD_CAM_CAM_DE_INV    (BIT(25))
#define LCD_CAM_CAM_DE_INV_M  (LCD_CAM_CAM_DE_INV_V << LCD_CAM_CAM_DE_INV_S)
#define LCD_CAM_CAM_DE_INV_V  0x00000001U
#define LCD_CAM_CAM_DE_INV_S  25
/** LCD_CAM_CAM-HSYNC_INV：R/W；位位置：[26]；默认值：0；CAM_HSYNC反相启用信号，高电平有效。
 */
#define LCD_CAM_CAM_HSYNC_INV    (BIT(26))
#define LCD_CAM_CAM_HSYNC_INV_M  (LCD_CAM_CAM_HSYNC_INV_V << LCD_CAM_CAM_HSYNC_INV_S)
#define LCD_CAM_CAM_HSYNC_INV_V  0x00000001U
#define LCD_CAM_CAM_HSYNC_INV_S  26
/** LCD_CAM_CAM.VSYNC_INV:R/W；位位置：[27]；默认值：0；CAM_VSYNC反相启用信号，高电平有效。
 */
#define LCD_CAM_CAM_VSYNC_INV    (BIT(27))
#define LCD_CAM_CAM_VSYNC_INV_M  (LCD_CAM_CAM_VSYNC_INV_V << LCD_CAM_CAM_VSYNC_INV_S)
#define LCD_CAM_CAM_VSYNC_INV_V  0x00000001U
#define LCD_CAM_CAM_VSYNC_INV_S  27
/** LCD_CAM_CAM_VH_DE_MODE_EN:R/W；位位置：[28]；默认值：0；1： 输入控制信号为CAM_DE CAM_HSYNC和CAM_VSYNC。0：输入控制信号是CAM_DE和CAM_VYNC。CAM_HSYNC和CAM_DE同时为1。
 */
#define LCD_CAM_CAM_VH_DE_MODE_EN    (BIT(28))
#define LCD_CAM_CAM_VH_DE_MODE_EN_M  (LCD_CAM_CAM_VH_DE_MODE_EN_V << LCD_CAM_CAM_VH_DE_MODE_EN_S)
#define LCD_CAM_CAM_VH_DE_MODE_EN_V  0x00000001U
#define LCD_CAM_CAM_VH_DE_MODE_EN_S  28
/** LCD_CAM_CAM_START:R/W；位位置：[29]；默认值：0；摄像头模块启动信号。
 */
#define LCD_CAM_CAM_START    (BIT(29))
#define LCD_CAM_CAM_START_M  (LCD_CAM_CAM_START_V << LCD_CAM_CAM_START_S)
#define LCD_CAM_CAM_START_V  0x00000001U
#define LCD_CAM_CAM_START_S  29
/** LCD_CAM_CAM_RESET：WO；位位置：[30]；默认值：0；摄像头模块复位信号。
 */
#define LCD_CAM_CAM_RESET    (BIT(30))
#define LCD_CAM_CAM_RESET_M  (LCD_CAM_CAM_RESET_V << LCD_CAM_CAM_RESET_S)
#define LCD_CAM_CAM_RESET_V  0x00000001U
#define LCD_CAM_CAM_RESET_S  30
/** LCD_CAM_CAM_AFIFO_RESET:WO；位位置：[31]；默认值：0；相机AFIFO复位信号。
 */
#define LCD_CAM_CAM_AFIFO_RESET    (BIT(31))
#define LCD_CAM_CAM_AFIFO_RESET_M  (LCD_CAM_CAM_AFIFO_RESET_V << LCD_CAM_CAM_AFIFO_RESET_S)
#define LCD_CAM_CAM_AFIFO_RESET_V  0x00000001U
#define LCD_CAM_CAM_AFIFO_RESET_S  31

/** LCD_CAM_CAM_RGB_YUV_REG寄存器相机配置寄存器
 */
#define LCD_CAM_CAM_RGB_YUV_REG (DR_REG_LCD_CAM_BASE + 0xc)
/** LCD_CAM_CAM_CONV_8BITS_DATA_INV:R/W；位位置：[21]；默认值：0；1： 每两个8位输入数据反相一次。2.禁用。
 */
#define LCD_CAM_CAM_CONV_8BITS_DATA_INV    (BIT(21))
#define LCD_CAM_CAM_CONV_8BITS_DATA_INV_M  (LCD_CAM_CAM_CONV_8BITS_DATA_INV_V << LCD_CAM_CAM_CONV_8BITS_DATA_INV_S)
#define LCD_CAM_CAM_CONV_8BITS_DATA_INV_V  0x00000001U
#define LCD_CAM_CAM_CONV_8BITS_DATA_INV_S  21
/** LCD_CAM_CAM_CONV_YUV2YUV_MODE：R/W；比特位置：[23:22]；默认值：3；0:到yuv422.1:到yuv420.2:到yuv411.3:禁用。要启用yuv2yuv模式，trans_mode必须设置为1。
 */
#define LCD_CAM_CAM_CONV_YUV2YUV_MODE    0x00000003U
#define LCD_CAM_CAM_CONV_YUV2YUV_MODE_M  (LCD_CAM_CAM_CONV_YUV2YUV_MODE_V << LCD_CAM_CAM_CONV_YUV2YUV_MODE_S)
#define LCD_CAM_CAM_CONV_YUV2YUV_MODE_V  0x00000003U
#define LCD_CAM_CAM_CONV_YUV2YUV_MODE_S  22
/** LCD_CAM_CAM_CONV_YUV_MODE：R/W；位位置：[25:24]；默认值：0；0:yuv422.1:yuv420.2:yuv411.当处于yuv2yuv模式时，yuv_mode决定Data_in的yuv模式
 */
#define LCD_CAM_CAM_CONV_YUV_MODE    0x00000003U
#define LCD_CAM_CAM_CONV_YUV_MODE_M  (LCD_CAM_CAM_CONV_YUV_MODE_V << LCD_CAM_CAM_CONV_YUV_MODE_S)
#define LCD_CAM_CAM_CONV_YUV_MODE_V  0x00000003U
#define LCD_CAM_CAM_CONV_YUV_MODE_S  24
/** LCD_CAM_CAM_CONV_协议模式：R/W；位位置：[26]；默认值：0；0:BT601。1:BT709。
 */
#define LCD_CAM_CAM_CONV_PROTOCOL_MODE    (BIT(26))
#define LCD_CAM_CAM_CONV_PROTOCOL_MODE_M  (LCD_CAM_CAM_CONV_PROTOCOL_MODE_V << LCD_CAM_CAM_CONV_PROTOCOL_MODE_S)
#define LCD_CAM_CAM_CONV_PROTOCOL_MODE_V  0x00000001U
#define LCD_CAM_CAM_CONV_PROTOCOL_MODE_S  26
/** LCD_CAM_CAM_CONV_DATA_OUT_MODE：R/W；位位置：[27]；默认值：0；数据输出的LIMIT或FULL模式。0：限制。1： 满的，满的
 */
#define LCD_CAM_CAM_CONV_DATA_OUT_MODE    (BIT(27))
#define LCD_CAM_CAM_CONV_DATA_OUT_MODE_M  (LCD_CAM_CAM_CONV_DATA_OUT_MODE_V << LCD_CAM_CAM_CONV_DATA_OUT_MODE_S)
#define LCD_CAM_CAM_CONV_DATA_OUT_MODE_V  0x00000001U
#define LCD_CAM_CAM_CONV_DATA_OUT_MODE_S  27
/** LCD_CAM_CAM_CONV_DATA_IN_MODE：R/W；位位置：[28]；默认值：0；数据输入的LIMIT或FULL模式。0：限制。1： 满的，满的
 */
#define LCD_CAM_CAM_CONV_DATA_IN_MODE    (BIT(28))
#define LCD_CAM_CAM_CONV_DATA_IN_MODE_M  (LCD_CAM_CAM_CONV_DATA_IN_MODE_V << LCD_CAM_CAM_CONV_DATA_IN_MODE_S)
#define LCD_CAM_CAM_CONV_DATA_IN_MODE_V  0x00000001U
#define LCD_CAM_CAM_CONV_DATA_IN_MODE_S  28
/** LCD_CAM_CAM_con_MODE_8BITS_ON:R/W；位位置：[29]；默认值：0；0:16位模式。1： 8位模式。
 */
#define LCD_CAM_CAM_CONV_MODE_8BITS_ON    (BIT(29))
#define LCD_CAM_CAM_CONV_MODE_8BITS_ON_M  (LCD_CAM_CAM_CONV_MODE_8BITS_ON_V << LCD_CAM_CAM_CONV_MODE_8BITS_ON_S)
#define LCD_CAM_CAM_CONV_MODE_8BITS_ON_V  0x00000001U
#define LCD_CAM_CAM_CONV_MODE_8BITS_ON_S  29
/** LCD_CAM_CAM_CONV_TRANS_MODE：R/W；位位置：[30]；默认值：0；0:YUV到RGB。1： RGB转换为YUV。
 */
#define LCD_CAM_CAM_CONV_TRANS_MODE    (BIT(30))
#define LCD_CAM_CAM_CONV_TRANS_MODE_M  (LCD_CAM_CAM_CONV_TRANS_MODE_V << LCD_CAM_CAM_CONV_TRANS_MODE_S)
#define LCD_CAM_CAM_CONV_TRANS_MODE_V  0x00000001U
#define LCD_CAM_CAM_CONV_TRANS_MODE_S  30
/** LCD_CAM_CAM_CONV_BYPASS:R/W；位位置：[31]；默认值：0；0：旁路转换器。1： 启用转换器。
 */
#define LCD_CAM_CAM_CONV_BYPASS    (BIT(31))
#define LCD_CAM_CAM_CONV_BYPASS_M  (LCD_CAM_CAM_CONV_BYPASS_V << LCD_CAM_CAM_CONV_BYPASS_S)
#define LCD_CAM_CAM_CONV_BYPASS_V  0x00000001U
#define LCD_CAM_CAM_CONV_BYPASS_S  31

/** LCD_CAM_LCD_RGB_YUV_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_RGB_YUV_REG (DR_REG_LCD_CAM_BASE + 0x10)
/** LCD_CAM_LCD_CONV_8BITS_DATA_INV:R/W；位位置：[20]；默认值：0；1： 每两个8位输入数据反相一次。2.禁用。
 */
#define LCD_CAM_LCD_CONV_8BITS_DATA_INV    (BIT(20))
#define LCD_CAM_LCD_CONV_8BITS_DATA_INV_M  (LCD_CAM_LCD_CONV_8BITS_DATA_INV_V << LCD_CAM_LCD_CONV_8BITS_DATA_INV_S)
#define LCD_CAM_LCD_CONV_8BITS_DATA_INV_V  0x00000001U
#define LCD_CAM_LCD_CONV_8BITS_DATA_INV_S  20
/** LCD_CAM_LCD_CONV_TXTORX:R/W；位位置：[21]；默认值：0；0:txtorx模式关闭。1:txtorx方式打开。
 */
#define LCD_CAM_LCD_CONV_TXTORX    (BIT(21))
#define LCD_CAM_LCD_CONV_TXTORX_M  (LCD_CAM_LCD_CONV_TXTORX_V << LCD_CAM_LCD_CONV_TXTORX_S)
#define LCD_CAM_LCD_CONV_TXTORX_V  0x00000001U
#define LCD_CAM_LCD_CONV_TXTORX_S  21
/** LCD_CAM_LCD_CONV_YUV2YUV_MODE:R/W；比特位置：[23:22]；默认值：3；0:到yuv422.1:到yuv420.2:到yuv411.3:禁用。要启用yuv2yuv模式，trans_mode必须设置为1。
 */
#define LCD_CAM_LCD_CONV_YUV2YUV_MODE    0x00000003U
#define LCD_CAM_LCD_CONV_YUV2YUV_MODE_M  (LCD_CAM_LCD_CONV_YUV2YUV_MODE_V << LCD_CAM_LCD_CONV_YUV2YUV_MODE_S)
#define LCD_CAM_LCD_CONV_YUV2YUV_MODE_V  0x00000003U
#define LCD_CAM_LCD_CONV_YUV2YUV_MODE_S  22
/** LCD_CAM_LCD_CONV_YUV_MODE：R/W；位位置：[25:24]；默认值：0；0:yuv422.1:yuv420.2:yuv411.当处于yuv2yuv模式时，yuv_mode决定Data_in的yuv模式
 */
#define LCD_CAM_LCD_CONV_YUV_MODE    0x00000003U
#define LCD_CAM_LCD_CONV_YUV_MODE_M  (LCD_CAM_LCD_CONV_YUV_MODE_V << LCD_CAM_LCD_CONV_YUV_MODE_S)
#define LCD_CAM_LCD_CONV_YUV_MODE_V  0x00000003U
#define LCD_CAM_LCD_CONV_YUV_MODE_S  24
/** LCD_CAM_LCD_CONV协议模式：R/W；位位置：[26]；默认值：0；0:BT601。1:BT709。
 */
#define LCD_CAM_LCD_CONV_PROTOCOL_MODE    (BIT(26))
#define LCD_CAM_LCD_CONV_PROTOCOL_MODE_M  (LCD_CAM_LCD_CONV_PROTOCOL_MODE_V << LCD_CAM_LCD_CONV_PROTOCOL_MODE_S)
#define LCD_CAM_LCD_CONV_PROTOCOL_MODE_V  0x00000001U
#define LCD_CAM_LCD_CONV_PROTOCOL_MODE_S  26
/** LCD_CAM_LCD_CONV_DATA_OUT_MODE：R/W；位位置：[27]；默认值：0；数据输出的LIMIT或FULL模式。0：限制。1： 满的，满的
 */
#define LCD_CAM_LCD_CONV_DATA_OUT_MODE    (BIT(27))
#define LCD_CAM_LCD_CONV_DATA_OUT_MODE_M  (LCD_CAM_LCD_CONV_DATA_OUT_MODE_V << LCD_CAM_LCD_CONV_DATA_OUT_MODE_S)
#define LCD_CAM_LCD_CONV_DATA_OUT_MODE_V  0x00000001U
#define LCD_CAM_LCD_CONV_DATA_OUT_MODE_S  27
/** LCD_CAM_LCD_CONV_DATA_IN_MODE模式：R/W；位位置：[28]；默认值：0；数据输入的LIMIT或FULL模式。0：限制。1： 满的，满的
 */
#define LCD_CAM_LCD_CONV_DATA_IN_MODE    (BIT(28))
#define LCD_CAM_LCD_CONV_DATA_IN_MODE_M  (LCD_CAM_LCD_CONV_DATA_IN_MODE_V << LCD_CAM_LCD_CONV_DATA_IN_MODE_S)
#define LCD_CAM_LCD_CONV_DATA_IN_MODE_V  0x00000001U
#define LCD_CAM_LCD_CONV_DATA_IN_MODE_S  28
/** LCD_CAM_LCD_CONV_MODE_8BITS_ON:R/W；位位置：[29]；默认值：0；0:16位模式。1： 8位模式。
 */
#define LCD_CAM_LCD_CONV_MODE_8BITS_ON    (BIT(29))
#define LCD_CAM_LCD_CONV_MODE_8BITS_ON_M  (LCD_CAM_LCD_CONV_MODE_8BITS_ON_V << LCD_CAM_LCD_CONV_MODE_8BITS_ON_S)
#define LCD_CAM_LCD_CONV_MODE_8BITS_ON_V  0x00000001U
#define LCD_CAM_LCD_CONV_MODE_8BITS_ON_S  29
/** LCD_CAM_LCD_CONV_TRANS_MODE：R/W；位位置：[30]；默认值：0；0:YUV到RGB。1： RGB转换为YUV。
 */
#define LCD_CAM_LCD_CONV_TRANS_MODE    (BIT(30))
#define LCD_CAM_LCD_CONV_TRANS_MODE_M  (LCD_CAM_LCD_CONV_TRANS_MODE_V << LCD_CAM_LCD_CONV_TRANS_MODE_S)
#define LCD_CAM_LCD_CONV_TRANS_MODE_V  0x00000001U
#define LCD_CAM_LCD_CONV_TRANS_MODE_S  30
/** LCD_CAM_LCD_CONV_b旁路：R/W；位位置：[31]；默认值：0；0：旁路转换器。1： 启用转换器。
 */
#define LCD_CAM_LCD_CONV_BYPASS    (BIT(31))
#define LCD_CAM_LCD_CONV_BYPASS_M  (LCD_CAM_LCD_CONV_BYPASS_V << LCD_CAM_LCD_CONV_BYPASS_S)
#define LCD_CAM_LCD_CONV_BYPASS_V  0x00000001U
#define LCD_CAM_LCD_CONV_BYPASS_S  31

/** LCD_CAM_LCD_USER_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_USER_REG (DR_REG_LCD_CAM_BASE + 0x14)
/** LCD_CAM_LCD_DOUT_CYCLELEN:R/W；位位置：[12:0]；默认值：1；LCD模块的输出数据周期为负1。
 */
#define LCD_CAM_LCD_DOUT_CYCLELEN    0x00001FFFU
#define LCD_CAM_LCD_DOUT_CYCLELEN_M  (LCD_CAM_LCD_DOUT_CYCLELEN_V << LCD_CAM_LCD_DOUT_CYCLELEN_S)
#define LCD_CAM_LCD_DOUT_CYCLELEN_V  0x00001FFFU
#define LCD_CAM_LCD_DOUT_CYCLELEN_S  0
/** LCD_CAM_LCD_ALWAYS_OUT_EN:R/W；位位置：[13]；默认值：0；当LCD处于LCD_OUT状态时，LCD始终输出，除非清除reg_LCD_start或设置reg_LCD_reset。
 */
#define LCD_CAM_LCD_ALWAYS_OUT_EN    (BIT(13))
#define LCD_CAM_LCD_ALWAYS_OUT_EN_M  (LCD_CAM_LCD_ALWAYS_OUT_EN_V << LCD_CAM_LCD_ALWAYS_OUT_EN_S)
#define LCD_CAM_LCD_ALWAYS_OUT_EN_V  0x00000001U
#define LCD_CAM_LCD_ALWAYS_OUT_EN_S  13
/** LCD_CAM_LCD_8BITS_ORDER：R/W；位位置：[19]；默认值：0；1： 每两个数据字节反转一次，在1字节模式下有效。0：没有变化。
 */
#define LCD_CAM_LCD_8BITS_ORDER    (BIT(19))
#define LCD_CAM_LCD_8BITS_ORDER_M  (LCD_CAM_LCD_8BITS_ORDER_V << LCD_CAM_LCD_8BITS_ORDER_S)
#define LCD_CAM_LCD_8BITS_ORDER_V  0x00000001U
#define LCD_CAM_LCD_8BITS_ORDER_S  19
/** LCD_CAM_LCD_UPDATE_REG:R/W；位位置：[20]；默认值：0；1： 更新LCD寄存器，将由硬件清除。0：没关系。
 */
#define LCD_CAM_LCD_UPDATE_REG    (BIT(20))
#define LCD_CAM_LCD_UPDATE_REG_M  (LCD_CAM_LCD_UPDATE_REG_V << LCD_CAM_LCD_UPDATE_REG_S)
#define LCD_CAM_LCD_UPDATE_REG_V  0x00000001U
#define LCD_CAM_LCD_UPDATE_REG_S  20
/** LCD_CAM_LCD_BIT_ORDER:R/W；位位置：[21]；默认值：0；1： 更改数据位顺序，在单字节模式中将LCD_data_out[7:0]更改为LCD_data_out[0:7]，在双字节模式中将位[15:0]更改为位[0:15]。0：没有变化。
 */
#define LCD_CAM_LCD_BIT_ORDER    (BIT(21))
#define LCD_CAM_LCD_BIT_ORDER_M  (LCD_CAM_LCD_BIT_ORDER_V << LCD_CAM_LCD_BIT_ORDER_S)
#define LCD_CAM_LCD_BIT_ORDER_V  0x00000001U
#define LCD_CAM_LCD_BIT_ORDER_S  21
/** LCD_CAM_LCD_BYTE_ORDER:R/W；位位置：[22]；默认值：0；1： 反转数据字节顺序，仅在2字节模式下有效。0：没有变化。
 */
#define LCD_CAM_LCD_BYTE_ORDER    (BIT(22))
#define LCD_CAM_LCD_BYTE_ORDER_M  (LCD_CAM_LCD_BYTE_ORDER_V << LCD_CAM_LCD_BYTE_ORDER_S)
#define LCD_CAM_LCD_BYTE_ORDER_V  0x00000001U
#define LCD_CAM_LCD_BYTE_ORDER_S  22
/** LCD_CAM_LCD_2BYTE_EN:R/W；位位置：[23]；默认值：0；1： 输出LCD数据的位数为9～16。0：输出LCD数据位数为0～8。
 */
#define LCD_CAM_LCD_2BYTE_EN    (BIT(23))
#define LCD_CAM_LCD_2BYTE_EN_M  (LCD_CAM_LCD_2BYTE_EN_V << LCD_CAM_LCD_2BYTE_EN_S)
#define LCD_CAM_LCD_2BYTE_EN_V  0x00000001U
#define LCD_CAM_LCD_2BYTE_EN_S  23
/** LCD_CAM_LCD_DOUT:R/W；位位置：[24]；默认值：0；1： 当LCD启动时，能够按LCD顺序发送数据。0：禁用。
 */
#define LCD_CAM_LCD_DOUT    (BIT(24))
#define LCD_CAM_LCD_DOUT_M  (LCD_CAM_LCD_DOUT_V << LCD_CAM_LCD_DOUT_S)
#define LCD_CAM_LCD_DOUT_V  0x00000001U
#define LCD_CAM_LCD_DOUT_S  24
/** LCD_CAM_LCD_DUMMY:R/W；位位置：[25]；默认值：0；1： 当LCD启动时，启用LCD序列中的DUMMY阶段。0：禁用。
 */
#define LCD_CAM_LCD_DUMMY    (BIT(25))
#define LCD_CAM_LCD_DUMMY_M  (LCD_CAM_LCD_DUMMY_V << LCD_CAM_LCD_DUMMY_S)
#define LCD_CAM_LCD_DUMMY_V  0x00000001U
#define LCD_CAM_LCD_DUMMY_S  25
/** LCD_CAM_LCD_CMD:R/W；位位置：[26]；默认值：0；1： 当LCD启动时，能够按LCD顺序发送命令。0：禁用。
 */
#define LCD_CAM_LCD_CMD    (BIT(26))
#define LCD_CAM_LCD_CMD_M  (LCD_CAM_LCD_CMD_V << LCD_CAM_LCD_CMD_S)
#define LCD_CAM_LCD_CMD_V  0x00000001U
#define LCD_CAM_LCD_CMD_S  26
/** LCD_CAM_LCD_START:R/W；位位置：[27]；默认值：0；LCD开始发送数据使能信号，高电平有效。
 */
#define LCD_CAM_LCD_START    (BIT(27))
#define LCD_CAM_LCD_START_M  (LCD_CAM_LCD_START_V << LCD_CAM_LCD_START_S)
#define LCD_CAM_LCD_START_V  0x00000001U
#define LCD_CAM_LCD_START_S  27
/** LCD_CAM_LCD_RESET:WO；位位置：[28]；默认值：0；命令的值。
 */
#define LCD_CAM_LCD_RESET    (BIT(28))
#define LCD_CAM_LCD_RESET_M  (LCD_CAM_LCD_RESET_V << LCD_CAM_LCD_RESET_S)
#define LCD_CAM_LCD_RESET_V  0x00000001U
#define LCD_CAM_LCD_RESET_S  28
/** LCD_CAM_LCD_DUMMY_CYCLELEN:R/W；位位置：[30:29]；默认值：0；虚拟循环长度减1。
 */
#define LCD_CAM_LCD_DUMMY_CYCLELEN    0x00000003U
#define LCD_CAM_LCD_DUMMY_CYCLELEN_M  (LCD_CAM_LCD_DUMMY_CYCLELEN_V << LCD_CAM_LCD_DUMMY_CYCLELEN_S)
#define LCD_CAM_LCD_DUMMY_CYCLELEN_V  0x00000003U
#define LCD_CAM_LCD_DUMMY_CYCLELEN_S  29
/** LCD_CAM_LCD_CMD_2_CYCLE_EN:R/W；位位置：[31]；默认值：0；命令阶段的周期长度。1： 2个循环。0:1循环。
 */
#define LCD_CAM_LCD_CMD_2_CYCLE_EN    (BIT(31))
#define LCD_CAM_LCD_CMD_2_CYCLE_EN_M  (LCD_CAM_LCD_CMD_2_CYCLE_EN_V << LCD_CAM_LCD_CMD_2_CYCLE_EN_S)
#define LCD_CAM_LCD_CMD_2_CYCLE_EN_V  0x00000001U
#define LCD_CAM_LCD_CMD_2_CYCLE_EN_S  31

/** LCD_CAM_LCD_MISC_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_MISC_REG (DR_REG_LCD_CAM_BASE + 0x18)
/** LCD_CAM_LCD_AFIFO_THRESHOLD_NUM:R/W；比特位置：[5:1]；默认值：11；lcd_afifo的错误阈值数。
 */
#define LCD_CAM_LCD_AFIFO_THRESHOLD_NUM    0x0000001FU
#define LCD_CAM_LCD_AFIFO_THRESHOLD_NUM_M  (LCD_CAM_LCD_AFIFO_THRESHOLD_NUM_V << LCD_CAM_LCD_AFIFO_THRESHOLD_NUM_S)
#define LCD_CAM_LCD_AFIFO_THRESHOLD_NUM_V  0x0000001FU
#define LCD_CAM_LCD_AFIFO_THRESHOLD_NUM_S  1
/** LCD_CAM_LCD_VFK_CYCLELEN:R/W；位位置：[11:6]；默认值：3；LCD非RGB模式下的设置周期长度减1。
 */
#define LCD_CAM_LCD_VFK_CYCLELEN    0x0000003FU
#define LCD_CAM_LCD_VFK_CYCLELEN_M  (LCD_CAM_LCD_VFK_CYCLELEN_V << LCD_CAM_LCD_VFK_CYCLELEN_S)
#define LCD_CAM_LCD_VFK_CYCLELEN_V  0x0000003FU
#define LCD_CAM_LCD_VFK_CYCLELEN_S  6
/** LCD_CAM_LCD_VBK_CYCLELEN:R/W；比特位置：[24:12]；默认值：0；在LCD RGB模式下，垂直背面空白区域周期长度减1，或在LCD非RGB模式下的保持时间周期长度。
 */
#define LCD_CAM_LCD_VBK_CYCLELEN    0x00001FFFU
#define LCD_CAM_LCD_VBK_CYCLELEN_M  (LCD_CAM_LCD_VBK_CYCLELEN_V << LCD_CAM_LCD_VBK_CYCLELEN_S)
#define LCD_CAM_LCD_VBK_CYCLELEN_V  0x00001FFFU
#define LCD_CAM_LCD_VBK_CYCLELEN_S  12
/** LCD_CAM_LCD_NEXT_FRAME_EN:R/W；位位置：[25]；默认值：0；1： 发送当前帧时发送下一帧数据。0：当前帧发出时LCD停止。
 */
#define LCD_CAM_LCD_NEXT_FRAME_EN    (BIT(25))
#define LCD_CAM_LCD_NEXT_FRAME_EN_M  (LCD_CAM_LCD_NEXT_FRAME_EN_V << LCD_CAM_LCD_NEXT_FRAME_EN_S)
#define LCD_CAM_LCD_NEXT_FRAME_EN_V  0x00000001U
#define LCD_CAM_LCD_NEXT_FRAME_EN_S  25
/** LCD_CAM_LCD_BK_EN:R/W；位位置：[26]；默认值：0；1： LCD发送数据时启用空白区域。0：无空白区域。
 */
#define LCD_CAM_LCD_BK_EN    (BIT(26))
#define LCD_CAM_LCD_BK_EN_M  (LCD_CAM_LCD_BK_EN_V << LCD_CAM_LCD_BK_EN_S)
#define LCD_CAM_LCD_BK_EN_V  0x00000001U
#define LCD_CAM_LCD_BK_EN_S  26
/** LCD_CAM_LCD_AFIFO重置：WO；位位置：[27]；默认值：0；LCD AFIFO复位信号。
 */
#define LCD_CAM_LCD_AFIFO_RESET    (BIT(27))
#define LCD_CAM_LCD_AFIFO_RESET_M  (LCD_CAM_LCD_AFIFO_RESET_V << LCD_CAM_LCD_AFIFO_RESET_S)
#define LCD_CAM_LCD_AFIFO_RESET_V  0x00000001U
#define LCD_CAM_LCD_AFIFO_RESET_S  27
/** LCD_CAM_LCD_CD_DATA_SET:R/W；位位置：[28]；默认值：0；1： LCD_CD=！当lcd_st[2:0]处于lcd_OUT状态时，reg_cd_idle_edge。0:LCD_CD=reg_CD_idle_edge。
 */
#define LCD_CAM_LCD_CD_DATA_SET    (BIT(28))
#define LCD_CAM_LCD_CD_DATA_SET_M  (LCD_CAM_LCD_CD_DATA_SET_V << LCD_CAM_LCD_CD_DATA_SET_S)
#define LCD_CAM_LCD_CD_DATA_SET_V  0x00000001U
#define LCD_CAM_LCD_CD_DATA_SET_S  28
/** LCD_CAM_LCD_CD_DUMMY_SET:R/W；位位置：[29]；默认值：0；1： LCD_CD=！当lcd_st[2:0]处于lcd_DUMMY状态时，reg_cd_idle_edge。0:LCD_CD=reg_CD_idle_edge。
 */
#define LCD_CAM_LCD_CD_DUMMY_SET    (BIT(29))
#define LCD_CAM_LCD_CD_DUMMY_SET_M  (LCD_CAM_LCD_CD_DUMMY_SET_V << LCD_CAM_LCD_CD_DUMMY_SET_S)
#define LCD_CAM_LCD_CD_DUMMY_SET_V  0x00000001U
#define LCD_CAM_LCD_CD_DUMMY_SET_S  29
/** LCD_CAM_LCD_CD_CMD_SET:R/W；位位置：[30]；默认值：0；1： LCD_CD=！当lcd_st[2:0]处于lcd_CMD状态时，reg_cd_idle_edge。0:LCD_CD=reg_CD_idle_edge。
 */
#define LCD_CAM_LCD_CD_CMD_SET    (BIT(30))
#define LCD_CAM_LCD_CD_CMD_SET_M  (LCD_CAM_LCD_CD_CMD_SET_V << LCD_CAM_LCD_CD_CMD_SET_S)
#define LCD_CAM_LCD_CD_CMD_SET_V  0x00000001U
#define LCD_CAM_LCD_CD_CMD_SET_S  30
/** LCD_CAM_LCD_CD_IDLE_EDGE：R/W；位位置：[31]；默认值：0；LCD_CD的默认值。
 */
#define LCD_CAM_LCD_CD_IDLE_EDGE    (BIT(31))
#define LCD_CAM_LCD_CD_IDLE_EDGE_M  (LCD_CAM_LCD_CD_IDLE_EDGE_V << LCD_CAM_LCD_CD_IDLE_EDGE_S)
#define LCD_CAM_LCD_CD_IDLE_EDGE_V  0x00000001U
#define LCD_CAM_LCD_CD_IDLE_EDGE_S  31

/** LCD_CAM_LCD_CTRL_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_CTRL_REG (DR_REG_LCD_CAM_BASE + 0x1c)
/** LCD_CAM_LCD_HB_FRONT:R/W；位位置：[10:0]；默认值：0；它是框架的水平空白前门廊。
 */
#define LCD_CAM_LCD_HB_FRONT    0x000007FFU
#define LCD_CAM_LCD_HB_FRONT_M  (LCD_CAM_LCD_HB_FRONT_V << LCD_CAM_LCD_HB_FRONT_S)
#define LCD_CAM_LCD_HB_FRONT_V  0x000007FFU
#define LCD_CAM_LCD_HB_FRONT_S  0
/** LCD_CAM_LCD_VA_高度：R/W；比特位置：[20:11]；默认值：0；它是框架的垂直活动高度。
 */
#define LCD_CAM_LCD_VA_HEIGHT    0x000003FFU
#define LCD_CAM_LCD_VA_HEIGHT_M  (LCD_CAM_LCD_VA_HEIGHT_V << LCD_CAM_LCD_VA_HEIGHT_S)
#define LCD_CAM_LCD_VA_HEIGHT_V  0x000003FFU
#define LCD_CAM_LCD_VA_HEIGHT_S  11
/** LCD_CAM_LCD_VT_HEIGHT:R/W；位位置：[30:21]；默认值：0；它是框架的垂直总高度。
 */
#define LCD_CAM_LCD_VT_HEIGHT    0x000003FFU
#define LCD_CAM_LCD_VT_HEIGHT_M  (LCD_CAM_LCD_VT_HEIGHT_V << LCD_CAM_LCD_VT_HEIGHT_S)
#define LCD_CAM_LCD_VT_HEIGHT_V  0x000003FFU
#define LCD_CAM_LCD_VT_HEIGHT_S  21
/** LCD_CAM_LCD_RGB_MODE_EN:R/W；位位置：[31]；默认值：0；1： 启用注册模式输入vsync、hsync、de.0：禁用。
 */
#define LCD_CAM_LCD_RGB_MODE_EN    (BIT(31))
#define LCD_CAM_LCD_RGB_MODE_EN_M  (LCD_CAM_LCD_RGB_MODE_EN_V << LCD_CAM_LCD_RGB_MODE_EN_S)
#define LCD_CAM_LCD_RGB_MODE_EN_V  0x00000001U
#define LCD_CAM_LCD_RGB_MODE_EN_S  31

/** LCD_CAM_LCD_CTRL1_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_CTRL1_REG (DR_REG_LCD_CAM_BASE + 0x20)
/** LCD_CAM_LCD_VB_FRONT:R/W；位位置：[7:0]；默认值：0；它是框架的垂直空白前门廊。
 */
#define LCD_CAM_LCD_VB_FRONT    0x000000FFU
#define LCD_CAM_LCD_VB_FRONT_M  (LCD_CAM_LCD_VB_FRONT_V << LCD_CAM_LCD_VB_FRONT_S)
#define LCD_CAM_LCD_VB_FRONT_V  0x000000FFU
#define LCD_CAM_LCD_VB_FRONT_S  0
/** LCD_CAM_LCD_HA_wid:R/W；比特位置：[19:8]；默认值：0；它是帧的水平活动宽度。
 */
#define LCD_CAM_LCD_HA_WIDTH    0x00000FFFU
#define LCD_CAM_LCD_HA_WIDTH_M  (LCD_CAM_LCD_HA_WIDTH_V << LCD_CAM_LCD_HA_WIDTH_S)
#define LCD_CAM_LCD_HA_WIDTH_V  0x00000FFFU
#define LCD_CAM_LCD_HA_WIDTH_S  8
/** LCD_CAM_LCD_HT_WIDTH:R/W；位位置：[31:20]；默认值：0；它是框架的水平总宽度。
 */
#define LCD_CAM_LCD_HT_WIDTH    0x00000FFFU
#define LCD_CAM_LCD_HT_WIDTH_M  (LCD_CAM_LCD_HT_WIDTH_V << LCD_CAM_LCD_HT_WIDTH_S)
#define LCD_CAM_LCD_HT_WIDTH_V  0x00000FFFU
#define LCD_CAM_LCD_HT_WIDTH_S  20

/** LCD_CAM_LCD_CTRL2_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_CTRL2_REG (DR_REG_LCD_CAM_BASE + 0x24)
/** LCD_CAM_LCD_VSYNC_WIDTH:R/W；比特位置：[6:0]；默认值：1；这是一行中LCD_VSYNC激活脉冲的位置。
 */
#define LCD_CAM_LCD_VSYNC_WIDTH    0x0000007FU
#define LCD_CAM_LCD_VSYNC_WIDTH_M  (LCD_CAM_LCD_VSYNC_WIDTH_V << LCD_CAM_LCD_VSYNC_WIDTH_S)
#define LCD_CAM_LCD_VSYNC_WIDTH_V  0x0000007FU
#define LCD_CAM_LCD_VSYNC_WIDTH_S  0
/** LCD_CAM_LCD_VSYNC_IDLE_POL:R/W；位位置：[7]；默认值：0；它是LCD_VSYNC的空闲值。
 */
#define LCD_CAM_LCD_VSYNC_IDLE_POL    (BIT(7))
#define LCD_CAM_LCD_VSYNC_IDLE_POL_M  (LCD_CAM_LCD_VSYNC_IDLE_POL_V << LCD_CAM_LCD_VSYNC_IDLE_POL_S)
#define LCD_CAM_LCD_VSYNC_IDLE_POL_V  0x00000001U
#define LCD_CAM_LCD_VSYNC_IDLE_POL_S  7
/** LCD_CAM_LCD_DE_IDLE_POL:R/W；位位置：[8]；默认值：0；它是LCD_D的空闲值。
 */
#define LCD_CAM_LCD_DE_IDLE_POL    (BIT(8))
#define LCD_CAM_LCD_DE_IDLE_POL_M  (LCD_CAM_LCD_DE_IDLE_POL_V << LCD_CAM_LCD_DE_IDLE_POL_S)
#define LCD_CAM_LCD_DE_IDLE_POL_V  0x00000001U
#define LCD_CAM_LCD_DE_IDLE_POL_S  8
/** LCD_CAM_LCD_HS_BLANK_EN:R/W；位位置：[9]；默认值：0；1： LCD_HSYNC的脉冲在垂直消隐线RGB模式下输出。0:LCD_HSYNC脉冲仅在RGB模式下的有源区行中有效。
 */
#define LCD_CAM_LCD_HS_BLANK_EN    (BIT(9))
#define LCD_CAM_LCD_HS_BLANK_EN_M  (LCD_CAM_LCD_HS_BLANK_EN_V << LCD_CAM_LCD_HS_BLANK_EN_S)
#define LCD_CAM_LCD_HS_BLANK_EN_V  0x00000001U
#define LCD_CAM_LCD_HS_BLANK_EN_S  9
/** LCD_CAM_LCD_HSYNC_WIDTH:R/W；比特位置：[22:16]；默认值：1；这是一行中LCD_HSYNC激活脉冲的位置。
 */
#define LCD_CAM_LCD_HSYNC_WIDTH    0x0000007FU
#define LCD_CAM_LCD_HSYNC_WIDTH_M  (LCD_CAM_LCD_HSYNC_WIDTH_V << LCD_CAM_LCD_HSYNC_WIDTH_S)
#define LCD_CAM_LCD_HSYNC_WIDTH_V  0x0000007FU
#define LCD_CAM_LCD_HSYNC_WIDTH_S  16
/** LCD_CAM_LCD_HSYNC_IDLE_POL:R/W；位位置：[23]；默认值：0；它是LCD_HSYNC的空闲值。
 */
#define LCD_CAM_LCD_HSYNC_IDLE_POL    (BIT(23))
#define LCD_CAM_LCD_HSYNC_IDLE_POL_M  (LCD_CAM_LCD_HSYNC_IDLE_POL_V << LCD_CAM_LCD_HSYNC_IDLE_POL_S)
#define LCD_CAM_LCD_HSYNC_IDLE_POL_V  0x00000001U
#define LCD_CAM_LCD_HSYNC_IDLE_POL_S  23
/** LCD_CAM_LCD_HSYNC_POSITION:R/W；位位置：[31:24]；默认值：0；这是一行中LCD_HSYNC激活脉冲的位置。
 */
#define LCD_CAM_LCD_HSYNC_POSITION    0x000000FFU
#define LCD_CAM_LCD_HSYNC_POSITION_M  (LCD_CAM_LCD_HSYNC_POSITION_V << LCD_CAM_LCD_HSYNC_POSITION_S)
#define LCD_CAM_LCD_HSYNC_POSITION_V  0x000000FFU
#define LCD_CAM_LCD_HSYNC_POSITION_S  24

/** LCD_CAM_LCD_CMD_VAL_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_CMD_VAL_REG (DR_REG_LCD_CAM_BASE + 0x28)
/** LCD_CAM_LCD_CMD_VALUE:R/W；位位置：[31:0]；默认值：0；LCD写入命令值。
 */
#define LCD_CAM_LCD_CMD_VALUE    0xFFFFFFFFU
#define LCD_CAM_LCD_CMD_VALUE_M  (LCD_CAM_LCD_CMD_VALUE_V << LCD_CAM_LCD_CMD_VALUE_S)
#define LCD_CAM_LCD_CMD_VALUE_V  0xFFFFFFFFU
#define LCD_CAM_LCD_CMD_VALUE_S  0

/** LCD_CAM_LCD_DLY_MODE_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_DLY_MODE_REG (DR_REG_LCD_CAM_BASE + 0x30)
/** LCD_CAM_LCD_CD_MODE：R/W；位位置：[1:0]；默认值：0；输出LCD_CD被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_LCD_CD_MODE    0x00000003U
#define LCD_CAM_LCD_CD_MODE_M  (LCD_CAM_LCD_CD_MODE_V << LCD_CAM_LCD_CD_MODE_S)
#define LCD_CAM_LCD_CD_MODE_V  0x00000003U
#define LCD_CAM_LCD_CD_MODE_S  0
/** LCD_CAM_LCD_DE_MODE模式：R/W；位位置：[3:2]；默认值：0；输出LCD_D被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_LCD_DE_MODE    0x00000003U
#define LCD_CAM_LCD_DE_MODE_M  (LCD_CAM_LCD_DE_MODE_V << LCD_CAM_LCD_DE_MODE_S)
#define LCD_CAM_LCD_DE_MODE_V  0x00000003U
#define LCD_CAM_LCD_DE_MODE_S  2
/** LCD_CAM_LCD_HSYNC_MODE：R/W；比特位置：[5:4]；默认值：0；输出LCD_HSYNC被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_LCD_HSYNC_MODE    0x00000003U
#define LCD_CAM_LCD_HSYNC_MODE_M  (LCD_CAM_LCD_HSYNC_MODE_V << LCD_CAM_LCD_HSYNC_MODE_S)
#define LCD_CAM_LCD_HSYNC_MODE_V  0x00000003U
#define LCD_CAM_LCD_HSYNC_MODE_S  4
/** LCD_CAM_LCD_VSYNC_MODE：R/W；位位置：[7:6]；默认值：0；输出LCD_VSYNC被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_LCD_VSYNC_MODE    0x00000003U
#define LCD_CAM_LCD_VSYNC_MODE_M  (LCD_CAM_LCD_VSYNC_MODE_V << LCD_CAM_LCD_VSYNC_MODE_S)
#define LCD_CAM_LCD_VSYNC_MODE_V  0x00000003U
#define LCD_CAM_LCD_VSYNC_MODE_S  6

/** LCD_CAM_LCD_DATA_DOUT_MODE_REG寄存器LCD配置寄存器
 */
#define LCD_CAM_LCD_DATA_DOUT_MODE_REG (DR_REG_LCD_CAM_BASE + 0x38)
/** LCD_CAM_DOUT0_MODE：R/W；位位置：[1:0]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT0_MODE    0x00000003U
#define LCD_CAM_DOUT0_MODE_M  (LCD_CAM_DOUT0_MODE_V << LCD_CAM_DOUT0_MODE_S)
#define LCD_CAM_DOUT0_MODE_V  0x00000003U
#define LCD_CAM_DOUT0_MODE_S  0
/** LCD_CAM_DOUT1_MODE：R/W；位位置：[3:2]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT1_MODE    0x00000003U
#define LCD_CAM_DOUT1_MODE_M  (LCD_CAM_DOUT1_MODE_V << LCD_CAM_DOUT1_MODE_S)
#define LCD_CAM_DOUT1_MODE_V  0x00000003U
#define LCD_CAM_DOUT1_MODE_S  2
/** LCD_CAM_DOUT2_MODE:R/W；比特位置：[5:4]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT2_MODE    0x00000003U
#define LCD_CAM_DOUT2_MODE_M  (LCD_CAM_DOUT2_MODE_V << LCD_CAM_DOUT2_MODE_S)
#define LCD_CAM_DOUT2_MODE_V  0x00000003U
#define LCD_CAM_DOUT2_MODE_S  4
/** LCD_CAM_DOUT3_MODE：R/W；位位置：[7:6]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT3_MODE    0x00000003U
#define LCD_CAM_DOUT3_MODE_M  (LCD_CAM_DOUT3_MODE_V << LCD_CAM_DOUT3_MODE_S)
#define LCD_CAM_DOUT3_MODE_V  0x00000003U
#define LCD_CAM_DOUT3_MODE_S  6
/** LCD_CAM_DOUT4_MODE:R/W；比特位置：[9:8]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT4_MODE    0x00000003U
#define LCD_CAM_DOUT4_MODE_M  (LCD_CAM_DOUT4_MODE_V << LCD_CAM_DOUT4_MODE_S)
#define LCD_CAM_DOUT4_MODE_V  0x00000003U
#define LCD_CAM_DOUT4_MODE_S  8
/** LCD_CAM_DOUT5_MODE：R/W；比特位置：[11:10]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT5_MODE    0x00000003U
#define LCD_CAM_DOUT5_MODE_M  (LCD_CAM_DOUT5_MODE_V << LCD_CAM_DOUT5_MODE_S)
#define LCD_CAM_DOUT5_MODE_V  0x00000003U
#define LCD_CAM_DOUT5_MODE_S  10
/** LCD_CAM_DOUT6_MODE模式：R/W；比特位置：[13:12]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT6_MODE    0x00000003U
#define LCD_CAM_DOUT6_MODE_M  (LCD_CAM_DOUT6_MODE_V << LCD_CAM_DOUT6_MODE_S)
#define LCD_CAM_DOUT6_MODE_V  0x00000003U
#define LCD_CAM_DOUT6_MODE_S  12
/** LCD_CAM_DOUT7_模式：R/W；比特位置：[15:14]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT7_MODE    0x00000003U
#define LCD_CAM_DOUT7_MODE_M  (LCD_CAM_DOUT7_MODE_V << LCD_CAM_DOUT7_MODE_S)
#define LCD_CAM_DOUT7_MODE_V  0x00000003U
#define LCD_CAM_DOUT7_MODE_S  14
/** LCD_CAM_DOUT8_模式：R/W；比特位置：[17:16]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT8_MODE    0x00000003U
#define LCD_CAM_DOUT8_MODE_M  (LCD_CAM_DOUT8_MODE_V << LCD_CAM_DOUT8_MODE_S)
#define LCD_CAM_DOUT8_MODE_V  0x00000003U
#define LCD_CAM_DOUT8_MODE_S  16
/** LCD_CAM_DOUT9_模式：R/W；比特位置：[19:18]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT9_MODE    0x00000003U
#define LCD_CAM_DOUT9_MODE_M  (LCD_CAM_DOUT9_MODE_V << LCD_CAM_DOUT9_MODE_S)
#define LCD_CAM_DOUT9_MODE_V  0x00000003U
#define LCD_CAM_DOUT9_MODE_S  18
/** LCD_CAM_DOUT10_MODE模式：R/W；比特位置：[21:20]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT10_MODE    0x00000003U
#define LCD_CAM_DOUT10_MODE_M  (LCD_CAM_DOUT10_MODE_V << LCD_CAM_DOUT10_MODE_S)
#define LCD_CAM_DOUT10_MODE_V  0x00000003U
#define LCD_CAM_DOUT10_MODE_S  20
/** LCD_CAM_DOUT11_MODE模式：R/W；比特位置：[23:22]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT11_MODE    0x00000003U
#define LCD_CAM_DOUT11_MODE_M  (LCD_CAM_DOUT11_MODE_V << LCD_CAM_DOUT11_MODE_S)
#define LCD_CAM_DOUT11_MODE_V  0x00000003U
#define LCD_CAM_DOUT11_MODE_S  22
/** LCD_CAM_DOUT12_MODE模式：R/W；位位置：[25:24]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT12_MODE    0x00000003U
#define LCD_CAM_DOUT12_MODE_M  (LCD_CAM_DOUT12_MODE_V << LCD_CAM_DOUT12_MODE_S)
#define LCD_CAM_DOUT12_MODE_V  0x00000003U
#define LCD_CAM_DOUT12_MODE_S  24
/** LCD_CAM_DOUT13_MODE模式：R/W；位位置：[27:26]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT13_MODE    0x00000003U
#define LCD_CAM_DOUT13_MODE_M  (LCD_CAM_DOUT13_MODE_V << LCD_CAM_DOUT13_MODE_S)
#define LCD_CAM_DOUT13_MODE_V  0x00000003U
#define LCD_CAM_DOUT13_MODE_S  26
/** LCD_CAM_DOUT14_MODE模式：R/W；位位置：[29:28]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT14_MODE    0x00000003U
#define LCD_CAM_DOUT14_MODE_M  (LCD_CAM_DOUT14_MODE_V << LCD_CAM_DOUT14_MODE_S)
#define LCD_CAM_DOUT14_MODE_V  0x00000003U
#define LCD_CAM_DOUT14_MODE_S  28
/** LCD_CAM_DOUT15_模式：R/W；比特位置：[31:30]；默认值：0；输出数据位$n被模块时钟LCD_CLK延迟。0：无延迟输出。1： LCD_CLK的正沿延迟。2： LCD_CLK的负边缘延迟。
 */
#define LCD_CAM_DOUT15_MODE    0x00000003U
#define LCD_CAM_DOUT15_MODE_M  (LCD_CAM_DOUT15_MODE_V << LCD_CAM_DOUT15_MODE_S)
#define LCD_CAM_DOUT15_MODE_V  0x00000003U
#define LCD_CAM_DOUT15_MODE_S  30

/** LCD_CAM_LC_DMA_INT_ENA_REG寄存器LCD_camera DMA中断启用寄存器
 */
#define LCD_CAM_LC_DMA_INT_ENA_REG (DR_REG_LCD_CAM_BASE + 0x64)
/** LCD_CAM_LCD_VSYNC_INT_ENA:R/W；位位置：[0]；默认值：0；LCD帧结束中断的启用位。
 */
#define LCD_CAM_LCD_VSYNC_INT_ENA    (BIT(0))
#define LCD_CAM_LCD_VSYNC_INT_ENA_M  (LCD_CAM_LCD_VSYNC_INT_ENA_V << LCD_CAM_LCD_VSYNC_INT_ENA_S)
#define LCD_CAM_LCD_VSYNC_INT_ENA_V  0x00000001U
#define LCD_CAM_LCD_VSYNC_INT_ENA_S  0
/** LCD_CAM_LCD_TRANS_DONE_INT_ENA:R/W；位位置：[1]；默认值：0；lcd传输结束中断的启用位。
 */
#define LCD_CAM_LCD_TRANS_DONE_INT_ENA    (BIT(1))
#define LCD_CAM_LCD_TRANS_DONE_INT_ENA_M  (LCD_CAM_LCD_TRANS_DONE_INT_ENA_V << LCD_CAM_LCD_TRANS_DONE_INT_ENA_S)
#define LCD_CAM_LCD_TRANS_DONE_INT_ENA_V  0x00000001U
#define LCD_CAM_LCD_TRANS_DONE_INT_ENA_S  1
/** LCD_CAM_CAM.VSYNC_INT_ENA:R/W；位位置：[2]；默认值：0；摄像机帧结束中断的启用位。
 */
#define LCD_CAM_CAM_VSYNC_INT_ENA    (BIT(2))
#define LCD_CAM_CAM_VSYNC_INT_ENA_M  (LCD_CAM_CAM_VSYNC_INT_ENA_V << LCD_CAM_CAM_VSYNC_INT_ENA_S)
#define LCD_CAM_CAM_VSYNC_INT_ENA_V  0x00000001U
#define LCD_CAM_CAM_VSYNC_INT_ENA_S  2
/** LCD_CAM_CAM-HS_INT_ENA:R/W；位位置：[3]；默认值：0；摄像机线路中断的启用位。
 */
#define LCD_CAM_CAM_HS_INT_ENA    (BIT(3))
#define LCD_CAM_CAM_HS_INT_ENA_M  (LCD_CAM_CAM_HS_INT_ENA_V << LCD_CAM_CAM_HS_INT_ENA_S)
#define LCD_CAM_CAM_HS_INT_ENA_V  0x00000001U
#define LCD_CAM_CAM_HS_INT_ENA_S  3

/** LCD_CAM_LC_DMA_INT_RAW_REG寄存器LCD_camera DMA原始中断状态寄存器
 */
#define LCD_CAM_LC_DMA_INT_RAW_REG (DR_REG_LCD_CAM_BASE + 0x68)
/** LCD_CAM_LCD_VSYNC_INT_RAW:RO；位位置：[0]；默认值：0；LCD帧结束中断的原始位。
 */
#define LCD_CAM_LCD_VSYNC_INT_RAW    (BIT(0))
#define LCD_CAM_LCD_VSYNC_INT_RAW_M  (LCD_CAM_LCD_VSYNC_INT_RAW_V << LCD_CAM_LCD_VSYNC_INT_RAW_S)
#define LCD_CAM_LCD_VSYNC_INT_RAW_V  0x00000001U
#define LCD_CAM_LCD_VSYNC_INT_RAW_S  0
/** LCD_CAM_LCD_TRANS_DONE_INT_RAW:RO；位位置：[1]；默认值：0；lcd传输结束中断的原始位。
 */
#define LCD_CAM_LCD_TRANS_DONE_INT_RAW    (BIT(1))
#define LCD_CAM_LCD_TRANS_DONE_INT_RAW_M  (LCD_CAM_LCD_TRANS_DONE_INT_RAW_V << LCD_CAM_LCD_TRANS_DONE_INT_RAW_S)
#define LCD_CAM_LCD_TRANS_DONE_INT_RAW_V  0x00000001U
#define LCD_CAM_LCD_TRANS_DONE_INT_RAW_S  1
/** LCD_CAM_CAM_VSYNC_INT_RAW:RO；位位置：[2]；默认值：0；相机帧结束中断的原始位。
 */
#define LCD_CAM_CAM_VSYNC_INT_RAW    (BIT(2))
#define LCD_CAM_CAM_VSYNC_INT_RAW_M  (LCD_CAM_CAM_VSYNC_INT_RAW_V << LCD_CAM_CAM_VSYNC_INT_RAW_S)
#define LCD_CAM_CAM_VSYNC_INT_RAW_V  0x00000001U
#define LCD_CAM_CAM_VSYNC_INT_RAW_S  2
/** LCD_CAM_CAM-HS_INT_RAW:RO；位位置：[3]；默认值：0；摄像机线路中断的原始位。
 */
#define LCD_CAM_CAM_HS_INT_RAW    (BIT(3))
#define LCD_CAM_CAM_HS_INT_RAW_M  (LCD_CAM_CAM_HS_INT_RAW_V << LCD_CAM_CAM_HS_INT_RAW_S)
#define LCD_CAM_CAM_HS_INT_RAW_V  0x00000001U
#define LCD_CAM_CAM_HS_INT_RAW_S  3

/** LCD_CAM_LC_DMA_INT_ST_REG寄存器LCD_camera DMA掩码中断状态寄存器
 */
#define LCD_CAM_LC_DMA_INT_ST_REG (DR_REG_LCD_CAM_BASE + 0x6c)
/** LCD_CAM_LCD_VSYNC_INT_ST:RO；位位置：[0]；默认值：0；LCD帧结束中断的状态位。
 */
#define LCD_CAM_LCD_VSYNC_INT_ST    (BIT(0))
#define LCD_CAM_LCD_VSYNC_INT_ST_M  (LCD_CAM_LCD_VSYNC_INT_ST_V << LCD_CAM_LCD_VSYNC_INT_ST_S)
#define LCD_CAM_LCD_VSYNC_INT_ST_V  0x00000001U
#define LCD_CAM_LCD_VSYNC_INT_ST_S  0
/** LCD_CAM_LCD_TRANS_DONE_INT_ST:RO；位位置：[1]；默认值：0；lcd传输结束中断的状态位。
 */
#define LCD_CAM_LCD_TRANS_DONE_INT_ST    (BIT(1))
#define LCD_CAM_LCD_TRANS_DONE_INT_ST_M  (LCD_CAM_LCD_TRANS_DONE_INT_ST_V << LCD_CAM_LCD_TRANS_DONE_INT_ST_S)
#define LCD_CAM_LCD_TRANS_DONE_INT_ST_V  0x00000001U
#define LCD_CAM_LCD_TRANS_DONE_INT_ST_S  1
/** LCD_CAM_CAM_VSYNC_INT_ST:RO；位位置：[2]；默认值：0；摄像机帧结束中断的状态位。
 */
#define LCD_CAM_CAM_VSYNC_INT_ST    (BIT(2))
#define LCD_CAM_CAM_VSYNC_INT_ST_M  (LCD_CAM_CAM_VSYNC_INT_ST_V << LCD_CAM_CAM_VSYNC_INT_ST_S)
#define LCD_CAM_CAM_VSYNC_INT_ST_V  0x00000001U
#define LCD_CAM_CAM_VSYNC_INT_ST_S  2
/** LCD_CAM_CAM-HS_INT_ST:RO；位位置：[3]；默认值：0；摄像机传输结束中断的状态位。
 */
#define LCD_CAM_CAM_HS_INT_ST    (BIT(3))
#define LCD_CAM_CAM_HS_INT_ST_M  (LCD_CAM_CAM_HS_INT_ST_V << LCD_CAM_CAM_HS_INT_ST_S)
#define LCD_CAM_CAM_HS_INT_ST_V  0x00000001U
#define LCD_CAM_CAM_HS_INT_ST_S  3

/** LCD_CAM_LC_DMA_INT_CLR_REG寄存器LCD_camera DMA中断清除寄存器
 */
#define LCD_CAM_LC_DMA_INT_CLR_REG (DR_REG_LCD_CAM_BASE + 0x70)
/** LCD_CAM_LCD_VSYNC_INT_CLR:WO；位位置：[0]；默认值：0；LCD帧结束中断的清除位。
 */
#define LCD_CAM_LCD_VSYNC_INT_CLR    (BIT(0))
#define LCD_CAM_LCD_VSYNC_INT_CLR_M  (LCD_CAM_LCD_VSYNC_INT_CLR_V << LCD_CAM_LCD_VSYNC_INT_CLR_S)
#define LCD_CAM_LCD_VSYNC_INT_CLR_V  0x00000001U
#define LCD_CAM_LCD_VSYNC_INT_CLR_S  0
/** LCD_CAM_LCD_TRANS_DONE_INT_CLR:WO；位位置：[1]；默认值：0；lcd传输结束中断的清除位。
 */
#define LCD_CAM_LCD_TRANS_DONE_INT_CLR    (BIT(1))
#define LCD_CAM_LCD_TRANS_DONE_INT_CLR_M  (LCD_CAM_LCD_TRANS_DONE_INT_CLR_V << LCD_CAM_LCD_TRANS_DONE_INT_CLR_S)
#define LCD_CAM_LCD_TRANS_DONE_INT_CLR_V  0x00000001U
#define LCD_CAM_LCD_TRANS_DONE_INT_CLR_S  1
/** LCD_CAM_CAM.VSYNC_INT_CLR:WO；位位置：[2]；默认值：0；相机帧结束中断的清除位。
 */
#define LCD_CAM_CAM_VSYNC_INT_CLR    (BIT(2))
#define LCD_CAM_CAM_VSYNC_INT_CLR_M  (LCD_CAM_CAM_VSYNC_INT_CLR_V << LCD_CAM_CAM_VSYNC_INT_CLR_S)
#define LCD_CAM_CAM_VSYNC_INT_CLR_V  0x00000001U
#define LCD_CAM_CAM_VSYNC_INT_CLR_S  2
/** LCD_CAM_CAM-HS_INT_CLR:WO；位位置：[3]；默认值：0；摄像头线路中断的清除位。
 */
#define LCD_CAM_CAM_HS_INT_CLR    (BIT(3))
#define LCD_CAM_CAM_HS_INT_CLR_M  (LCD_CAM_CAM_HS_INT_CLR_V << LCD_CAM_CAM_HS_INT_CLR_S)
#define LCD_CAM_CAM_HS_INT_CLR_V  0x00000001U
#define LCD_CAM_CAM_HS_INT_CLR_S  3

/** LCD_CAM_LC_REG_DATE_REG寄存器版本寄存器
 */
#define LCD_CAM_LC_REG_DATE_REG (DR_REG_LCD_CAM_BASE + 0xfc)
/** LCD_CAM_LC_DATE:R/W；位位置：[27:0]；默认值：33566752；LCD_CAM版本控制寄存器
 */
#define LCD_CAM_LC_DATE    0x0FFFFFFFU
#define LCD_CAM_LC_DATE_M  (LCD_CAM_LC_DATE_V << LCD_CAM_LC_DATE_S)
#define LCD_CAM_LC_DATE_V  0x0FFFFFFFU
#define LCD_CAM_LC_DATE_S  0

#ifdef __cplusplus
}
#endif

