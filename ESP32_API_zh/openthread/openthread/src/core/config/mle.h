/*
 *  版权所有（c）2019，The OpenThread作者。保留所有权利。
 *
 *  在满足以下条件的情况下，允许以源代码和二进制形式重新分发和使用，无论是否进行修改：1.重新分发源代码必须保留上述版权声明、本条件列表和以下免责声明。2.二进制形式的再发行必须在随发行提供的文档和/或其他材料中复制上述版权声明、本条件列表和以下免责声明。3.未经事先书面许可，不得使用版权持有人的姓名或其贡献者的姓名为本软件衍生的产品背书或推广。
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @file 此文件包括MLE服务的编译时配置。
 *
 */

#ifndef CONFIG_MLE_H_
#define CONFIG_MLE_H_

/**
 * @def OPENTHREAD_CONFIG_MLE_MAX_ROUTERS
 *
 * 线程网络中的最大路由器数。
 *
 * @note 线程将此值指定为32。更改此值可能会导致标准线程1.1设备的互操作性问题。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_MAX_ROUTERS
#define OPENTHREAD_CONFIG_MLE_MAX_ROUTERS 32
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_MAX_CHILDREN
 *
 * 最大子级数。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_MAX_CHILDREN
#define OPENTHREAD_CONFIG_MLE_MAX_CHILDREN 10
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_CHILD_TIMEOUT_DEFAULT
 *
 * 默认子超时值（以秒为单位）。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_CHILD_TIMEOUT_DEFAULT
#define OPENTHREAD_CONFIG_MLE_CHILD_TIMEOUT_DEFAULT 240
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_IP_ADDRS_PER_CHILD
 *
 * 每个子级支持的IPv6地址注册的最大数量。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_IP_ADDRS_PER_CHILD
#define OPENTHREAD_CONFIG_MLE_IP_ADDRS_PER_CHILD 4
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_IP_ADDRS_TO_REGISTER
 *
 * MTD的最大IPv6地址注册数。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_IP_ADDRS_TO_REGISTER
#define OPENTHREAD_CONFIG_MLE_IP_ADDRS_TO_REGISTER (OPENTHREAD_CONFIG_MLE_IP_ADDRS_PER_CHILD)
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_STEERING_DATA_SET_OOB_ENABLE
 *
 * 启用带外转向数据设置。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_STEERING_DATA_SET_OOB_ENABLE
#define OPENTHREAD_CONFIG_MLE_STEERING_DATA_SET_OOB_ENABLE 0
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_ENABLE
 *
 * 定义为1以启用附加回退功能
 *
 * 启用此功能后，连接尝试之间的回退等待时间将成倍增加。如果设备处于睡眠状态，则收音机将在等待时间内进入睡眠状态。这确保了电池供电的休眠终端设备不会通过连续搜索要连接的父设备（当没有路由器/父设备可连接时）耗尽电池。
 *
 * 退避时间从“OPENTHREAD_CONFIG_MLE_ATTACH_backoff_minimum_interval”指定的最小间隔开始，并且每次连接尝试时，等待时间都会加倍，直到“OPENTHRAD_CONFIG_MLE-ATTACH_BACK OFF_MAXIMUM_interval”指定最大等待时间。
 *
 * 一旦等待时间达到最大值，将向其添加随机抖动间隔。抖动的最大值由`OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_jitter_INTERVAL`指定。随机抖动在范围“[-jitter，+jitter]”内均匀选择。仅当退避等待间隔为最大值时才添加。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_ENABLE
#define OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_ENABLE 1
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_MINIMUM_INTERVAL
 *
 * 指定附加回退功能使用的最小回退等待间隔（以毫秒为单位）。
 *
 * 仅在启用附加回退功能时适用（请参阅`OPENTHREAD_CONFIG_MLE_attach_backoff_ENABLE`）。
 *
 * 有关详细信息，请参阅`OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_ENABLE`说明。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_MINIMUM_INTERVAL
#define OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_MINIMUM_INTERVAL 251
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_MAXIMUM_INTERVAL
 *
 * 指定附加回退功能使用的最大回退等待间隔（以毫秒为单位）。
 *
 * 仅在启用附加回退功能时适用（请参阅`OPENTHREAD_CONFIG_MLE_attach_backoff_ENABLE`）。
 *
 * 有关详细信息，请参阅`OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_ENABLE`说明。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_MAXIMUM_INTERVAL
#define OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_MAXIMUM_INTERVAL 1200000 // 1200秒=20分钟
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_JITTER_INTERVAL
 *
 * 指定附加回退功能使用的最大抖动间隔（以毫秒为单位）。
 *
 * 仅在启用附加回退功能时适用（请参阅`OPENTHREAD_CONFIG_MLE_attach_backoff_ENABLE`）。
 *
 * 有关详细信息，请参阅`OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_ENABLE`说明。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_JITTER_INTERVAL
#define OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_JITTER_INTERVAL 2000
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_DELAY_TO_RESET_BACKOFF_INTERVAL
 *
 * 指定成功连接后附加回退功能在将当前回退间隔重置回最小值之前使用的延迟等待间隔（以毫秒为单位）。
 *
 * 如果设置为零，则设备在成功连接后立即重置其回退连接间隔。使用非零值时，如果在成功连接后，设备恰好在延迟间隔内分离，则重新连接过程将以上一个回退间隔恢复（就像连接没有发生一样）。
 *
 * 在电池供电的设备与其父设备的链接质量较差，因此经常与父设备连接和分离的情况下，此行为非常有用。使用非零等待间隔可确保每次连接时不会重置连接退避间隔，并且设备不会因过于频繁地尝试重新连接而快速耗尽电池。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_DELAY_TO_RESET_BACKOFF_INTERVAL
#define OPENTHREAD_CONFIG_MLE_ATTACH_BACKOFF_DELAY_TO_RESET_BACKOFF_INTERVAL 20000
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_SEND_LINK_REQUEST_ON_ADV_TIMEOUT
 *
 * 定义为1以在邻近路由器达到MAX_NEIGHBOR_AGE时发送MLE链路请求。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_SEND_LINK_REQUEST_ON_ADV_TIMEOUT
#define OPENTHREAD_CONFIG_MLE_SEND_LINK_REQUEST_ON_ADV_TIMEOUT 1
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_LINK_REQUEST_MARGIN_MIN
 *
 * 指定尝试与相邻路由器建立链路之前所需的最小链路余量（dBm）。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_LINK_REQUEST_MARGIN_MIN
#define OPENTHREAD_CONFIG_MLE_LINK_REQUEST_MARGIN_MIN 10
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_PARTITION_MERGE_MARGIN_MIN
 *
 * 指定在尝试合并到其他分区之前所需的最小链路余量（dBm）。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_PARTITION_MERGE_MARGIN_MIN
#define OPENTHREAD_CONFIG_MLE_PARTITION_MERGE_MARGIN_MIN 10
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_CHILD_ROUTER_LINKS
 *
 * 指定REED/FED尝试维护的所需路由器链路数。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_CHILD_ROUTER_LINKS
#define OPENTHREAD_CONFIG_MLE_CHILD_ROUTER_LINKS 3
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_LONG_ROUTES_ENABLE
 *
 * 为“深度”网络启用实验模式，允许最多32个节点的数据包路由。此模式与线程1.1.1及更早版本不兼容。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_LONG_ROUTES_ENABLE
#define OPENTHREAD_CONFIG_MLE_LONG_ROUTES_ENABLE 0
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_SEND_UNICAST_ANNOUNCE_RESPONSE
 *
 * 定义为1以允许响应于从设备接收到的通告消息而发送单播MLE通告消息。
 *
 * @note 除了多播MLE通告之外（以及之后）还发送单播MLE通告消息。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_SEND_UNICAST_ANNOUNCE_RESPONSE
#define OPENTHREAD_CONFIG_MLE_SEND_UNICAST_ANNOUNCE_RESPONSE 1
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_INFORM_PREVIOUS_PARENT_ON_REATTACH
 *
 * 将子级定义为1，以在其连接到新父级时通知其上一个父级。
 *
 * 如果启用了此功能，当设备连接到新的父级时，它将向上一个父级发送一条IP消息（带有空的有效负载和网格本地IP地址作为源地址）。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_INFORM_PREVIOUS_PARENT_ON_REATTACH
#define OPENTHREAD_CONFIG_MLE_INFORM_PREVIOUS_PARENT_ON_REATTACH 0
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_LINK_METRICS_INITIATOR_ENABLE
 *
 * 定义为1以启用链接度量启动器功能。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_LINK_METRICS_INITIATOR_ENABLE
#define OPENTHREAD_CONFIG_MLE_LINK_METRICS_INITIATOR_ENABLE 0
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_LINK_METRICS_SUBJECT_ENABLE
 *
 * 定义为1以启用链接度量主题功能。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_LINK_METRICS_SUBJECT_ENABLE
#define OPENTHREAD_CONFIG_MLE_LINK_METRICS_SUBJECT_ENABLE 0
#endif

/**
 * @def OPENTHREAD_CONFIG_MLE_LINK_METRICS_MAX_SERIES_SUPPORTED
 *
 * 链接度量主题可以同时跟踪的最大系列数。
 *
 */
#ifndef OPENTHREAD_CONFIG_MLE_LINK_METRICS_MAX_SERIES_SUPPORTED
#define OPENTHREAD_CONFIG_MLE_LINK_METRICS_MAX_SERIES_SUPPORTED 10
#endif

#endif // CONFIG_MLE_H_

