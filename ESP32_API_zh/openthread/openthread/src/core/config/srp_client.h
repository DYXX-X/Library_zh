/*
 *  版权所有（c）2020，OpenThread作者。保留所有权利。
 *
 *  在满足以下条件的情况下，允许以源代码和二进制形式重新分发和使用，无论是否进行修改：1.重新分发源代码必须保留上述版权声明、本条件列表和以下免责声明。2.二进制形式的再发行必须在随发行提供的文档和/或其他材料中复制上述版权声明、本条件列表和以下免责声明。3.未经事先书面许可，不得使用版权持有人的姓名或其贡献者的姓名为本软件衍生的产品背书或推广。
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @file 此文件包括SRP（服务注册协议）客户端的编译时配置。
 *
 */

#ifndef CONFIG_SRP_CLIENT_H_
#define CONFIG_SRP_CLIENT_H_

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
 *
 * 定义为1以启用SRP客户端支持。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#define OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE 0
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
 *
 * 定义为1以启用SRP客户端自动启动功能及其API。
 *
 * 启用后，SRP客户端可以配置为在检测到存在SRP服务器时自动启动（通过监视SRP服务器服务条目的线程网络数据）。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE
#define OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_API_ENABLE 1
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_DEFAULT_MODE
 *
 * 定义自动启动模式的默认模式（启用或禁用）。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_AUTO_START_API_ENABLE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_DEFAULT_MODE
#define OPENTHREAD_CONFIG_SRP_CLIENT_AUTO_START_DEFAULT_MODE 0
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_SWITCH_SERVER_ON_FAILURE
 *
 * 定义为1，使SRP客户端能够在出现故障时切换服务器（使用自动启动功能时）。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_AUTO_START_API_ENABLE”时使用。
 *
 * 启用后，当当前服务器拒绝SRP更新或没有响应（等待服务器响应超时）时，客户端将尝试从线程网络数据中的条目中选择下一个服务器。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_SWITCH_SERVER_ON_FAILURE
#define OPENTHREAD_CONFIG_SRP_CLIENT_SWITCH_SERVER_ON_FAILURE 1
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_DISALLOW_SERVER_SWITCH_WITH_REGISTERED_HOST
 *
 * 如果主机（或任何服务）先前已成功注册到当前选定的服务器，则将定义为1，以在出现故障时禁止SRP客户端切换服务器（当使用自动启动时）。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_SWITCH_SERVER_ON_FAILURE”时适用。
 *
 * 如果启用此选项，一旦SRP客户端成功注册到自动启动的选定SRP服务器，它将保留在选定的SRP服务器上（即使未来的SRP更新失败或超时），而相关的服务器条目仍然存在于线程网络数据中。如果从网络数据中删除该条目，则SRP客户端将尝试选择新服务器。
 *
 * 启用此行为将有助于允许更积极的切换逻辑（例如，在较少超时后切换`OPENTHREAD_CONFIG_SRP_CLIENT_MAX_TIMEOUT_FAILURES_TO_switch_SERVER`），同时由于当前所选服务器上的临时故障而不允许切换。这有助于避免旧服务器可能仍然记得注册的主机/服务信息，并且客户端切换到新服务器，然后由于名称冲突而失败（当新服务器探测主机/服务名称时，原始服务器不允许新注册）。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_DISALLOW_SERVER_SWITCH_WITH_REGISTERED_HOST
#define OPENTHREAD_CONFIG_SRP_CLIENT_DISALLOW_SERVER_SWITCH_WITH_REGISTERED_HOST 1
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_MAX_TIMEOUT_FAILURES_TO_SWITCH_SERVER
 *
 * 指定触发服务器切换的超时失败次数。
 *
 * 这仅在使用“OPENTHREAD_CONFIG_SRP_CLIENT_SWITCH_SERVER_ON_FAILURE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_MAX_TIMEOUT_FAILURES_TO_SWITCH_SERVER
#define OPENTHREAD_CONFIG_SRP_CLIENT_MAX_TIMEOUT_FAILURES_TO_SWITCH_SERVER 3
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_DOMAIN_NAME_API_ENABLE
 *
 * 为SRP客户端实现定义为1，以提供获取/设置域名的API。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_DOMAIN_NAME_API_ENABLE
#define OPENTHREAD_CONFIG_SRP_CLIENT_DOMAIN_NAME_API_ENABLE 0
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_SAVE_SELECTED_SERVER_ENABLE
 *
 * 定义为1以启用SRP客户端功能，以非易失性设置保存所选服务器。
 *
 * 启用后，SRP客户端将通过非易失性设置中的自动启动功能保存选定的服务器信息，并且在客户端重新启动时（例如，由于设备重置），它将在搜索时选择相同的服务器，以发现并从线程网络数据服务条目中选择一个。只有在主机信息成功注册到服务器之后，并且通过从网络数据SRP单播服务条目自动启动来选择该主机信息，才会保存服务器信息。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_SAVE_SELECTED_SERVER_ENABLE
#define OPENTHREAD_CONFIG_SRP_CLIENT_SAVE_SELECTED_SERVER_ENABLE 1
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_DEFAULT_LEASE
 *
 * 指定默认请求的租用间隔（秒）。设置为两小时。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_DEFAULT_LEASE
#define OPENTHREAD_CONFIG_SRP_CLIENT_DEFAULT_LEASE (2 * 60 * 60)
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_DEFAULT_KEY_LEASE
 *
 * 指定默认请求的密钥租用间隔（以秒为单位）。设置为14天。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_DEFAULT_KEY_LEASE
#define OPENTHREAD_CONFIG_SRP_CLIENT_DEFAULT_KEY_LEASE (14 * 24 * 60 * 60)
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_LEASE_RENEW_GUARD_INTERVAL
 *
 * 指定租约续订时间的保护间隔（以秒为单位）。保护间隔确定SRP客户端将提前多少时间（相对于租约到期时间）发送SRP更新以进行租约续订。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_LEASE_RENEW_GUARD_INTERVAL
#define OPENTHREAD_CONFIG_SRP_CLIENT_LEASE_RENEW_GUARD_INTERVAL 120 // 两分钟（秒）
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_EARLY_LEASE_RENEW_FACTOR_NUMERATOR
 *
 * 指定提前租赁续订系数的分子。
 *
 * 此值用于机会早期刷新行为。发送SRP更新时，尚未过期但已关闭的服务允许提前刷新并包含在SRP更新中。
 *
 * “提前租赁续订间隔”用于确定服务是否可以提前续订。该间隔是通过将接受的租赁间隔乘以“提前租赁续期系数”来计算的，该系数以分数（分子和分母）的形式给出。
 *
 * 如果因子设置为零（分子=0，分母=1），则机会提前刷新行为将被禁用。如果分母设置为零（因子设置为无穷大），则SRP更新消息中始终包含所有服务（包括以前注册的服务）。
 *
 * 默认值为1/2（即，允许在租赁间隔一半内的服务提前刷新）。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_EARLY_LEASE_RENEW_FACTOR_NUMERATOR
#define OPENTHREAD_CONFIG_SRP_CLIENT_EARLY_LEASE_RENEW_FACTOR_NUMERATOR 1
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_EARLY_LEASE_RENEW_FACTOR_DENOMINATOR
 *
 * 指定提前租约续订系数的分母。
 *
 * 有关详细信息，请参阅OPENTHREAD_CONFIG_SRP_CLIENT_EARLY_LEASE_RENEW_FACTOR_NUMERATOR。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_EARLY_LEASE_RENEW_FACTOR_DENOMINATOR
#define OPENTHREAD_CONFIG_SRP_CLIENT_EARLY_LEASE_RENEW_FACTOR_DENOMINATOR 2
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_UPDATE_TX_DELAY
 *
 * 指定SRP客户端发送更新消息之前需要更新后的（短）延迟（毫秒）。
 *
 * 当存在需要更新的更改（例如，添加/删除新服务）时，SRP客户端将在准备并向服务器发送SRP更新消息之前等待短暂的延迟。这允许用户提供更多的更改，然后在同一更新消息中发送所有更改。延迟仅应用于触发更新消息传输的第一改变。等待tx启动时的后续更改（API调用）不会重置延迟计时器。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_UPDATE_TX_DELAY
#define OPENTHREAD_CONFIG_SRP_CLIENT_UPDATE_TX_DELAY 10
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_MIN_RETRY_WAIT_INTERVAL
 *
 * 指定SRP更新消息重试之间的最小等待间隔（以毫秒为单位）。
 *
 * 如果服务器没有响应或服务器拒绝更新，则重新发送更新消息。等待时间间隔从最小值开始，每次失败都会增加增长因子，直到最大值。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_MIN_RETRY_WAIT_INTERVAL
#define OPENTHREAD_CONFIG_SRP_CLIENT_MIN_RETRY_WAIT_INTERVAL 1800
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_MAX_RETRY_WAIT_INTERVAL
 *
 * 指定SRP更新消息重试之间的最大等待间隔（以毫秒为单位）。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_MAX_RETRY_WAIT_INTERVAL
#define OPENTHREAD_CONFIG_SRP_CLIENT_MAX_RETRY_WAIT_INTERVAL (1 * 60 * 60 * 1000) // 1小时（毫秒）。
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_WAIT_INTERVAL_JITTER
 *
 * 指定重试等待间隔的抖动（以毫秒为单位）。如果当前重试等待间隔小于抖动，则等待间隔本身被用作抖动（例如，抖动为500毫秒，如果重试间隔为300毫秒，则从[0，2300]毫秒中随机选择重试间隔）。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_WAIT_INTERVAL_JITTER
#define OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_WAIT_INTERVAL_JITTER 500
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_INTERVAL_GROWTH_FACTOR_NUMERATOR
 *
 * 指定重试等待间隔增长因子分数的分子。增长因子以分数表示（例如，对于1.5，我们可以使用15作为分子，使用10作为分母）。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_INTERVAL_GROWTH_FACTOR_NUMERATOR
#define OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_INTERVAL_GROWTH_FACTOR_NUMERATOR 17
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_INTERVAL_GROWTH_FACTOR_DENOMINATOR
 *
 * 指定重试等待间隔增长因子分数的分母。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_INTERVAL_GROWTH_FACTOR_DENOMINATOR
#define OPENTHREAD_CONFIG_SRP_CLIENT_RETRY_INTERVAL_GROWTH_FACTOR_DENOMINATOR 10
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_ENABLE
 *
 * 定义为1以启用SRP客户端缓冲区和服务池功能。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_ENABLE
#define OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_ENABLE OPENTHREAD_CONFIG_SRP_CLIENT_ENABLE
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_MAX_SERVICES
 *
 * 指定SRP客户端服务池中的服务条目数。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_BUFFERS_ENABLE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_MAX_SERVICES
#define OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_MAX_SERVICES 2
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_MAX_HOST_ADDRESSES
 *
 * 指定SRP客户端缓冲区和服务池中主机IPv6地址项的数量。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_BUFFERS_ENABLE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_MAX_HOST_ADDRESSES
#define OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_MAX_HOST_ADDRESSES 2
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_HOST_NAME_SIZE
 *
 * 指定SRP客户端缓冲区和服务池中主机名字符串缓冲区的大小（字符数）。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_BUFFERS_ENABLE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_HOST_NAME_SIZE
#define OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_HOST_NAME_SIZE 64
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_NAME_SIZE
 *
 * 指定SRP客户端缓冲区和服务池中服务名称字符串缓冲区的大小（字符数）。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_BUFFERS_ENABLE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_NAME_SIZE
#define OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_NAME_SIZE 96
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_MAX_SUB_TYPES
 *
 * 指定SRP客户端缓冲区和服务池中服务子类型标签的最大数量（数组长度）。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_BUFFERS_ENABLE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_MAX_SUB_TYPES
#define OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_MAX_SUB_TYPES 6
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_INSTANCE_NAME_SIZE
 *
 * 指定SRP客户端缓冲区和服务池中服务实例名称字符串缓冲区的大小（字符数）。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_BUFFERS_ENABLE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_INSTANCE_NAME_SIZE
#define OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_SERVICE_INSTANCE_NAME_SIZE 64
#endif

/**
 * @def OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_TXT_BUFFER_SIZE
 *
 * 指定SRP客户端缓冲区和服务池中TXT记录值缓冲区的大小（字节数）。
 *
 * 此配置仅在启用“OPENTHREAD_config_SRP_CLIENT_BUFFERS_ENABLE”时适用。
 *
 */
#ifndef OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_TXT_BUFFER_SIZE
#define OPENTHREAD_CONFIG_SRP_CLIENT_BUFFERS_TXT_BUFFER_SIZE 64
#endif

#endif // CONFIG_SRP_CLIENT_H_

