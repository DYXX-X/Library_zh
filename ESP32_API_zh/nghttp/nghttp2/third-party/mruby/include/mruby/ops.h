/* 操作数类型：+Z：无操作数（Z，Z，Z）+B:8bit（B，S，B，B）+BB:8+8bit（BB，SB，BS，SS）+BBB:8+8+8bit（BBB，SBB，BSB，SSB）+BS:8+16 bit（BS，SS，BS，BS）+S:16 bit（S，S，S）+W:24 bit（W，W，W）
*/

/*-----------------------------------------------------------------------
操作码操作数语义
------------------------------------------------------------------------*/
OPCODE(NOP,        Z)        /* 无操作*/
OPCODE(MOVE,       BB)       /* R（a）=R（b）*/
OPCODE(LOADL,      BB)       /* R（a）=水池（b）*/
OPCODE(LOADI,      BB)       /* R（a）=mrb_int（b）*/
OPCODE(LOADINEG,   BB)       /* R（a）=mrb_int（-b）*/
OPCODE(LOADI__1,   B)        /* R（a）=mrb_int（-1）*/
OPCODE(LOADI_0,    B)        /* R（a）=mrb_int（0）*/
OPCODE(LOADI_1,    B)        /* R（a）=mrb_int（1）*/
OPCODE(LOADI_2,    B)        /* R（a）=mrb_int（2）*/
OPCODE(LOADI_3,    B)        /* R（a）=mrb_int（3）*/
OPCODE(LOADI_4,    B)        /* R（a）=mrb_int（4）*/
OPCODE(LOADI_5,    B)        /* R（a）=mrb_int（5）*/
OPCODE(LOADI_6,    B)        /* R（a）=mrb_int（6）*/
OPCODE(LOADI_7,    B)        /* R（a）=mrb_int（7）*/
OPCODE(LOADSYM,    BB)       /* R（a）=符号（b）*/
OPCODE(LOADNIL,    B)        /* R（a）=无*/
OPCODE(LOADSELF,   B)        /* R（a）=自身*/
OPCODE(LOADT,      B)        /* R（a）=真*/
OPCODE(LOADF,      B)        /* R（a）=假*/
OPCODE(GETGV,      BB)       /* R（a）=全局（符号（b））*/
OPCODE(SETGV,      BB)       /* setglobal（符号（b），R（a））*/
OPCODE(GETSV,      BB)       /* R（a）=特殊[Syms（b）]*/
OPCODE(SETSV,      BB)       /* 特殊[Syms（b）]=R（a）*/
OPCODE(GETIV,      BB)       /* R（a）=ivget（符号（b））*/
OPCODE(SETIV,      BB)       /* ivset（符号（b），R（a））*/
OPCODE(GETCV,      BB)       /* R（a）=cvget（符号（b））*/
OPCODE(SETCV,      BB)       /* cvset（符号（b），R（a））*/
OPCODE(GETCONST,   BB)       /* R（a）=常量（符号（b））*/
OPCODE(SETCONST,   BB)       /* 常量集（符号（b），R（a））*/
OPCODE(GETMCNST,   BB)       /* R（a）=R（a）：：符号（b）*/
OPCODE(SETMCNST,   BB)       /* R（a+1）：：符号（b）=R（a）*/
OPCODE(GETUPVAR,   BBB)      /* R（a）=uvget（b，c）*/
OPCODE(SETUPVAR,   BBB)      /* uvset（b，c，R（a））*/
OPCODE(JMP,        S)        /* pc=a*/
OPCODE(JMPIF,      BS)       /* 如果R（b）pc=a*/
OPCODE(JMPNOT,     BS)       /* 如果R（b）pc=a*/
OPCODE(JMPNIL,     BS)       /* 如果R（b）==nil pc=a*/
OPCODE(ONERR,      S)        /* 救援_推送（a）*/
OPCODE(EXCEPT,     B)        /* R（a）=不包括*/
OPCODE(RESCUE,     BB)       /* R（b）=R（a）。伊莎？（R（b））*/
OPCODE(POPERR,     B)        /* a、 时间｛rescue_pop（）｝*/
OPCODE(RAISE,      B)        /* 升高（R（a））*/
OPCODE(EPUSH,      B)        /* ensure_push（序列[a]）*/
OPCODE(EPOP,       B)        /* A、 时间｛ensure_pop（）.call｝*/
OPCODE(SENDV,      BB)       /* R（a）=呼叫（R（a，Syms（b），*R（a+1））*/
OPCODE(SENDVB,     BB)       /* R（a）=呼叫（R（a，Syms（b），*R（a+1），&R（a+2））*/
OPCODE(SEND,       BBB)      /* R（a）=呼叫（R（a，Syms（b），R（a+1），…，R（a+c））*/
OPCODE(SENDB,      BBB)      /* R（a）=呼叫（R（a，Syms（Bx），R（a+1），…，R（a+c），&R（a+c+1））*/
OPCODE(CALL,       Z)        /* R（0）=自身调用（frame.argc，frame.argv）*/
OPCODE(SUPER,      BB)       /* R（a）=超（R（a+1），…，R（a+b+1））*/
OPCODE(ARGARY,     BS)       /* R（a）=参数数组（16=m5:r1:m5:d1:lv4）*/
OPCODE(ENTER,      W)        /* 根据标志设置参数（23=m5:o5:r1：m5:k5:d1:b1）*/
OPCODE(KEY_P,      BB)       /* R（a）=缺陷。钥匙（符号（b））#todo*/
OPCODE(KEYEND,     Z)        /* 除非kdict，否则提升。空？#托多*/
OPCODE(KARG,       BB)       /* R（a）=kdict[Syms（b）]；知识产权。delete（符号（b））#todo*/
OPCODE(RETURN,     B)        /* 返回R（a）（正常）*/
OPCODE(RETURN_BLK, B)        /* 返回R（a）（在块返回中）*/
OPCODE(BREAK,      B)        /* 断裂R（a）*/
OPCODE(BLKPUSH,    BS)       /* R（a）=块（16=m5:r1：m5:d1：lv4）*/
OPCODE(ADD,        B)        /* R（a）=R（a）+R（a+1）*/
OPCODE(ADDI,       BB)       /* R（a）=R（a）+mrb_int（c）*/
OPCODE(SUB,        B)        /* R（a）=R（a）-R（a+1）*/
OPCODE(SUBI,       BB)       /* R（a）=R（a）-C*/
OPCODE(MUL,        B)        /* R（a）=R（a）*R（a+1）*/
OPCODE(DIV,        B)        /* R（a）=R（a）/R（a+1）*/
OPCODE(EQ,         B)        /* R（a）=R（a）==R（a+1）*/
OPCODE(LT,         B)        /* R（a）=R（a）<R（a+1）*/
OPCODE(LE,         B)        /* R（a）=R（a）<=R（a+1）*/
OPCODE(GT,         B)        /* R（a）=R（a）>R（a+1）*/
OPCODE(GE,         B)        /* R（a）=R（a）>=R（a+1）*/
OPCODE(ARRAY,      BB)       /* R（a）=芳基_new（R（a，R（a+1）..R（a+b））*/
OPCODE(ARRAY2,     BBB)      /* R（a）=芳基_新（R（b），R（b+1）..R（b+c））*/
OPCODE(ARYCAT,     B)        /* ary_cat（R（a），R（a+1））*/
OPCODE(ARYPUSH,    B)        /* 芳基推（R（a），R（a+1））*/
OPCODE(ARYDUP,     B)        /* R（a）=ary_dup（R（a））*/
OPCODE(AREF,       BBB)      /* R（a）=R（b）[c]*/
OPCODE(ASET,       BBB)      /* R（a）[c]=R（b）*/
OPCODE(APOST,      BBB)      /* *R（a），R（a+1）..R（a+c）=R（a（b）]*/
OPCODE(INTERN,     B)        /* R（a）=实习生*/
OPCODE(STRING,     BB)       /* R（a）=str_dup（升（b））*/
OPCODE(STRCAT,     B)        /* str_cat（R（a），R（a+1））*/
OPCODE(HASH,       BB)       /* R（a）=hash_new（R（a，R（a+1）..R（a+b））*/
OPCODE(HASHADD,    BB)       /* R（a）=hash_push（R（a，R（a+1）..R（a+b））*/
OPCODE(HASHCAT,    B)        /* R（a）=hash_cat（R（a，R（a+1））*/
OPCODE(LAMBDA,     BB)       /* R（a）=λ（SEQ[b]，L_lambda）*/
OPCODE(BLOCK,      BB)       /* R（a）=λ（SEQ[b]，L_BLOCK）*/
OPCODE(METHOD,     BB)       /* R（a）=λ（SEQ[b]，L_METHOD）*/
OPCODE(RANGE_INC,  B)        /* R（a）=范围_新（R（a，R（a+1），假）*/
OPCODE(RANGE_EXC,  B)        /* R（a）=范围_新（R（b），R（a+1），真）*/
OPCODE(OCLASS,     B)        /* R（a）=：：对象*/
OPCODE(CLASS,      BB)       /* R（a）=新等级（R（a，Syms（b），R（a+1））*/
OPCODE(MODULE,     BB)       /* R（a）=新模块（R（a，Syms（b））*/
OPCODE(EXEC,       BB)       /* R（a）=区块执行（R（a，SEQ[b]）*/
OPCODE(DEF,        BB)       /* R（a）。新方法（Syms（b），R（a+1））*/
OPCODE(ALIAS,      BB)       /* alias_method（目标类、符号（a）、符号（b））*/
OPCODE(UNDEF,      B)        /* undefit_method（目标类，符号（a））*/
OPCODE(SCLASS,     B)        /* R（a）=R（a）。单线_类*/
OPCODE(TCLASS,     B)        /* R（a）=目标等级*/
OPCODE(DEBUG,      BBB)      /* 打印a、b、c*/
OPCODE(ERR,        B)        /* raise（LocalJumpError，Lit（a））*/
OPCODE(EXT1,       Z)        /* 使第一个操作数为16位*/
OPCODE(EXT2,       Z)        /* 使第二个操作数为16位*/
OPCODE(EXT3,       Z)        /* 使第一和第二操作数为16位*/
OPCODE(STOP,       Z)        /* 停止VM*/

