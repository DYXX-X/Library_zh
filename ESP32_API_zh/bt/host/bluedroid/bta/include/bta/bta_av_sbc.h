/******************************************************************************
 * 版权所有（C）2004-2012 Broadcom Corporation
 *
 *  根据Apache许可证2.0版（“许可证”）获得许可；除非符合许可证，否则不得使用此文件。您可以在以下地址获取许可证副本：
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  除非适用法律要求或书面同意，否则根据许可证分发的软件是按“原样”分发的，无任何明示或暗示的担保或条件。有关许可证下权限和限制的具体语言，请参阅许可证。
 *
 ******************************************************************************/

/******************************************************************************
 * 这是处理SBC数据帧和编解码器功能的实用功能的接口。
 *
 ******************************************************************************/
#ifndef BTA_AV_SBC_H
#define BTA_AV_SBC_H

#if (BTA_AV_INCLUDED == TRUE)

/*****************************************************************************
**  常量
*****************************************************************************/

/* SBC数据包报头大小*/
#define BTA_AV_SBC_HDR_SIZE         A2D_SBC_MPL_HDR_LEN

/*******************************************************************************
** 函数bta_av_sbc_init_up_sample
**
** 说明初始化上采样
**
**                  src_sps：每秒采样数（源音频数据）dst_sps：每秒采样（转换的音频数据）位：每pcm采样位数n通道：通道数（即单声道（1）、立体声（2）…）
**
** 不返回任何值
**
*******************************************************************************/
extern void bta_av_sbc_init_up_sample (UINT32 src_sps, UINT32 dst_sps,
                                       UINT16 bits, UINT16 n_channels);

/*******************************************************************************
** 函数bta_av_sbc_up_sample
**
** 说明给定源（p_src）音频数据和源速度（src_sps，每秒采样数），此函数将其转换为所需格式的音频数据
**
**                  p_src：保存源音频数据的数据缓冲区p_dst：保存转换后的音频数据的缓冲区src_samples：源采样数（字节数）dst_samples：p_dst的大小（字节数
**
** 注：AE报告此功能存在问题。当使用bta_av_sbc_up_sample（src，uint8_array_dst..）调用时，uint8 _array_dest之前的字节可能会被覆盖。使用uint16_array_dst可以避免此问题。这个问题与端序有关，很难以通用的方式解决。请使用uint16数组作为dst。
**
** 返回p_dst中使用的字节数p_src（以p_ret为单位）中使用的字符数
**
*******************************************************************************/
extern int bta_av_sbc_up_sample (void *p_src, void *p_dst,
                                 UINT32 src_samples, UINT32 dst_samples,
                                 UINT32 *p_ret);

/*******************************************************************************
** 函数bta_av_sbc_up_sample_16s（16位立体声）
**
** 说明给定源（p_src）音频数据和源速度（src_sps，每秒采样数），此函数将其转换为所需格式的音频数据
**
**                  p_src：保存源音频数据的数据缓冲区p_dst：保存转换后的音频数据的缓冲区src_samples：源采样数（单位：uint，4字节）dst_samples：p_dst的大小（单位：4字节）
**
** 返回p_dst中使用的字节数p_src（以p_ret为单位）中使用的字符数
**
*******************************************************************************/
extern int bta_av_sbc_up_sample_16s (void *p_src, void *p_dst,
                                     UINT32 src_samples, UINT32 dst_samples,
                                     UINT32 *p_ret);

/*******************************************************************************
** 函数bta_av_sbc_up_sample_16m（16位单声道）
**
** 说明给定源（p_src）音频数据和源速度（src_sps，每秒采样数），此函数将其转换为所需格式的音频数据
**
**                  p_src：保存源音频数据的数据缓冲区p_dst：保存转换后的音频数据的缓冲区src_samples：源采样数（单位：uint，2字节）dst_samples：p_dst的大小（单位：2字节）
**
** 返回p_dst中使用的字节数p_src（以p_ret为单位）中使用的字符数
**
*******************************************************************************/
extern int bta_av_sbc_up_sample_16m (void *p_src, void *p_dst,
                                     UINT32 src_samples, UINT32 dst_samples,
                                     UINT32 *p_ret);

/*******************************************************************************
** 函数bta_av_sbc_up_sample_8s（8位立体声）
**
** 说明给定源（p_src）音频数据和源速度（src_sps，每秒采样数），此函数将其转换为所需格式的音频数据
**
**                  p_src：保存源音频数据的数据缓冲区p_dst：保存转换后的音频数据的缓冲区src_samples：源采样数（单位：uint，2字节）dst_samples：p_dst的大小（单位：2字节）
**
** 返回p_dst中使用的字节数p_src（以p_ret为单位）中使用的字符数
**
*******************************************************************************/
extern int bta_av_sbc_up_sample_8s (void *p_src, void *p_dst,
                                    UINT32 src_samples, UINT32 dst_samples,
                                    UINT32 *p_ret);

/*******************************************************************************
** 函数bta_av_sbc_up_sample_8m（8位单声道）
**
** 说明给定源（p_src）音频数据和源速度（src_sps，每秒采样数），此函数将其转换为所需格式的音频数据
**
**                  p_src：保存源音频数据的数据缓冲区p_dst：保存转换后的音频数据的缓冲区src_samples：源采样数（字节数）dst_samples：p_dst的大小（字节数
**
** 返回p_dst中使用的字节数p_src（以p_ret为单位）中使用的字符数
**
*******************************************************************************/
extern int bta_av_sbc_up_sample_8m (void *p_src, void *p_dst,
                                    UINT32 src_samples, UINT32 dst_samples,
                                    UINT32 *p_ret);

/*******************************************************************************
** 函数bta_av_sbc_cfg_for_cap
**
** 说明确定给定编解码器功能的首选SBC编解码器配置。向该函数传递流的首选编解码器配置和对等编解码器功能。该功能尝试尽可能将首选功能与配置相匹配。生成的编解码器配置返回到用于功能的相同内存中。
**
** 如果正常，则返回0；如果错误，则返回非零。p_cap中的编解码器配置。
**
*******************************************************************************/
extern UINT8 bta_av_sbc_cfg_for_cap(UINT8 *p_peer, tA2D_SBC_CIE *p_cap, tA2D_SBC_CIE *p_pref);

/*******************************************************************************
** 函数bta_av_sbc_cfg_in_cap
**
** 说明此函数检查给定编解码器功能是否允许SBC编解码器配置。
**
** 如果正常，则返回0；如果错误，则返回非零。
**
*******************************************************************************/
extern UINT8 bta_av_sbc_cfg_in_cap(UINT8 *p_cfg, tA2D_SBC_CIE *p_cap);

/*******************************************************************************
** 函数bta_av_sbc_cfg_matches_cap
**
** 说明此功能检查SBC编解码器配置是否与功能匹配。这里我们检查子集。
**
** 如果正常，则返回0；如果错误，则返回非零。
**
*******************************************************************************/
extern UINT8 bta_av_sbc_cfg_matches_cap(UINT8 *p_cfg, tA2D_SBC_CIE *p_cap);

/*******************************************************************************
** 函数bta_av_sbc_bld_hdr
**
** 说明此函数为MPF1构建数据包标头。
**
** 返回void
**
*******************************************************************************/
extern void bta_av_sbc_bld_hdr(BT_HDR *p_buf, UINT16 fr_per_pkt);

#endif  ///BTA_AV_INCLUDED == TRUE

#endif /* BTA_AV_SBC_H */

